{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nimport * as React from 'react';\nimport { View, Platform, StyleSheet } from 'react-native';\nimport { SafeAreaConsumer } from 'react-native-safe-area-context';\nimport { StackActions, NavigationActions, SceneView } from 'react-navigation';\nimport { GestureHandlerRootView } from '../GestureHandler';\nimport CardStack from './CardStack';\nimport KeyboardManager from '../KeyboardManager';\nimport HeaderContainer from '../Header/HeaderContainer';\nimport SafeAreaProviderCompat from '../SafeAreaProviderCompat';\nimport HeaderShownContext from '../../utils/HeaderShownContext';\nconst GestureHandlerWrapper = GestureHandlerRootView !== null && GestureHandlerRootView !== void 0 ? GestureHandlerRootView : View;\n/**\n * Compare two arrays with primitive values as the content.\n * We need to make sure that both values and order match.\n */\n\nconst isArrayEqual = (a, b) => a.length === b.length && a.every((it, index) => it === b[index]);\nexport default class StackView extends React.Component {\n  constructor() {\n    super(...arguments);\n    _defineProperty(this, \"state\", {\n      routes: [],\n      previousRoutes: [],\n      previousDescriptors: {},\n      openingRouteKeys: [],\n      closingRouteKeys: [],\n      replacingRouteKeys: [],\n      descriptors: {}\n    });\n    _defineProperty(this, \"getGesturesEnabled\", _ref => {\n      let {\n        route\n      } = _ref;\n      const descriptor = this.state.descriptors[route.key];\n      if (descriptor) {\n        const {\n          gestureEnabled,\n          animationEnabled\n        } = descriptor.options;\n        if (animationEnabled === false) {\n          // When animation is disabled, also disable gestures\n          // The gesture to dismiss a route will look weird when not animated\n          return false;\n        }\n        return gestureEnabled !== undefined ? gestureEnabled : Platform.OS !== 'android';\n      }\n      return false;\n    });\n    _defineProperty(this, \"getPreviousRoute\", _ref2 => {\n      let {\n        route\n      } = _ref2;\n      const {\n        closingRouteKeys,\n        replacingRouteKeys\n      } = this.state;\n      const routes = this.state.routes.filter(r => r.key === route.key || !closingRouteKeys.includes(r.key) && !replacingRouteKeys.includes(r.key));\n      const index = routes.findIndex(r => r.key === route.key);\n      return routes[index - 1];\n    });\n    _defineProperty(this, \"renderScene\", _ref3 => {\n      let {\n        route\n      } = _ref3;\n      const descriptor = this.state.descriptors[route.key] || this.props.descriptors[route.key];\n      if (!descriptor) {\n        return null;\n      }\n      const {\n        navigation,\n        getComponent\n      } = descriptor;\n      const SceneComponent = getComponent();\n      return /*#__PURE__*/React.createElement(SceneView, {\n        screenProps: this.props.screenProps,\n        navigation: navigation,\n        component: SceneComponent\n      });\n    });\n    _defineProperty(this, \"renderHeader\", props => {\n      return /*#__PURE__*/React.createElement(HeaderContainer, props);\n    });\n    _defineProperty(this, \"handleTransitionComplete\", () => {\n      const {\n        state,\n        navigation\n      } = this.props;\n      if (state.isTransitioning) {\n        navigation.dispatch(StackActions.completeTransition({\n          key: navigation.state.key,\n          toChildKey: state.routes[state.index].key\n        }));\n      }\n    });\n    _defineProperty(this, \"handleOpenRoute\", _ref4 => {\n      let {\n        route\n      } = _ref4;\n      const {\n        state,\n        navigation\n      } = this.props;\n      const {\n        closingRouteKeys,\n        replacingRouteKeys\n      } = this.state;\n      this.handleTransitionComplete();\n      if (closingRouteKeys.some(key => key === route.key) && replacingRouteKeys.every(key => key !== route.key) && !state.routes.some(r => r.key === route.key)) {\n        // If route isn't present in current state, but was closing, assume that a close animation was cancelled\n        // So we need to add this route back to the state\n        navigation.dispatch(NavigationActions.navigate(route));\n      } else {\n        this.setState(state => ({\n          routes: state.replacingRouteKeys.length ? state.routes.filter(r => !state.replacingRouteKeys.includes(r.key)) : state.routes,\n          openingRouteKeys: state.openingRouteKeys.filter(key => key !== route.key),\n          closingRouteKeys: state.closingRouteKeys.filter(key => key !== route.key),\n          replacingRouteKeys: []\n        }));\n      }\n    });\n    _defineProperty(this, \"handleCloseRoute\", _ref5 => {\n      let {\n        route\n      } = _ref5;\n      const {\n        state,\n        navigation\n      } = this.props;\n      if (state.routes.some(r => r.key === route.key)) {\n        // If a route exists in state, trigger a pop\n        // This will happen in when the route was closed from the card component\n        // e.g. When the close animation triggered from a gesture ends\n        // @ts-ignore\n        navigation.dispatch(StackActions.pop({\n          key: route.key,\n          prune: false\n        }));\n      } else {\n        this.handleTransitionComplete(); // We need to clean up any state tracking the route and pop it immediately\n\n        this.setState(state => ({\n          routes: state.routes.filter(r => r.key !== route.key),\n          openingRouteKeys: state.openingRouteKeys.filter(key => key !== route.key),\n          closingRouteKeys: state.closingRouteKeys.filter(key => key !== route.key)\n        }));\n      }\n    });\n    _defineProperty(this, \"handleTransitionStart\", (_ref6, closing) => {\n      let {\n        route\n      } = _ref6;\n      var _descriptor$options$o, _descriptor$options;\n      const {\n        descriptors\n      } = this.props;\n      const descriptor = descriptors[route.key] || this.state.descriptors[route.key];\n      descriptor === null || descriptor === void 0 ? void 0 : (_descriptor$options$o = (_descriptor$options = descriptor.options).onTransitionStart) === null || _descriptor$options$o === void 0 ? void 0 : _descriptor$options$o.call(_descriptor$options, {\n        closing\n      });\n    });\n    _defineProperty(this, \"handleTransitionEnd\", (_ref7, closing) => {\n      let {\n        route\n      } = _ref7;\n      var _descriptor$options$o2, _descriptor$options2;\n      const {\n        descriptors\n      } = this.props;\n      const descriptor = descriptors[route.key] || this.state.descriptors[route.key];\n      descriptor === null || descriptor === void 0 ? void 0 : (_descriptor$options$o2 = (_descriptor$options2 = descriptor.options).onTransitionEnd) === null || _descriptor$options$o2 === void 0 ? void 0 : _descriptor$options$o2.call(_descriptor$options2, {\n        closing\n      });\n    });\n    _defineProperty(this, \"handleGestureStart\", () => {// Do nothing\n    });\n    _defineProperty(this, \"handleGestureEnd\", () => {// Do nothing\n    });\n    _defineProperty(this, \"handleGestureCancel\", () => {// Do nothing\n    });\n  }\n  static getDerivedStateFromProps(props, state) {\n    // If there was no change in routes, we don't need to compute anything\n    if ((props.state.routes === state.previousRoutes || isArrayEqual(props.state.routes.map(r => r.key), state.previousRoutes.map(r => r.key))) && state.routes.length) {\n      let routes = state.routes;\n      let previousRoutes = state.previousRoutes;\n      let descriptors = props.descriptors;\n      let previousDescriptors = state.previousDescriptors;\n      if (props.descriptors !== state.previousDescriptors) {\n        descriptors = state.routes.reduce((acc, route) => {\n          acc[route.key] = props.descriptors[route.key] || state.descriptors[route.key];\n          return acc;\n        }, {});\n        previousDescriptors = props.descriptors;\n      }\n      if (props.state.routes !== state.previousRoutes) {\n        // if any route objects have changed, we should update them\n        const map = props.state.routes.reduce((acc, route) => {\n          acc[route.key] = route;\n          return acc;\n        }, {});\n        routes = state.routes.map(route => map[route.key] || route);\n        previousRoutes = props.state.routes;\n      }\n      return {\n        routes,\n        previousRoutes,\n        descriptors,\n        previousDescriptors\n      };\n    } // Here we determine which routes were added or removed to animate them\n    // We keep a copy of the route being removed in local state to be able to animate it\n\n    let routes = props.state.index < props.state.routes.length - 1 ?\n    // Remove any extra routes from the state\n    // The last visible route should be the focused route, i.e. at current index\n    props.state.routes.slice(0, props.state.index + 1) : props.state.routes; // Now we need to determine which routes were added and removed\n\n    let {\n      openingRouteKeys,\n      closingRouteKeys,\n      replacingRouteKeys,\n      previousRoutes\n    } = state;\n    const previousFocusedRoute = previousRoutes[previousRoutes.length - 1];\n    const nextFocusedRoute = routes[routes.length - 1];\n    const isAnimationEnabled = key => {\n      const descriptor = props.descriptors[key] || state.descriptors[key];\n      return descriptor ? descriptor.options.animationEnabled !== false : true;\n    };\n    const getAnimationTypeForReplace = key => {\n      var _descriptor$options$a;\n      const descriptor = props.descriptors[key] || state.descriptors[key];\n      return (_descriptor$options$a = descriptor.options.animationTypeForReplace) !== null && _descriptor$options$a !== void 0 ? _descriptor$options$a : 'push';\n    };\n    if (previousFocusedRoute && previousFocusedRoute.key !== nextFocusedRoute.key) {\n      // We only need to animate routes if the focused route changed\n      // Animating previous routes won't be visible coz the focused route is on top of everything\n      if (!previousRoutes.some(r => r.key === nextFocusedRoute.key)) {\n        // A new route has come to the focus, we treat this as a push\n        // A replace can also trigger this, the animation should look like push\n        if (isAnimationEnabled(nextFocusedRoute.key) && !openingRouteKeys.includes(nextFocusedRoute.key)) {\n          // In this case, we need to animate pushing the focused route\n          // We don't care about animating any other added routes because they won't be visible\n          openingRouteKeys = [...openingRouteKeys, nextFocusedRoute.key];\n          closingRouteKeys = closingRouteKeys.filter(key => key !== nextFocusedRoute.key);\n          replacingRouteKeys = replacingRouteKeys.filter(key => key !== nextFocusedRoute.key);\n          if (!routes.some(r => r.key === previousFocusedRoute.key)) {\n            // The previous focused route isn't present in state, we treat this as a replace\n            openingRouteKeys = openingRouteKeys.filter(key => key !== previousFocusedRoute.key);\n            if (getAnimationTypeForReplace(nextFocusedRoute.key) === 'pop') {\n              closingRouteKeys = [...closingRouteKeys, previousFocusedRoute.key]; // By default, new routes have a push animation, so we add it to `openingRouteKeys` before\n              // But since user configured it to animate the old screen like a pop, we need to add this without animation\n              // So remove it from `openingRouteKeys` which will remove the animation\n\n              openingRouteKeys = openingRouteKeys.filter(key => key !== nextFocusedRoute.key); // Keep the route being removed at the end to animate it out\n\n              routes = [...routes, previousFocusedRoute];\n            } else {\n              replacingRouteKeys = [...replacingRouteKeys, previousFocusedRoute.key];\n              closingRouteKeys = closingRouteKeys.filter(key => key !== previousFocusedRoute.key); // Keep the old route in the state because it's visible under the new route, and removing it will feel abrupt\n              // We need to insert it just before the focused one (the route being pushed)\n              // After the push animation is completed, routes being replaced will be removed completely\n\n              routes = routes.slice();\n              routes.splice(routes.length - 1, 0, previousFocusedRoute);\n            }\n          }\n        }\n      } else if (!routes.some(r => r.key === previousFocusedRoute.key)) {\n        // The previously focused route was removed, we treat this as a pop\n        if (isAnimationEnabled(previousFocusedRoute.key) && !closingRouteKeys.includes(previousFocusedRoute.key)) {\n          closingRouteKeys = [...closingRouteKeys, previousFocusedRoute.key]; // Sometimes a route can be closed before the opening animation finishes\n          // So we also need to remove it from the opening list\n\n          openingRouteKeys = openingRouteKeys.filter(key => key !== previousFocusedRoute.key);\n          replacingRouteKeys = replacingRouteKeys.filter(key => key !== previousFocusedRoute.key); // Keep a copy of route being removed in the state to be able to animate it\n\n          routes = [...routes, previousFocusedRoute];\n        }\n      } else {// Looks like some routes were re-arranged and no focused routes were added/removed\n        // i.e. the currently focused route already existed and the previously focused route still exists\n        // We don't know how to animate this\n      }\n    } else if (replacingRouteKeys.length || closingRouteKeys.length) {\n      // Keep the routes we are closing or replacing if animation is enabled for them\n      routes = routes.slice();\n      routes.splice(routes.length - 1, 0, ...state.routes.filter(_ref8 => {\n        let {\n          key\n        } = _ref8;\n        return isAnimationEnabled(key) ? replacingRouteKeys.includes(key) || closingRouteKeys.includes(key) : false;\n      }));\n    }\n    if (!routes.length) {\n      throw new Error('There should always be at least one route in the navigation state.');\n    }\n    const descriptors = routes.reduce((acc, route) => {\n      acc[route.key] = props.descriptors[route.key] || state.descriptors[route.key];\n      return acc;\n    }, {});\n    return {\n      routes,\n      previousRoutes: props.state.routes,\n      previousDescriptors: props.descriptors,\n      openingRouteKeys,\n      closingRouteKeys,\n      replacingRouteKeys,\n      descriptors\n    };\n  }\n  render() {\n    const {\n      state,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      navigation,\n      keyboardHandlingEnabled,\n      mode = 'card',\n      headerMode = mode === 'card' && Platform.OS === 'ios' ? 'float' : 'screen',\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      descriptors: _,\n      ...rest\n    } = this.props;\n    const {\n      routes,\n      descriptors,\n      openingRouteKeys,\n      closingRouteKeys\n    } = this.state;\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(GestureHandlerWrapper, {\n      style: styles.container\n    }, /*#__PURE__*/React.createElement(SafeAreaProviderCompat, null, /*#__PURE__*/React.createElement(SafeAreaConsumer, null, insets => /*#__PURE__*/React.createElement(KeyboardManager, {\n      enabled: keyboardHandlingEnabled !== false\n    }, props => /*#__PURE__*/React.createElement(HeaderShownContext.Consumer, null, isParentHeaderShown => /*#__PURE__*/React.createElement(CardStack, _extends({\n      mode: mode,\n      insets: insets,\n      isParentHeaderShown: isParentHeaderShown,\n      getPreviousRoute: this.getPreviousRoute,\n      getGesturesEnabled: this.getGesturesEnabled,\n      routes: routes,\n      openingRouteKeys: openingRouteKeys,\n      closingRouteKeys: closingRouteKeys,\n      onOpenRoute: this.handleOpenRoute,\n      onCloseRoute: this.handleCloseRoute,\n      onTransitionStart: this.handleTransitionStart,\n      onTransitionEnd: this.handleTransitionEnd,\n      renderHeader: this.renderHeader,\n      renderScene: this.renderScene,\n      headerMode: headerMode,\n      state: state,\n      descriptors: descriptors,\n      onGestureStart: this.handleGestureStart,\n      onGestureEnd: this.handleGestureEnd,\n      onGestureCancel: this.handleGestureCancel\n    }, rest, props))))))));\n  }\n}\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1\n  }\n});","map":{"version":3,"names":["React","View","Platform","StyleSheet","SafeAreaConsumer","StackActions","NavigationActions","SceneView","GestureHandlerRootView","CardStack","KeyboardManager","HeaderContainer","SafeAreaProviderCompat","HeaderShownContext","GestureHandlerWrapper","isArrayEqual","a","b","length","every","it","index","StackView","Component","constructor","arguments","_defineProperty","routes","previousRoutes","previousDescriptors","openingRouteKeys","closingRouteKeys","replacingRouteKeys","descriptors","_ref","route","descriptor","state","key","gestureEnabled","animationEnabled","options","undefined","OS","_ref2","filter","r","includes","findIndex","_ref3","props","navigation","getComponent","SceneComponent","createElement","screenProps","component","isTransitioning","dispatch","completeTransition","toChildKey","_ref4","handleTransitionComplete","some","navigate","setState","_ref5","pop","prune","_ref6","closing","_descriptor$options$o","_descriptor$options","onTransitionStart","call","_ref7","_descriptor$options$o2","_descriptor$options2","onTransitionEnd","getDerivedStateFromProps","map","reduce","acc","slice","previousFocusedRoute","nextFocusedRoute","isAnimationEnabled","getAnimationTypeForReplace","_descriptor$options$a","animationTypeForReplace","splice","_ref8","Error","render","keyboardHandlingEnabled","mode","headerMode","_","rest","Fragment","style","styles","container","insets","enabled","Consumer","isParentHeaderShown","_extends","getPreviousRoute","getGesturesEnabled","onOpenRoute","handleOpenRoute","onCloseRoute","handleCloseRoute","handleTransitionStart","handleTransitionEnd","renderHeader","renderScene","onGestureStart","handleGestureStart","onGestureEnd","handleGestureEnd","onGestureCancel","handleGestureCancel","create","flex"],"sources":["/Users/solomon-moulang-lewis/Documents/University/Year 2/Term 2/User interface design/soen357Project/client/node_modules/react-navigation-stack/lib/module/vendor/views/Stack/StackView.tsx"],"sourcesContent":["import * as React from 'react';\nimport { View, Platform, StyleSheet } from 'react-native';\nimport { SafeAreaConsumer, EdgeInsets } from 'react-native-safe-area-context';\nimport {\n  StackActions,\n  NavigationState as StackNavigationState,\n  NavigationActions,\n  SceneView,\n} from 'react-navigation';\n\nimport { GestureHandlerRootView } from '../GestureHandler';\nimport CardStack from './CardStack';\nimport KeyboardManager from '../KeyboardManager';\nimport HeaderContainer, {\n  Props as HeaderContainerProps,\n} from '../Header/HeaderContainer';\nimport SafeAreaProviderCompat from '../SafeAreaProviderCompat';\nimport type {\n  Route,\n  StackNavigationHelpers,\n  StackNavigationConfig,\n  StackDescriptorMap,\n} from '../../types';\nimport HeaderShownContext from '../../utils/HeaderShownContext';\n\ntype Props = StackNavigationConfig & {\n  state: StackNavigationState;\n  navigation: StackNavigationHelpers;\n  descriptors: StackDescriptorMap;\n  screenProps: unknown;\n};\n\ntype State = {\n  // Local copy of the routes which are actually rendered\n  routes: Route<string>[];\n  // Previous routes, to compare whether routes have changed or not\n  previousRoutes: Route<string>[];\n  // Previous descriptors, to compare whether descriptors have changed or not\n  previousDescriptors: StackDescriptorMap;\n  // List of routes being opened, we need to animate pushing of these new routes\n  openingRouteKeys: string[];\n  // List of routes being closed, we need to animate popping of these routes\n  closingRouteKeys: string[];\n  // List of routes being replaced, we need to keep a copy until the new route animates in\n  replacingRouteKeys: string[];\n  // Since the local routes can vary from the routes from props, we need to keep the descriptors for old routes\n  // Otherwise we won't be able to access the options for routes that were removed\n  descriptors: StackDescriptorMap;\n};\n\nconst GestureHandlerWrapper = GestureHandlerRootView ?? View;\n\n/**\n * Compare two arrays with primitive values as the content.\n * We need to make sure that both values and order match.\n */\nconst isArrayEqual = (a: any[], b: any[]) =>\n  a.length === b.length && a.every((it, index) => it === b[index]);\n\nexport default class StackView extends React.Component<Props, State> {\n  static getDerivedStateFromProps(\n    props: Readonly<Props>,\n    state: Readonly<State>\n  ) {\n    // If there was no change in routes, we don't need to compute anything\n    if (\n      (props.state.routes === state.previousRoutes ||\n        isArrayEqual(\n          props.state.routes.map((r) => r.key),\n          state.previousRoutes.map((r) => r.key)\n        )) &&\n      state.routes.length\n    ) {\n      let routes = state.routes;\n      let previousRoutes = state.previousRoutes;\n      let descriptors = props.descriptors;\n      let previousDescriptors = state.previousDescriptors;\n\n      if (props.descriptors !== state.previousDescriptors) {\n        descriptors = state.routes.reduce<StackDescriptorMap>((acc, route) => {\n          acc[route.key] =\n            props.descriptors[route.key] || state.descriptors[route.key];\n\n          return acc;\n        }, {});\n\n        previousDescriptors = props.descriptors;\n      }\n\n      if (props.state.routes !== state.previousRoutes) {\n        // if any route objects have changed, we should update them\n        const map = props.state.routes.reduce<Record<string, Route<string>>>(\n          (acc, route) => {\n            acc[route.key] = route;\n            return acc;\n          },\n          {}\n        );\n\n        routes = state.routes.map((route) => map[route.key] || route);\n        previousRoutes = props.state.routes;\n      }\n\n      return {\n        routes,\n        previousRoutes,\n        descriptors,\n        previousDescriptors,\n      };\n    }\n\n    // Here we determine which routes were added or removed to animate them\n    // We keep a copy of the route being removed in local state to be able to animate it\n\n    let routes =\n      props.state.index < props.state.routes.length - 1\n        ? // Remove any extra routes from the state\n          // The last visible route should be the focused route, i.e. at current index\n          props.state.routes.slice(0, props.state.index + 1)\n        : props.state.routes;\n\n    // Now we need to determine which routes were added and removed\n    let {\n      openingRouteKeys,\n      closingRouteKeys,\n      replacingRouteKeys,\n      previousRoutes,\n    } = state;\n\n    const previousFocusedRoute = previousRoutes[previousRoutes.length - 1] as\n      | Route<string>\n      | undefined;\n    const nextFocusedRoute = routes[routes.length - 1];\n\n    const isAnimationEnabled = (key: string) => {\n      const descriptor = props.descriptors[key] || state.descriptors[key];\n\n      return descriptor ? descriptor.options.animationEnabled !== false : true;\n    };\n\n    const getAnimationTypeForReplace = (key: string) => {\n      const descriptor = props.descriptors[key] || state.descriptors[key];\n\n      return descriptor.options.animationTypeForReplace ?? 'push';\n    };\n\n    if (\n      previousFocusedRoute &&\n      previousFocusedRoute.key !== nextFocusedRoute.key\n    ) {\n      // We only need to animate routes if the focused route changed\n      // Animating previous routes won't be visible coz the focused route is on top of everything\n\n      if (!previousRoutes.some((r) => r.key === nextFocusedRoute.key)) {\n        // A new route has come to the focus, we treat this as a push\n        // A replace can also trigger this, the animation should look like push\n\n        if (\n          isAnimationEnabled(nextFocusedRoute.key) &&\n          !openingRouteKeys.includes(nextFocusedRoute.key)\n        ) {\n          // In this case, we need to animate pushing the focused route\n          // We don't care about animating any other added routes because they won't be visible\n          openingRouteKeys = [...openingRouteKeys, nextFocusedRoute.key];\n\n          closingRouteKeys = closingRouteKeys.filter(\n            (key) => key !== nextFocusedRoute.key\n          );\n          replacingRouteKeys = replacingRouteKeys.filter(\n            (key) => key !== nextFocusedRoute.key\n          );\n\n          if (!routes.some((r) => r.key === previousFocusedRoute.key)) {\n            // The previous focused route isn't present in state, we treat this as a replace\n\n            openingRouteKeys = openingRouteKeys.filter(\n              (key) => key !== previousFocusedRoute.key\n            );\n\n            if (getAnimationTypeForReplace(nextFocusedRoute.key) === 'pop') {\n              closingRouteKeys = [\n                ...closingRouteKeys,\n                previousFocusedRoute.key,\n              ];\n\n              // By default, new routes have a push animation, so we add it to `openingRouteKeys` before\n              // But since user configured it to animate the old screen like a pop, we need to add this without animation\n              // So remove it from `openingRouteKeys` which will remove the animation\n              openingRouteKeys = openingRouteKeys.filter(\n                (key) => key !== nextFocusedRoute.key\n              );\n\n              // Keep the route being removed at the end to animate it out\n              routes = [...routes, previousFocusedRoute];\n            } else {\n              replacingRouteKeys = [\n                ...replacingRouteKeys,\n                previousFocusedRoute.key,\n              ];\n\n              closingRouteKeys = closingRouteKeys.filter(\n                (key) => key !== previousFocusedRoute.key\n              );\n\n              // Keep the old route in the state because it's visible under the new route, and removing it will feel abrupt\n              // We need to insert it just before the focused one (the route being pushed)\n              // After the push animation is completed, routes being replaced will be removed completely\n              routes = routes.slice();\n              routes.splice(routes.length - 1, 0, previousFocusedRoute);\n            }\n          }\n        }\n      } else if (!routes.some((r) => r.key === previousFocusedRoute.key)) {\n        // The previously focused route was removed, we treat this as a pop\n\n        if (\n          isAnimationEnabled(previousFocusedRoute.key) &&\n          !closingRouteKeys.includes(previousFocusedRoute.key)\n        ) {\n          closingRouteKeys = [...closingRouteKeys, previousFocusedRoute.key];\n\n          // Sometimes a route can be closed before the opening animation finishes\n          // So we also need to remove it from the opening list\n          openingRouteKeys = openingRouteKeys.filter(\n            (key) => key !== previousFocusedRoute.key\n          );\n          replacingRouteKeys = replacingRouteKeys.filter(\n            (key) => key !== previousFocusedRoute.key\n          );\n\n          // Keep a copy of route being removed in the state to be able to animate it\n          routes = [...routes, previousFocusedRoute];\n        }\n      } else {\n        // Looks like some routes were re-arranged and no focused routes were added/removed\n        // i.e. the currently focused route already existed and the previously focused route still exists\n        // We don't know how to animate this\n      }\n    } else if (replacingRouteKeys.length || closingRouteKeys.length) {\n      // Keep the routes we are closing or replacing if animation is enabled for them\n      routes = routes.slice();\n      routes.splice(\n        routes.length - 1,\n        0,\n        ...state.routes.filter(({ key }) =>\n          isAnimationEnabled(key)\n            ? replacingRouteKeys.includes(key) || closingRouteKeys.includes(key)\n            : false\n        )\n      );\n    }\n\n    if (!routes.length) {\n      throw new Error(\n        'There should always be at least one route in the navigation state.'\n      );\n    }\n\n    const descriptors = routes.reduce<StackDescriptorMap>((acc, route) => {\n      acc[route.key] =\n        props.descriptors[route.key] || state.descriptors[route.key];\n\n      return acc;\n    }, {});\n\n    return {\n      routes,\n      previousRoutes: props.state.routes,\n      previousDescriptors: props.descriptors,\n      openingRouteKeys,\n      closingRouteKeys,\n      replacingRouteKeys,\n      descriptors,\n    };\n  }\n\n  state: State = {\n    routes: [],\n    previousRoutes: [],\n    previousDescriptors: {},\n    openingRouteKeys: [],\n    closingRouteKeys: [],\n    replacingRouteKeys: [],\n    descriptors: {},\n  };\n\n  private getGesturesEnabled = ({ route }: { route: Route<string> }) => {\n    const descriptor = this.state.descriptors[route.key];\n\n    if (descriptor) {\n      const { gestureEnabled, animationEnabled } = descriptor.options;\n\n      if (animationEnabled === false) {\n        // When animation is disabled, also disable gestures\n        // The gesture to dismiss a route will look weird when not animated\n        return false;\n      }\n\n      return gestureEnabled !== undefined\n        ? gestureEnabled\n        : Platform.OS !== 'android';\n    }\n\n    return false;\n  };\n\n  private getPreviousRoute = ({ route }: { route: Route<string> }) => {\n    const { closingRouteKeys, replacingRouteKeys } = this.state;\n    const routes = this.state.routes.filter(\n      (r) =>\n        r.key === route.key ||\n        (!closingRouteKeys.includes(r.key) &&\n          !replacingRouteKeys.includes(r.key))\n    );\n\n    const index = routes.findIndex((r) => r.key === route.key);\n\n    return routes[index - 1];\n  };\n\n  private renderScene = ({ route }: { route: Route<string> }) => {\n    const descriptor =\n      this.state.descriptors[route.key] || this.props.descriptors[route.key];\n\n    if (!descriptor) {\n      return null;\n    }\n\n    const { navigation, getComponent } = descriptor;\n    const SceneComponent = getComponent();\n\n    return (\n      <SceneView\n        screenProps={this.props.screenProps}\n        navigation={navigation}\n        component={SceneComponent}\n      />\n    );\n  };\n\n  private renderHeader = (props: HeaderContainerProps) => {\n    return <HeaderContainer {...props} />;\n  };\n\n  private handleTransitionComplete = () => {\n    const { state, navigation } = this.props;\n\n    if (state.isTransitioning) {\n      navigation.dispatch(\n        StackActions.completeTransition({\n          key: navigation.state.key,\n          toChildKey: state.routes[state.index].key,\n        })\n      );\n    }\n  };\n\n  private handleOpenRoute = ({ route }: { route: Route<string> }) => {\n    const { state, navigation } = this.props;\n    const { closingRouteKeys, replacingRouteKeys } = this.state;\n\n    this.handleTransitionComplete();\n\n    if (\n      closingRouteKeys.some((key) => key === route.key) &&\n      replacingRouteKeys.every((key) => key !== route.key) &&\n      !state.routes.some((r) => r.key === route.key)\n    ) {\n      // If route isn't present in current state, but was closing, assume that a close animation was cancelled\n      // So we need to add this route back to the state\n      navigation.dispatch(NavigationActions.navigate(route));\n    } else {\n      this.setState((state) => ({\n        routes: state.replacingRouteKeys.length\n          ? state.routes.filter(\n              (r) => !state.replacingRouteKeys.includes(r.key)\n            )\n          : state.routes,\n        openingRouteKeys: state.openingRouteKeys.filter(\n          (key) => key !== route.key\n        ),\n        closingRouteKeys: state.closingRouteKeys.filter(\n          (key) => key !== route.key\n        ),\n        replacingRouteKeys: [],\n      }));\n    }\n  };\n\n  private handleCloseRoute = ({ route }: { route: Route<string> }) => {\n    const { state, navigation } = this.props;\n\n    if (state.routes.some((r) => r.key === route.key)) {\n      // If a route exists in state, trigger a pop\n      // This will happen in when the route was closed from the card component\n      // e.g. When the close animation triggered from a gesture ends\n      // @ts-ignore\n      navigation.dispatch(StackActions.pop({ key: route.key, prune: false }));\n    } else {\n      this.handleTransitionComplete();\n\n      // We need to clean up any state tracking the route and pop it immediately\n      this.setState((state) => ({\n        routes: state.routes.filter((r) => r.key !== route.key),\n        openingRouteKeys: state.openingRouteKeys.filter(\n          (key) => key !== route.key\n        ),\n        closingRouteKeys: state.closingRouteKeys.filter(\n          (key) => key !== route.key\n        ),\n      }));\n    }\n  };\n\n  private handleTransitionStart = (\n    { route }: { route: Route<string> },\n    closing: boolean\n  ) => {\n    const { descriptors } = this.props;\n    const descriptor =\n      descriptors[route.key] || this.state.descriptors[route.key];\n\n    descriptor?.options.onTransitionStart?.({ closing });\n  };\n\n  private handleTransitionEnd = (\n    { route }: { route: Route<string> },\n    closing: boolean\n  ) => {\n    const { descriptors } = this.props;\n    const descriptor =\n      descriptors[route.key] || this.state.descriptors[route.key];\n\n    descriptor?.options.onTransitionEnd?.({ closing });\n  };\n\n  private handleGestureStart = () => {\n    // Do nothing\n  };\n\n  private handleGestureEnd = () => {\n    // Do nothing\n  };\n\n  private handleGestureCancel = () => {\n    // Do nothing\n  };\n\n  render() {\n    const {\n      state,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      navigation,\n      keyboardHandlingEnabled,\n      mode = 'card',\n      headerMode = mode === 'card' && Platform.OS === 'ios'\n        ? 'float'\n        : 'screen',\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      descriptors: _,\n      ...rest\n    } = this.props;\n\n    const {\n      routes,\n      descriptors,\n      openingRouteKeys,\n      closingRouteKeys,\n    } = this.state;\n\n    return (\n      <>\n        <GestureHandlerWrapper style={styles.container}>\n          <SafeAreaProviderCompat>\n            <SafeAreaConsumer>\n              {(insets) => (\n                <KeyboardManager enabled={keyboardHandlingEnabled !== false}>\n                  {(props) => (\n                    <HeaderShownContext.Consumer>\n                      {(isParentHeaderShown) => (\n                        <CardStack\n                          mode={mode}\n                          insets={insets as EdgeInsets}\n                          isParentHeaderShown={isParentHeaderShown}\n                          getPreviousRoute={this.getPreviousRoute}\n                          getGesturesEnabled={this.getGesturesEnabled}\n                          routes={routes}\n                          openingRouteKeys={openingRouteKeys}\n                          closingRouteKeys={closingRouteKeys}\n                          onOpenRoute={this.handleOpenRoute}\n                          onCloseRoute={this.handleCloseRoute}\n                          onTransitionStart={this.handleTransitionStart}\n                          onTransitionEnd={this.handleTransitionEnd}\n                          renderHeader={this.renderHeader}\n                          renderScene={this.renderScene}\n                          headerMode={headerMode}\n                          state={state}\n                          descriptors={descriptors}\n                          onGestureStart={this.handleGestureStart}\n                          onGestureEnd={this.handleGestureEnd}\n                          onGestureCancel={this.handleGestureCancel}\n                          {...rest}\n                          {...props}\n                        />\n                      )}\n                    </HeaderShownContext.Consumer>\n                  )}\n                </KeyboardManager>\n              )}\n            </SafeAreaConsumer>\n          </SafeAreaProviderCompat>\n        </GestureHandlerWrapper>\n      </>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}