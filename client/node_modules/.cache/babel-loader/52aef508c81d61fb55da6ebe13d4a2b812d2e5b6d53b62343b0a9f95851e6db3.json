{"ast":null,"code":"function _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport React from 'react';\nimport { Animated, View, Image } from 'react-native';\nexport * from './types';\nexport { default as useTransitionProgress } from './useTransitionProgress';\nexport { isSearchBarAvailableForCurrentPlatform, executeNativeBackPress } from './utils';\nlet ENABLE_SCREENS = true;\nexport function enableScreens() {\n  let shouldEnableScreens = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n  ENABLE_SCREENS = shouldEnableScreens;\n}\nexport function screensEnabled() {\n  return ENABLE_SCREENS;\n}\n\n// @ts-ignore function stub, freezing logic is located in index.native.tsx\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nexport function enableFreeze() {\n  let shouldEnableReactFreeze = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n} // noop\n\nexport class NativeScreen extends React.Component {\n  render() {\n    let {\n      active,\n      activityState,\n      style,\n      enabled = ENABLE_SCREENS,\n      ...rest\n    } = this.props;\n    if (enabled) {\n      if (active !== undefined && activityState === undefined) {\n        activityState = active !== 0 ? 2 : 0; // change taken from index.native.tsx\n      }\n\n      return /*#__PURE__*/React.createElement(View\n      // @ts-expect-error: hidden exists on web, but not in React Native\n      , _extends({\n        hidden: activityState === 0,\n        style: [style, {\n          display: activityState !== 0 ? 'flex' : 'none'\n        }]\n      }, rest));\n    }\n    return /*#__PURE__*/React.createElement(View, rest);\n  }\n}\nexport const Screen = Animated.createAnimatedComponent(NativeScreen);\nexport const InnerScreen = View;\nexport const ScreenContext = /*#__PURE__*/React.createContext(Screen);\nexport const ScreenContainer = View;\nexport const NativeScreenContainer = View;\nexport const NativeScreenNavigationContainer = View;\nexport const ScreenStack = View;\nexport const FullWindowOverlay = View;\nexport const ScreenStackHeaderBackButtonImage = props => /*#__PURE__*/React.createElement(View, null, /*#__PURE__*/React.createElement(Image, _extends({\n  resizeMode: \"center\",\n  fadeDuration: 0\n}, props)));\nexport const ScreenStackHeaderRightView = props => /*#__PURE__*/React.createElement(View, props);\nexport const ScreenStackHeaderLeftView = props => /*#__PURE__*/React.createElement(View, props);\nexport const ScreenStackHeaderCenterView = props => /*#__PURE__*/React.createElement(View, props);\nexport const ScreenStackHeaderSearchBarView = props => /*#__PURE__*/React.createElement(View, props);\nexport const ScreenStackHeaderConfig = View;\n\n// @ts-expect-error: search bar props have no common props with View\nexport const SearchBar = View;\nexport const ScreenStackHeaderSubview = View;\nexport const shouldUseActivityState = true;","map":{"version":3,"names":["React","Animated","View","Image","default","useTransitionProgress","isSearchBarAvailableForCurrentPlatform","executeNativeBackPress","ENABLE_SCREENS","enableScreens","shouldEnableScreens","arguments","length","undefined","screensEnabled","enableFreeze","shouldEnableReactFreeze","NativeScreen","Component","render","active","activityState","style","enabled","rest","props","createElement","_extends","hidden","display","Screen","createAnimatedComponent","InnerScreen","ScreenContext","createContext","ScreenContainer","NativeScreenContainer","NativeScreenNavigationContainer","ScreenStack","FullWindowOverlay","ScreenStackHeaderBackButtonImage","resizeMode","fadeDuration","ScreenStackHeaderRightView","ScreenStackHeaderLeftView","ScreenStackHeaderCenterView","ScreenStackHeaderSearchBarView","ScreenStackHeaderConfig","SearchBar","ScreenStackHeaderSubview","shouldUseActivityState"],"sources":["/Users/solomon-moulang-lewis/Documents/University/Year 2/Term 2/User interface design/soen357Project/client/node_modules/react-native-screens/lib/module/index.tsx"],"sourcesContent":["import React, { ReactNode } from 'react';\nimport { Animated, View, ViewProps, ImageProps, Image } from 'react-native';\nimport {\n  ScreenProps,\n  ScreenContainerProps,\n  ScreenStackProps,\n  ScreenStackHeaderConfigProps,\n  HeaderSubviewTypes,\n  SearchBarProps,\n} from './types';\n\nexport * from './types';\nexport { default as useTransitionProgress } from './useTransitionProgress';\nexport {\n  isSearchBarAvailableForCurrentPlatform,\n  executeNativeBackPress,\n} from './utils';\n\nlet ENABLE_SCREENS = true;\n\nexport function enableScreens(shouldEnableScreens = true): void {\n  ENABLE_SCREENS = shouldEnableScreens;\n}\n\nexport function screensEnabled(): boolean {\n  return ENABLE_SCREENS;\n}\n\n// @ts-ignore function stub, freezing logic is located in index.native.tsx\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nexport function enableFreeze(shouldEnableReactFreeze = true): void {\n  // noop\n}\n\nexport class NativeScreen extends React.Component<ScreenProps> {\n  render(): JSX.Element {\n    let {\n      active,\n      activityState,\n      style,\n      enabled = ENABLE_SCREENS,\n      ...rest\n    } = this.props;\n\n    if (enabled) {\n      if (active !== undefined && activityState === undefined) {\n        activityState = active !== 0 ? 2 : 0; // change taken from index.native.tsx\n      }\n      return (\n        <View\n          // @ts-expect-error: hidden exists on web, but not in React Native\n          hidden={activityState === 0}\n          style={[style, { display: activityState !== 0 ? 'flex' : 'none' }]}\n          {...rest}\n        />\n      );\n    }\n\n    return <View {...rest} />;\n  }\n}\n\nexport const Screen = Animated.createAnimatedComponent(NativeScreen);\n\nexport const InnerScreen = View;\n\nexport const ScreenContext = React.createContext(Screen);\n\nexport const ScreenContainer: React.ComponentType<ScreenContainerProps> = View;\n\nexport const NativeScreenContainer: React.ComponentType<ScreenContainerProps> =\n  View;\n\nexport const NativeScreenNavigationContainer: React.ComponentType<ScreenContainerProps> =\n  View;\n\nexport const ScreenStack: React.ComponentType<ScreenStackProps> = View;\n\nexport const FullWindowOverlay = View as React.ComponentType<{\n  children: ReactNode;\n}>;\n\nexport const ScreenStackHeaderBackButtonImage = (\n  props: ImageProps\n): JSX.Element => (\n  <View>\n    <Image resizeMode=\"center\" fadeDuration={0} {...props} />\n  </View>\n);\n\nexport const ScreenStackHeaderRightView = (\n  props: React.PropsWithChildren<ViewProps>\n): JSX.Element => <View {...props} />;\n\nexport const ScreenStackHeaderLeftView = (\n  props: React.PropsWithChildren<ViewProps>\n): JSX.Element => <View {...props} />;\n\nexport const ScreenStackHeaderCenterView = (\n  props: React.PropsWithChildren<ViewProps>\n): JSX.Element => <View {...props} />;\n\nexport const ScreenStackHeaderSearchBarView = (\n  props: React.PropsWithChildren<SearchBarProps>\n): JSX.Element => <View {...props} />;\n\nexport const ScreenStackHeaderConfig: React.ComponentType<ScreenStackHeaderConfigProps> =\n  View;\n\n// @ts-expect-error: search bar props have no common props with View\nexport const SearchBar: React.ComponentType<SearchBarProps> = View;\n\nexport const ScreenStackHeaderSubview: React.ComponentType<\n  React.PropsWithChildren<ViewProps & { type?: HeaderSubviewTypes }>\n> = View;\n\nexport const shouldUseActivityState = true;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}