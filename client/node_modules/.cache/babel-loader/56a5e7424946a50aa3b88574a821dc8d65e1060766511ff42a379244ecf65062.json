{"ast":null,"code":"/**\n * Bundle of @devexpress/dx-scheduler-core\n * Generated: 2023-01-27\n * Version: 4.0.3\n * License: https://js.devexpress.com/Licensing\n */\n\nimport moment from 'moment';\nimport { RRuleSet, RRule } from 'rrule';\nimport { slice } from '@devexpress/dx-core';\n\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\n\nvar __assign = function () {\n  __assign = Object.assign || function __assign(t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nfunction __rest(s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n}\nfunction __read(o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n    r,\n    ar = [],\n    e;\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n  return ar;\n}\nfunction __spreadArray(to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n    if (ar || !(i in from)) {\n      if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n      ar[i] = from[i];\n    }\n  }\n  return to.concat(ar || from);\n}\nvar computed = function (getters, viewName, baseComputed, defaultValue) {\n  if (getters.currentView.name !== viewName && !!defaultValue) {\n    return defaultValue;\n  }\n  return baseComputed(getters, viewName);\n};\nvar toPercentage = function (value, total) {\n  return value * 100 / total;\n};\nvar createExcludedInterval = function (day, start) {\n  var leftBound = moment(start.day(day));\n  return [leftBound, moment(leftBound).hour(start.hour()).endOf('day')];\n};\nvar excludedIntervals = function (excludedDays, start) {\n  return excludedDays.map(function (day) {\n    return day === 0 ? 7 : day;\n  }).sort(function (a, b) {\n    return a - b;\n  }).reduce(function (acc, day, i, allDays) {\n    if (i && day === allDays[i - 1] + 1) {\n      acc[acc.length - 1][1].day(day);\n    } else {\n      acc.push(createExcludedInterval(day, start));\n    }\n    return acc;\n  }, []);\n};\nvar inInterval = function (date, interval) {\n  return date.isBetween(interval[0], interval[1], undefined, '[]');\n};\nvar viewPredicate = function (appointment, left, right, excludedDays, removeAllDayAppointments) {\n  if (excludedDays === void 0) {\n    excludedDays = [];\n  }\n  if (removeAllDayAppointments === void 0) {\n    removeAllDayAppointments = false;\n  }\n  var start = appointment.start,\n    end = appointment.end;\n  var isAppointmentInBoundary = end.isAfter(left) && start.isBefore(right);\n  var isAppointmentInExcludedDays = !!excludedIntervals(excludedDays, moment(left)).find(function (interval) {\n    return inInterval(start, interval) && inInterval(end, interval);\n  });\n  var considerAllDayAppointment = removeAllDayAppointments ? moment(end).diff(start, 'hours') < 24 && !appointment.allDay : true;\n  return isAppointmentInBoundary && !isAppointmentInExcludedDays && considerAllDayAppointment;\n};\nvar calculateFirstDateOfWeek = function (currentDate, firstDayOfWeek, excludedDays) {\n  if (excludedDays === void 0) {\n    excludedDays = [];\n  }\n  var currentLocale = moment.locale();\n  moment.updateLocale('tmp-locale', {\n    week: {\n      dow: firstDayOfWeek,\n      doy: 1\n    } // `doy` is required for TS using\n  });\n\n  var firstDateOfWeek = moment(currentDate).startOf('week');\n  if (excludedDays.indexOf(firstDayOfWeek) !== -1) {\n    excludedDays.slice().sort().forEach(function (day) {\n      if (day === firstDateOfWeek.day()) {\n        firstDateOfWeek.add(1, 'days');\n      }\n    });\n  }\n  moment.locale(currentLocale);\n  return firstDateOfWeek.toDate();\n};\nvar getAppointmentStyle = function (_a) {\n  var top = _a.top,\n    left = _a.left,\n    width = _a.width,\n    height = _a.height;\n  return {\n    height: height,\n    width: \"\".concat(width, \"%\"),\n    transform: \"translateY(\".concat(top, \"px)\"),\n    msTransform: \"translateY(\".concat(top, \"px)\"),\n    left: \"\".concat(left, \"%\"),\n    position: 'absolute'\n  };\n};\nvar expandRecurrenceAppointment = function (appointment, leftBound, rightBound) {\n  var rightBoundUTC = moment(getUTCDate(rightBound)).toDate();\n  var leftBoundUTC = moment(getUTCDate(leftBound)).toDate();\n  var appointmentStartDate = moment(appointment.start).toDate();\n  var options = __assign(__assign({}, RRule.parseString(appointment.rRule)), {\n    dtstart: moment(getUTCDate(appointmentStartDate)).toDate()\n  });\n  var correctedOptions = options.until ? __assign(__assign({}, options), {\n    until: moment(getUTCDate(options.until)).toDate()\n  }) : options;\n  var rruleSet = getRRuleSetWithExDates(appointment.exDate);\n  rruleSet.rrule(new RRule(correctedOptions));\n  // According to https://github.com/jakubroztocil/rrule#important-use-utc-dates\n  // we have to format the dates we get from RRuleSet to get local dates\n  var datesInBoundaries = rruleSet.between(leftBoundUTC, rightBoundUTC, true).map(formatDateToString);\n  if (datesInBoundaries.length === 0) return [];\n  var appointmentDuration = moment(appointment.end).diff(appointment.start, 'minutes');\n  return datesInBoundaries.map(function (startDate, index) {\n    return __assign(__assign({}, appointment), {\n      dataItem: __assign(__assign({}, appointment.dataItem), {\n        startDate: moment(startDate).toDate(),\n        endDate: moment(startDate).add(appointmentDuration, 'minutes').toDate(),\n        parentData: appointment.dataItem\n      }),\n      start: moment(startDate),\n      end: moment(startDate).add(appointmentDuration, 'minutes'),\n      key: \"\".concat(appointment.key, \"_rec_\").concat(index)\n    });\n  });\n};\nvar filterByViewBoundaries = function (appointment, leftBound, rightBound, excludedDays, removeAllDay) {\n  var appointments = [appointment];\n  if (appointment.rRule) {\n    appointments = expandRecurrenceAppointment(appointment, leftBound, rightBound);\n  }\n  return appointments.filter(function (appt) {\n    return viewPredicate(appt, leftBound, rightBound, excludedDays, removeAllDay);\n  });\n};\nvar getUTCDate = function (date) {\n  return Date.UTC(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(), date.getMinutes());\n};\nvar getRRuleSetWithExDates = function (exDate) {\n  var rruleSet = new RRuleSet();\n  if (exDate) {\n    exDate.split(',').map(function (date) {\n      var currentExDate = moment(date).toDate();\n      rruleSet.exdate(moment(getUTCDate(currentExDate)).toDate());\n    });\n  }\n  return rruleSet;\n};\nvar formatDateToString = function (date) {\n  return moment.utc(date).format('YYYY-MM-DDTHH:mm');\n};\nvar addDateToKey = function (prevKey, momentDate) {\n  return \"\".concat(prevKey, \"_\").concat(momentDate.toDate().toString());\n};\nvar VERTICAL_TYPE = 'vertical';\nvar HORIZONTAL_TYPE = 'horizontal';\nvar SCROLL_OFFSET = 50;\nvar SCROLL_SPEED_PX = 15;\nvar SECONDS = 'seconds';\nvar MINUTES = 'minutes';\nvar HOURS = 'hours';\nvar RESIZE_TOP = 'resize-start';\nvar RESIZE_BOTTOM = 'resize-end';\nvar POSITION_START = 'start';\nvar POSITION_END = 'end';\nvar AUTO_HEIGHT = 'auto';\nvar DAY_OPTIONS = {\n  day: 'numeric'\n};\nvar WEEK_DAY_OPTIONS = {\n  weekday: 'short'\n};\nvar SHORT_MONTH_OPTIONS = {\n  month: 'short'\n};\nvar HOUR_MINUTE_OPTIONS = {\n  hour: 'numeric',\n  minute: 'numeric'\n};\nvar MONTH_YEAR_OPTIONS = {\n  month: 'long',\n  year: 'numeric'\n};\nvar DAY_SHORT_MONTH_OPTIONS = {\n  day: 'numeric',\n  month: 'short'\n};\nvar SHORT_MONTH_LONG_YEAR_OPTIONS = {\n  month: 'short',\n  year: 'numeric'\n};\nvar SHORT_MONTH_SHORT_YEAR_OPTIONS = {\n  month: 'short',\n  year: '2-digit'\n};\nvar DAY_LONG_MONTH_LONG_YEAR_OPTIONS = {\n  day: 'numeric',\n  month: 'long',\n  year: 'numeric'\n};\nvar DAY_SHORT_MONTH_LONG_YEAR_OPTIONS = {\n  day: 'numeric',\n  month: 'short',\n  year: 'numeric'\n};\nvar DAY_SHORT_MONTH_SHORT_YEAR_OPTIONS = {\n  day: 'numeric',\n  month: 'short',\n  year: '2-digit'\n};\nvar LONG_WEEK_DAY_OPTIONS = {\n  weekday: 'long'\n};\nvar LONG_MONTH_OPTIONS = {\n  month: 'long'\n};\nvar DAY_LONG_MONTH_OPTIONS = {\n  day: 'numeric',\n  month: 'long'\n};\nvar EMPTY_OPTIONS = {};\nvar RECURRENCE_EDIT_SCOPE = {\n  ALL: 'all',\n  CURRENT_AND_FOLLOWING: 'currentAndFollowing',\n  CURRENT: 'current'\n};\nvar TOGGLE_APPOINTMENT_FORM_VISIBILITY = 'toggleAppointmentFormVisibility';\nvar TOGGLE_APPOINTMENT_TOOLTIP_VISIBILITY = 'toggleAppointmentTooltipVisibility';\nvar WEEKDAY_INTERVAL = 'weekdayInterval';\nvar VERTICAL_VIEW_LEFT_OFFSET = 80;\nvar HORIZONTAL_VIEW_LEFT_OFFSET = 0;\nvar VERTICAL_GROUP_ORIENTATION = 'Vertical';\nvar HORIZONTAL_GROUP_ORIENTATION = 'Horizontal';\nvar VIEW_TYPES = {\n  MONTH: 'month',\n  WEEK: 'week',\n  DAY: 'day',\n  ALL_DAY_PANEL: 'allDayPanel'\n};\nvar MONTH_TYPE = 'month';\nvar getViewType = function (currentViewType) {\n  if (currentViewType === MONTH_TYPE) return HORIZONTAL_TYPE;\n  return VERTICAL_TYPE;\n};\nvar isMidnight = function (date) {\n  var momentDate = moment(date);\n  return momentDate.hours() === 0 && momentDate.minutes() === 0 && momentDate.seconds() === 0;\n};\nvar calculateTextByDays = function (startViewDate, endViewDate, formatDate, additionalOptions) {\n  var momentStartViewDate = moment(startViewDate);\n  var momentEndViewDate = moment(endViewDate);\n  if (momentStartViewDate.isSame(momentEndViewDate, 'day')) {\n    return formatDate(momentStartViewDate.toDate(), __assign(__assign({}, DAY_LONG_MONTH_LONG_YEAR_OPTIONS), additionalOptions));\n  }\n  if (momentStartViewDate.isSame(momentEndViewDate, 'year')) {\n    if (momentStartViewDate.isSame(momentEndViewDate, 'month')) {\n      return \"\".concat(formatDate(momentStartViewDate.toDate(), DAY_OPTIONS), \"-\").concat(formatDate(momentEndViewDate.toDate(), DAY_OPTIONS), \" \").concat(formatDate(momentEndViewDate.toDate(), MONTH_YEAR_OPTIONS));\n    }\n    return \"\".concat(formatDate(momentStartViewDate.toDate(), DAY_SHORT_MONTH_OPTIONS), \" - \").concat(formatDate(momentEndViewDate.toDate(), DAY_SHORT_MONTH_LONG_YEAR_OPTIONS));\n  }\n  return \"\".concat(formatDate(momentStartViewDate.toDate(), DAY_SHORT_MONTH_SHORT_YEAR_OPTIONS), \" - \").concat(formatDate(momentEndViewDate.toDate(), DAY_SHORT_MONTH_SHORT_YEAR_OPTIONS));\n};\nvar calculateTextByMonths = function (currentDate, intervalCount, formatDate) {\n  var momentCurrentDate = moment(currentDate);\n  if (intervalCount === 1) {\n    return formatDate(momentCurrentDate.toDate(), MONTH_YEAR_OPTIONS);\n  }\n  var lastMonth = momentCurrentDate.clone().add(intervalCount - 1, 'month');\n  if (momentCurrentDate.isSame(lastMonth, 'year')) {\n    return \"\".concat(formatDate(momentCurrentDate.toDate(), SHORT_MONTH_OPTIONS), \"-\").concat(formatDate(lastMonth.toDate(), SHORT_MONTH_LONG_YEAR_OPTIONS));\n  }\n  return \"\".concat(formatDate(momentCurrentDate.toDate(), SHORT_MONTH_SHORT_YEAR_OPTIONS), \" - \").concat(formatDate(lastMonth.toDate(), SHORT_MONTH_SHORT_YEAR_OPTIONS));\n};\nvar viewBoundText = function (startViewDate, endViewDate, type, currentDate, intervalCount, formatDate) {\n  return type !== 'month' ? calculateTextByDays(startViewDate, endViewDate, formatDate, type === WEEKDAY_INTERVAL ? LONG_WEEK_DAY_OPTIONS : EMPTY_OPTIONS) : calculateTextByMonths(currentDate, intervalCount, formatDate);\n};\nvar checkCellGroupingInfo = function (cell, appointment) {\n  return cell.groupingInfo ? cell.groupingInfo.every(function (group) {\n    return group.id === appointment[group.fieldName];\n  }) : true;\n};\nvar isDateValid = function (date) {\n  return moment(date).isValid();\n};\nvar convertToMoment = function (date) {\n  return moment(date);\n};\nvar areDatesSame = function (firstDate, secondDate) {\n  return moment(firstDate).isSame(secondDate, 'date');\n};\nvar getTimeTableHeight = function (timeTableElementsMeta) {\n  var _a;\n  return (_a = timeTableElementsMeta.parentRect) === null || _a === void 0 ? void 0 : _a.call(timeTableElementsMeta).height;\n};\nvar containsDSTChange = function (date) {\n  var momentDate = moment(date);\n  momentDate.startOf('day');\n  var isStartDST = momentDate.isDST();\n  momentDate.endOf('day');\n  var isEndDst = momentDate.isDST();\n  return isStartDST && !isEndDst || !isStartDST && isEndDst;\n};\nvar subtractSecond = function (date) {\n  return moment(date).subtract(1, 'second').toDate();\n};\nvar dayScale = function (currentDate, firstDayOfWeek, dayCount, excluded) {\n  if (excluded === void 0) {\n    excluded = [];\n  }\n  var result = [];\n  var date = firstDayOfWeek !== undefined ? moment(calculateFirstDateOfWeek(currentDate, firstDayOfWeek, excluded)) : moment(currentDate);\n  for (var index = 0; index < dayCount; index += 1) {\n    if (excluded.findIndex(function (item) {\n      return item === date.day();\n    }) === -1) {\n      result.push(date.toDate());\n    }\n    date.add(1, 'days');\n  }\n  return result;\n};\nvar timeScale = function (currentDate, firstDayOfWeek, startDayHour, endDayHour, cellDuration, excludedDays) {\n  var result = [];\n  var startDateOfView = firstDayOfWeek !== undefined ? calculateFirstDateOfWeek(currentDate, firstDayOfWeek, excludedDays) : currentDate;\n  var isDSTChange = containsDSTChange(startDateOfView);\n  var validDate = moment(startDateOfView);\n  if (isDSTChange) {\n    validDate.subtract(1, 'day');\n  }\n  var left = moment(validDate).startOf('day').add(startDayHour, 'hour');\n  var right = moment(validDate).startOf('day').add(endDayHour, 'hour');\n  while (left.isBefore(right)) {\n    var startDate = left.toDate();\n    left.add(cellDuration, 'minutes');\n    result.push({\n      start: startDate,\n      end: left.toDate()\n    });\n  }\n  var timeScaleLastIndex = result.length - 1;\n  if (isMidnight(result[timeScaleLastIndex].end)) {\n    result[timeScaleLastIndex].end = subtractSecond(result[timeScaleLastIndex].end);\n  }\n  return result;\n};\nvar availableViews = function (views, viewName, viewDisplayName) {\n  if (!views) return [{\n    name: viewName,\n    displayName: viewDisplayName\n  }];\n  if (views.findIndex(function (view) {\n    return viewName === view.name;\n  }) === -1) {\n    var nextViews = views.slice();\n    nextViews.push({\n      name: viewName,\n      displayName: viewDisplayName\n    });\n    return nextViews;\n  }\n  return views;\n};\nvar viewCellsData = function (currentDate, firstDayOfWeek, dayCount, excludedDays, startDayHour, endDayHour, cellDuration, currTime) {\n  var days = dayScale(currentDate, firstDayOfWeek, dayCount, excludedDays);\n  var times = timeScale(currentDate, firstDayOfWeek, startDayHour, endDayHour, cellDuration, excludedDays);\n  var currentTime = moment(currTime);\n  return times.reduce(function (cellsAcc, time) {\n    var start = moment(time.start);\n    var end = moment(time.end);\n    var rowCells = days.reduce(function (rowAcc, day) {\n      var startDate = moment(day).hours(start.hours()).minutes(start.minutes()).toDate();\n      var endDate = moment(day).hours(end.hours()).minutes(end.minutes()).toDate();\n      var today = currentTime.isSame(startDate, 'day');\n      rowAcc.push({\n        startDate: startDate,\n        endDate: endDate,\n        today: today\n      });\n      return rowAcc;\n    }, []);\n    cellsAcc.push(rowCells);\n    return cellsAcc;\n  }, []);\n};\nvar timeCellsData = function (cellsData, startDayHour, endDayHour, cellDuration, currentTime) {\n  var firstViewDate = cellsData[0][0].startDate;\n  if (!containsDSTChange(firstViewDate)) {\n    return cellsData;\n  }\n  var nextDay = moment(firstViewDate).add(1, 'day').toDate();\n  var validCellsData = viewCellsData(nextDay, undefined, 1, [], startDayHour, endDayHour, cellDuration, currentTime);\n  return validCellsData;\n};\nvar allDayCells = function (viewCells) {\n  return [viewCells[0].map(function (cell) {\n    return {\n      startDate: moment(cell.startDate).startOf('day').toDate(),\n      endDate: moment(cell.startDate).add(1, 'day').startOf('day').toDate(),\n      groupingInfo: cell.groupingInfo,\n      endOfGroup: cell.endOfGroup\n    };\n  })];\n};\nvar startViewDate = function (viewCells) {\n  return moment(viewCells[0][0].startDate).toDate();\n};\nvar endViewDate = function (viewCells) {\n  var lastRowIndex = viewCells.length - 1;\n  var lastCellIndex = viewCells[lastRowIndex].length - 1;\n  return subtractSecond(viewCells[lastRowIndex][lastCellIndex].endDate);\n};\nvar MAX_WIDTH = 1;\nvar INDIRECT_CHILD_LEFT_OFFSET = 0.05;\nvar isAllDayElementsMetaActual = function (viewCellsData, allDayElementsMeta, groupOrientation, groupCount) {\n  var numberOfRows = groupOrientation === HORIZONTAL_GROUP_ORIENTATION ? 1 : groupCount;\n  return isElementsMetaActual(viewCellsData, allDayElementsMeta, numberOfRows);\n};\nvar isTimeTableElementsMetaActual = function (viewCellsData, timeTableElementsMeta) {\n  return isElementsMetaActual(viewCellsData, timeTableElementsMeta, viewCellsData.length);\n};\nvar isElementsMetaActual = function (viewCellsData, elementsMeta, numberOfRows) {\n  if (!(elementsMeta === null || elementsMeta === void 0 ? void 0 : elementsMeta.getCellRects)) {\n    return false;\n  }\n  var tableSize = numberOfRows * viewCellsData[0].length;\n  return tableSize === elementsMeta.getCellRects.length;\n};\nvar appointmentHeightType = function (appointment, cellDuration) {\n  var durationRatio = appointment.end.clone().diff(appointment.start, 'minutes') / cellDuration;\n  if (durationRatio === 1) return 'middle';\n  if (durationRatio > 1) return 'long';\n  return 'short';\n};\nvar horizontalRectCalculator = function (appointment, viewMetaData, _a) {\n  var getRectByAppointment = _a.rectByDates,\n    multiline = _a.multiline,\n    _b = _a.rectByDatesMeta,\n    cellElementsMeta = _b.cellElementsMeta,\n    viewCellsData = _b.viewCellsData;\n  var _c = getRectByAppointment(appointment, viewMetaData, {\n      multiline: multiline,\n      cellElementsMeta: cellElementsMeta,\n      viewCellsData: viewCellsData\n    }),\n    top = _c.top,\n    left = _c.left,\n    width = _c.width,\n    height = _c.height,\n    parentWidth = _c.parentWidth;\n  return {\n    resources: appointment.resources,\n    top: top + height / appointment.reduceValue * appointment.offset,\n    height: height / appointment.reduceValue,\n    left: toPercentage(left, parentWidth),\n    width: toPercentage(width, parentWidth),\n    dataItem: appointment.dataItem,\n    fromPrev: appointment.fromPrev,\n    toNext: appointment.toNext,\n    type: HORIZONTAL_TYPE,\n    key: appointment.key\n  };\n};\nvar verticalRectCalculator = function (appointment, viewMetaData, _a) {\n  var getRectByAppointment = _a.rectByDates,\n    multiline = _a.multiline,\n    _b = _a.rectByDatesMeta,\n    viewCellsData = _b.viewCellsData,\n    cellDuration = _b.cellDuration,\n    cellElementsMeta = _b.cellElementsMeta,\n    excludedDays = _b.excludedDays;\n  var _c = getRectByAppointment(appointment, viewMetaData, {\n      multiline: multiline,\n      viewCellsData: viewCellsData,\n      cellDuration: cellDuration,\n      excludedDays: excludedDays,\n      cellElementsMeta: cellElementsMeta\n    }),\n    top = _c.top,\n    left = _c.left,\n    width = _c.width,\n    height = _c.height,\n    parentWidth = _c.parentWidth;\n  var offset = appointment.offset,\n    relativeWidth = appointment.width,\n    relativeLeft = appointment.left;\n  var widthMultiplier = relativeWidth * 5 / 3 + relativeLeft <= 1 ? 5 / 3 : 1;\n  var validWidth = widthMultiplier === 5 / 3 ? widthMultiplier * relativeWidth : relativeWidth + 0.02;\n  if (validWidth + relativeLeft > 1) {\n    validWidth = 1 - relativeLeft;\n  }\n  return {\n    resources: appointment.resources,\n    top: top,\n    height: height,\n    left: toPercentage(left + relativeLeft * width, parentWidth),\n    width: toPercentage(validWidth * width, parentWidth),\n    dataItem: appointment.dataItem,\n    fromPrev: appointment.fromPrev,\n    toNext: appointment.toNext,\n    durationType: appointmentHeightType(appointment, cellDuration),\n    type: VERTICAL_TYPE,\n    offset: offset,\n    key: appointment.key\n  };\n};\nvar oldVerticalRectCalculator = function (appointment, viewMetaData, _a) {\n  var getRectByAppointment = _a.rectByDates,\n    multiline = _a.multiline,\n    _b = _a.rectByDatesMeta,\n    viewCellsData = _b.viewCellsData,\n    cellDuration = _b.cellDuration,\n    cellElementsMeta = _b.cellElementsMeta,\n    excludedDays = _b.excludedDays,\n    placeAppointmentsNextToEachOther = _b.placeAppointmentsNextToEachOther;\n  var _c = getRectByAppointment(appointment, viewMetaData, {\n      multiline: multiline,\n      viewCellsData: viewCellsData,\n      cellDuration: cellDuration,\n      excludedDays: excludedDays,\n      cellElementsMeta: cellElementsMeta,\n      placeAppointmentsNextToEachOther: placeAppointmentsNextToEachOther\n    }),\n    top = _c.top,\n    left = _c.left,\n    width = _c.width,\n    height = _c.height,\n    parentWidth = _c.parentWidth;\n  var widthInPx = width / appointment.reduceValue;\n  return {\n    resources: appointment.resources,\n    top: top,\n    height: height,\n    left: toPercentage(left + widthInPx * appointment.offset, parentWidth),\n    width: toPercentage(widthInPx, parentWidth),\n    dataItem: appointment.dataItem,\n    fromPrev: appointment.fromPrev,\n    toNext: appointment.toNext,\n    durationType: appointmentHeightType(appointment, cellDuration),\n    type: VERTICAL_TYPE,\n    key: appointment.key\n  };\n};\nvar compareByDay = function (first, second) {\n  if (first.start.isBefore(second.start, 'day')) return -1;\n  if (first.start.isAfter(second.start, 'day')) return 1;\n  return 0;\n};\nvar compareByAllDay = function (first, second) {\n  if (first.allDay && !second.allDay) return -1;\n  if (!first.allDay && second.allDay) return 1;\n  return 0;\n};\nvar compareByTime = function (first, second) {\n  if (first.start.isBefore(second.start)) return -1;\n  if (first.start.isAfter(second.start)) return 1;\n  if (first.end.isBefore(second.end)) return 1;\n  if (first.end.isAfter(second.end)) return -1;\n  return 0;\n};\nvar sortAppointments = function (appointments) {\n  return appointments.slice().sort(function (a, b) {\n    return compareByDay(a, b) || compareByAllDay(a, b) || compareByTime(a, b);\n  });\n};\nvar byDayPredicate = function (boundary, date) {\n  return boundary.isSameOrAfter(date, 'day') && !boundary.isSame(boundary.clone().startOf('day'));\n};\nvar findOverlappedAppointments = function (sortedAppointments, byDay) {\n  if (byDay === void 0) {\n    byDay = false;\n  }\n  var appointments = sortedAppointments.slice();\n  var groups = [];\n  var totalIndex = 0;\n  while (totalIndex < appointments.length) {\n    groups.push([]);\n    var current = appointments[totalIndex];\n    var currentGroup = groups[groups.length - 1];\n    var next = appointments[totalIndex + 1];\n    var maxBoundary = current.end;\n    currentGroup.push(current);\n    totalIndex += 1;\n    while (next && (maxBoundary.isAfter(next.start) || byDay && byDayPredicate(maxBoundary, next.start))) {\n      currentGroup.push(next);\n      if (maxBoundary.isBefore(next.end)) maxBoundary = next.end;\n      totalIndex += 1;\n      next = appointments[totalIndex];\n    }\n  }\n  return groups;\n};\nvar isMidnight$1 = function (date) {\n  return date.isSame(date.clone().startOf('day'));\n};\nvar maxBoundaryPredicate = function (maxBoundary, startDate) {\n  return maxBoundary.isBefore(startDate, 'day') || isMidnight$1(maxBoundary) && maxBoundary.isSame(startDate, 'day');\n};\nvar calculateAppointmentOffsets = function (groups, byDay) {\n  if (byDay === void 0) {\n    byDay = false;\n  }\n  return groups.map(function (items) {\n    var offset = 0;\n    var reduceValue = 1;\n    var appointments = items.map(function (appointment) {\n      return __assign({}, appointment);\n    });\n    var groupLength = appointments.length;\n    for (var startIndex = 0; startIndex < groupLength; startIndex += 1) {\n      var appointment = appointments[startIndex];\n      if (appointment.offset === undefined) {\n        var maxBoundary = appointment.end;\n        appointment.offset = offset;\n        for (var index = startIndex + 1; index < groupLength; index += 1) {\n          if (appointments[index].offset === undefined) {\n            if (!byDay && maxBoundary.isSameOrBefore(appointments[index].start) || byDay && maxBoundaryPredicate(maxBoundary, appointments[index].start)) {\n              maxBoundary = appointments[index].end;\n              appointments[index].offset = offset;\n            }\n          }\n        }\n        offset += 1;\n        if (reduceValue < offset) reduceValue = offset;\n      }\n    }\n    return {\n      items: appointments,\n      reduceValue: reduceValue\n    };\n  });\n};\nvar unwrapAppointmentForest = function (appointmentForests) {\n  var forestUnwrapped = appointmentForests.map(function (_a) {\n    var items = _a.items,\n      reduceValue = _a.reduceValue;\n    return {\n      reduceValue: reduceValue,\n      items: items.map(function (_a) {\n        var data = _a.data;\n        return __assign({}, data);\n      })\n    };\n  });\n  return unwrapGroups(forestUnwrapped);\n};\nvar unwrapGroups = function (groups) {\n  return groups.reduce(function (acc, _a) {\n    var items = _a.items,\n      reduceValue = _a.reduceValue;\n    acc.push.apply(acc, __spreadArray([], __read(items.map(function (_a) {\n      var start = _a.start,\n        end = _a.end,\n        dataItem = _a.dataItem,\n        offset = _a.offset,\n        resources = _a.resources,\n        key = _a.key,\n        restProps = __rest(_a, [\"start\", \"end\", \"dataItem\", \"offset\", \"resources\", \"key\"]);\n      return __assign({\n        start: start,\n        end: end,\n        dataItem: dataItem,\n        offset: offset,\n        reduceValue: reduceValue,\n        resources: resources,\n        fromPrev: moment(start).diff(dataItem.startDate, 'minutes') > 1,\n        toNext: moment(dataItem.endDate).diff(end, 'minutes') > 1,\n        key: key\n      }, restProps);\n    })), false));\n    return acc;\n  }, []);\n};\nvar intervalIncludes = function (intervalStart, intervalEnd, date) {\n  return date.isBetween(intervalStart, intervalEnd, undefined, '[)');\n};\nvar createAppointmentForest = function (appointmentGroups, cellDuration) {\n  return appointmentGroups.map(function (appointmentGroup) {\n    var items = appointmentGroup.items;\n    var nextItems;\n    var roots;\n    if (items.length === 1) {\n      nextItems = [{\n        data: items[0],\n        children: [],\n        treeDepth: 0,\n        isDirectChild: false,\n        hasDirectChild: false\n      }];\n      roots = [0];\n    } else {\n      var _a = visitRoots(items, cellDuration),\n        appointments = _a.appointments,\n        appointmentTreeRoots = _a.roots;\n      nextItems = appointments;\n      roots = appointmentTreeRoots;\n    }\n    return __assign(__assign({}, appointmentGroup), {\n      items: nextItems,\n      roots: roots\n    });\n  });\n};\nvar visitRoots = function (appointmentItems, cellDuration) {\n  var appointmentNodes = appointmentItems.map(function (props) {\n    return {\n      data: props\n    };\n  });\n  var roots = appointmentNodes.reduce(function (acc, appointment, appointmentIndex) {\n    var appointmentOffset = appointment.data.offset;\n    if (appointmentOffset === 0) {\n      if (appointmentIndex + 1 === appointmentNodes.length) {\n        appointment.children = [];\n        appointment.hasDirectChild = false;\n        appointment.treeDepth = 0;\n      } else {\n        appointment.treeDepth = visitAllChildren(appointmentNodes, appointmentIndex, cellDuration, 0);\n      }\n      appointment.parent = undefined;\n      appointment.isDirectChild = false;\n      return __spreadArray(__spreadArray([], __read(acc), false), [appointmentIndex], false);\n    }\n    return acc;\n  }, []);\n  return {\n    appointments: appointmentNodes,\n    roots: roots\n  };\n};\nvar visitChild = function (appointmentNodes, index, parentAppointmentIndex, cellDuration, isDirectChild, treeDepth) {\n  var appointmentNode = appointmentNodes[index];\n  appointmentNode.isDirectChild = isDirectChild;\n  appointmentNode.parent = parentAppointmentIndex;\n  var nextTreeDepth = treeDepth + 1;\n  var end = appointmentNode.data.end;\n  if (index === appointmentNodes.length - 1 || end.isSameOrBefore(appointmentNodes[index + 1].data.start)) {\n    appointmentNode.children = [];\n    appointmentNode.treeDepth = 0;\n    appointmentNode.hasDirectChild = false;\n    return nextTreeDepth;\n  }\n  var calculatedTreeDepth = visitAllChildren(appointmentNodes, index, cellDuration, treeDepth);\n  appointmentNode.treeDepth = calculatedTreeDepth;\n  return calculatedTreeDepth + 1;\n};\nvar visitAllChildren = function (appointmentNodes, appointmentIndex, cellDuration, treeDepth) {\n  var appointment = appointmentNodes[appointmentIndex];\n  var _a = appointment.data,\n    end = _a.end,\n    appointmentOffset = _a.offset,\n    start = _a.start;\n  var directChildTimeLimit = moment(start).add(cellDuration, 'minutes');\n  var maxAppointmentTreeDepth = 0;\n  var children = [];\n  var nextChildIndex = appointmentIndex + 1;\n  while (isPossibleChild(appointmentNodes, nextChildIndex, end, appointmentOffset)) {\n    var nextAppointment = appointmentNodes[nextChildIndex];\n    var _b = nextAppointment.data,\n      nextOffset = _b.offset,\n      nextStart = _b.start;\n    if (nextOffset === appointmentOffset + 1) {\n      var isDirectChild = intervalIncludes(start, directChildTimeLimit, nextStart);\n      var nextTreeDepth = visitChild(appointmentNodes, nextChildIndex, appointmentIndex, cellDuration, isDirectChild, treeDepth);\n      if (maxAppointmentTreeDepth < nextTreeDepth) {\n        maxAppointmentTreeDepth = nextTreeDepth;\n      }\n      children.push(nextChildIndex);\n    }\n    nextChildIndex += 1;\n  }\n  appointment.hasDirectChild = children.length !== 0 && appointmentNodes[children[0]].isDirectChild;\n  appointment.children = children;\n  return maxAppointmentTreeDepth;\n};\nvar isPossibleChild = function (appointments, possibleChildIndex, parentEnd, parentOffset) {\n  var possibleChild = appointments[possibleChildIndex];\n  return possibleChildIndex < appointments.length && possibleChild.data.offset !== parentOffset && possibleChild.data.start.isBefore(parentEnd);\n};\nvar findMaxReduceValue = function (appointmentGroups) {\n  return appointmentGroups.reduce(function (maxReduceValue, group) {\n    var currentReduceValue = group.reduceValue;\n    return maxReduceValue > currentReduceValue ? maxReduceValue : currentReduceValue;\n  }, 1);\n};\nvar calculateAppointmentsMetaData = function (appointmentGroups, indirectChildLeftOffset) {\n  return appointmentGroups.map(function (appointmentForest) {\n    var items = appointmentForest.items,\n      roots = appointmentForest.roots;\n    var firstNode = items[0];\n    return __assign(__assign({}, appointmentForest), {\n      items: items.length === 1 ? [__assign(__assign({}, firstNode), {\n        data: __assign(__assign({}, firstNode.data), {\n          left: 0,\n          width: 1\n        })\n      })] : calculateRootsMetaData(items, roots, indirectChildLeftOffset)\n    });\n  });\n};\nvar calculateRootsMetaData = function (appointmentNodes, roots, indirectChildLeftOffset) {\n  var appointments = appointmentNodes.map(function (props) {\n    return __assign({}, props);\n  });\n  roots.forEach(function (appointmentIndex) {\n    var appointment = appointments[appointmentIndex];\n    var _a = calculateAppointmentLeftAndWidth(appointments, undefined, appointment, MAX_WIDTH, indirectChildLeftOffset, undefined),\n      left = _a.left,\n      width = _a.width;\n    appointment.data.left = left;\n    appointment.data.width = width;\n    calculateChildrenMetaData(appointments, appointment, MAX_WIDTH, indirectChildLeftOffset);\n  });\n  return appointments;\n};\nvar calculateChildMetaData = function (appointmentNodes, appointmentIndex, maxWidth, indirectChildLeftOffset) {\n  var appointment = appointmentNodes[appointmentIndex];\n  var _a = calculateAppointmentLeftAndWidth(appointmentNodes, undefined, appointment, maxWidth, indirectChildLeftOffset, undefined),\n    left = _a.left,\n    width = _a.width;\n  appointment.data.left = left;\n  appointment.data.width = width;\n  calculateChildrenMetaData(appointmentNodes, appointment, maxWidth, indirectChildLeftOffset);\n};\nvar calculateChildrenMetaData = function (appointmentNodes, appointmentNode, maxWidth, indirectChildLeftOffset) {\n  appointmentNode.children.forEach(function (childIndex) {\n    calculateChildMetaData(appointmentNodes, childIndex, maxWidth, indirectChildLeftOffset);\n  });\n};\nvar calculateAppointmentLeftAndWidth = function (appointmentNodes, blocks, appointmentNode, maxRight, indirectChildLeftOffset, defaultLeft) {\n  var _a = appointmentNode,\n    hasDirectChild = _a.hasDirectChild,\n    treeDepth = _a.treeDepth,\n    isDirectChild = _a.isDirectChild,\n    parentIndex = _a.parent,\n    children = _a.children,\n    blockIndex = _a.blockIndex;\n  var firstChild = appointmentNodes[children[0]];\n  var firstChildBlockIndex = firstChild === null || firstChild === void 0 ? void 0 : firstChild.blockIndex;\n  var hasDirectChildAndInSameBlock = hasDirectChild && (firstChildBlockIndex === undefined || blockIndex === firstChildBlockIndex || blocks[firstChildBlockIndex].includedInto === blockIndex || maxRight === 1);\n  if (parentIndex === undefined) {\n    return {\n      width: hasDirectChildAndInSameBlock ? maxRight / (treeDepth + 1) : maxRight,\n      left: 0\n    };\n  }\n  var parent = appointmentNodes[parentIndex];\n  var _b = parent.data,\n    parentWidth = _b.width,\n    parentLeft = _b.left;\n  var calculatedLeft = isDirectChild ? parentLeft + parentWidth : parentLeft + indirectChildLeftOffset;\n  var left = defaultLeft !== undefined ? Math.max(defaultLeft, calculatedLeft) : calculatedLeft;\n  var unoccupiedSpace = maxRight - left;\n  return {\n    width: hasDirectChildAndInSameBlock ? unoccupiedSpace / (treeDepth + 1) : unoccupiedSpace,\n    left: left\n  };\n};\nvar prepareToGroupIntoBlocks = function (appointments) {\n  return appointments.map(function (appointmentForest) {\n    var nodes = appointmentForest.items;\n    var appointmentNodes = nodes.map(function (props) {\n      return __assign({}, props);\n    });\n    appointmentNodes.forEach(function (appointmentNode, index) {\n      if (index === 0) {\n        appointmentNode.overlappingSubTreeRoots = [];\n        return;\n      }\n      var overlappingSubTreeRoots = [];\n      var _a = appointmentNode.data,\n        appointmentOffset = _a.offset,\n        end = _a.end;\n      var nextChildIndex = index + 1;\n      var currentBlockEnd;\n      while (isPossibleChild(appointmentNodes, nextChildIndex, end, appointmentOffset)) {\n        var nextAppointment = appointmentNodes[nextChildIndex];\n        if (nextAppointment.data.offset < appointmentOffset && nextAppointment.maxOffset === undefined) {\n          nextAppointment.maxOffset = appointmentOffset;\n        }\n        var previousSubTreeRoot = overlappingSubTreeRoots.length > 0 ? appointmentNodes[overlappingSubTreeRoots[overlappingSubTreeRoots.length - 1]] : undefined;\n        if (isOverlappingSubTreeRoot(appointmentNode, nextAppointment, previousSubTreeRoot, currentBlockEnd)) {\n          overlappingSubTreeRoots.push(nextChildIndex);\n          nextAppointment.overlappingSubTreeRoot = true;\n          var maxChildDate = findChildrenMaxEndDate(appointmentNodes, nextAppointment);\n          if (!currentBlockEnd || currentBlockEnd.isBefore(maxChildDate)) {\n            currentBlockEnd = maxChildDate;\n          }\n        }\n        nextChildIndex += 1;\n      }\n      appointmentNode.overlappingSubTreeRoots = overlappingSubTreeRoots;\n    });\n    return __assign(__assign({}, appointmentForest), {\n      items: appointmentNodes\n    });\n  });\n};\nvar isOverlappingSubTreeRoot = function (appointmentNode, nextAppointment, previousSubTreeRoot, previousEndDate) {\n  var overlappingSubTreeRoot = nextAppointment.overlappingSubTreeRoot,\n    maxOffset = nextAppointment.maxOffset,\n    nextData = nextAppointment.data;\n  var nextOffset = nextData.offset,\n    nextStart = nextData.start;\n  var offset = appointmentNode.data.offset;\n  return nextOffset < offset && !overlappingSubTreeRoot && (maxOffset === undefined || maxOffset >= offset) && (!previousSubTreeRoot || previousSubTreeRoot.data.offset >= nextOffset && nextStart.isSameOrAfter(previousEndDate));\n};\nvar findChildrenMaxEndDate = function (appointmentNodes, appointmentNode) {\n  var children = appointmentNode.children,\n    data = appointmentNode.data;\n  var end = data.end;\n  var maxDate = children.reduce(function (currentMaxDate, childIndex) {\n    var child = appointmentNodes[childIndex];\n    var maxChildrenDate = findChildrenMaxEndDate(appointmentNodes, child);\n    if (maxChildrenDate.isAfter(currentMaxDate)) {\n      return maxChildrenDate;\n    }\n    return currentMaxDate;\n  }, end);\n  return maxDate;\n};\nvar groupAppointmentsIntoBlocks = function (appointmentForests) {\n  return appointmentForests.map(function (appointmentForest) {\n    var items = appointmentForest.items,\n      reduceValue = appointmentForest.reduceValue;\n    var _a = items.reduce(function (acc, appointment, index) {\n        var blocks = acc.blocks.slice();\n        var treeDepth = appointment.treeDepth,\n          data = appointment.data,\n          overlappingSubTreeRoots = appointment.overlappingSubTreeRoots;\n        var offset = data.offset,\n          start = data.start,\n          end = data.end;\n        var blockIndex = findBlockIndexByAppointment(blocks, appointment);\n        if (blockIndex < 0) {\n          blocks.push({\n            start: start,\n            end: end,\n            minOffset: offset,\n            maxOffset: offset + treeDepth,\n            size: treeDepth + 1,\n            items: [],\n            endForChildren: end\n          });\n          blockIndex = blocks.length - 1;\n        }\n        blocks[blockIndex].items.push(index);\n        overlappingSubTreeRoots.forEach(function (subTreeRootIndex) {\n          var subTreeRoot = items[subTreeRootIndex];\n          var subTreeRootData = subTreeRoot.data;\n          blocks.push({\n            start: subTreeRootData.start,\n            end: end,\n            minOffset: subTreeRootData.offset,\n            maxOffset: offset - 1,\n            size: calculateBlockSizeByEndDate(items, subTreeRoot, end),\n            items: [],\n            endForChildren: subTreeRootData.end\n          });\n        });\n        var appointmentInBlock = __assign(__assign({}, appointment), {\n          blockIndex: blockIndex\n        });\n        return {\n          blocks: blocks,\n          appointments: __spreadArray(__spreadArray([], __read(acc.appointments), false), [appointmentInBlock], false)\n        };\n      }, {\n        blocks: [{\n          start: items[0].data.start,\n          end: items[0].data.end,\n          minOffset: 0,\n          maxOffset: reduceValue - 1,\n          size: reduceValue,\n          items: [],\n          endForChildren: items[0].data.end\n        }],\n        appointments: []\n      }),\n      nextBlocks = _a.blocks,\n      appointments = _a.appointments;\n    return {\n      blocks: nextBlocks,\n      appointmentForest: __assign(__assign({}, appointmentForest), {\n        items: appointments\n      })\n    };\n  });\n};\nvar calculateBlockSizeByEndDate = function (appointmentNodes, subTreeRoot, blockEndDate) {\n  var children = subTreeRoot.children,\n    data = subTreeRoot.data;\n  var start = data.start;\n  if (children.length === 0) {\n    if (blockEndDate.isAfter(start)) {\n      return 1;\n    }\n    return 0;\n  }\n  var maxSize = Math.max.apply(Math, __spreadArray([], __read(children.map(function (childIndex) {\n    return calculateBlockSizeByEndDate(appointmentNodes, appointmentNodes[childIndex], blockEndDate);\n  })), false));\n  if (blockEndDate.isSameOrBefore(start) && maxSize === 0) {\n    return 0;\n  }\n  return maxSize + 1;\n};\nvar findBlockIndexByAppointment = function (blocks, appointment) {\n  var _a = appointment.data,\n    start = _a.start,\n    offset = _a.offset;\n  var blockIndex = blocks.length - 1;\n  while (blockIndex >= 0) {\n    var currentBlock = blocks[blockIndex];\n    if (intervalIncludes(currentBlock.start, currentBlock.end, start) && offset >= currentBlock.minOffset && offset <= currentBlock.maxOffset && (!appointment.overlappingSubTreeRoot || appointment.overlappingSubTreeRoot && !currentBlock.items.length)) {\n      break;\n    }\n    blockIndex -= 1;\n  }\n  return blockIndex;\n};\nvar findIncludedBlocks = function (groupedIntoBlocks) {\n  return groupedIntoBlocks.map(function (_a) {\n    var blocks = _a.blocks,\n      appointmentForest = _a.appointmentForest;\n    var nextBlocks = blocks.map(function (props) {\n      return __assign({}, props);\n    });\n    nextBlocks.forEach(function (block, blockIndex) {\n      block.includedBlocks = [];\n      for (var currentBlockIndex = blockIndex + 1; currentBlockIndex < nextBlocks.length; currentBlockIndex += 1) {\n        var currentBlock = nextBlocks[currentBlockIndex];\n        if (isIncludedBlock(block, currentBlock)) {\n          block.includedBlocks.push(currentBlockIndex);\n          currentBlock.includedInto = blockIndex;\n        }\n      }\n    });\n    return {\n      blocks: nextBlocks,\n      appointmentForest: appointmentForest\n    };\n  });\n};\nvar isIncludedBlock = function (block, possibleIncludedBlock) {\n  var start = block.start,\n    end = block.end,\n    minOffset = block.minOffset,\n    maxOffset = block.maxOffset;\n  var possibleIncludedStart = possibleIncludedBlock.start,\n    possibleIncludedEnd = possibleIncludedBlock.end,\n    possibleMinOffset = possibleIncludedBlock.minOffset,\n    possibleMaxOffset = possibleIncludedBlock.maxOffset;\n  return intervalIncludes(start, end, possibleIncludedStart) && intervalIncludes(start, end, possibleIncludedEnd) && possibleMaxOffset <= maxOffset && possibleMinOffset >= minOffset;\n};\nvar findChildBlocks = function (groupedIntoBlocks) {\n  return groupedIntoBlocks.map(function (_a) {\n    var blocks = _a.blocks,\n      appointmentForest = _a.appointmentForest;\n    var nextBlocks = blocks.map(function (props) {\n      return __assign({}, props);\n    });\n    nextBlocks.forEach(function (block, index) {\n      block.children = [];\n      for (var currentIndex = index + 1; currentIndex < nextBlocks.length; currentIndex += 1) {\n        var nextBlock = nextBlocks[currentIndex];\n        if (isChildBlock(block, nextBlock)) {\n          block.children.push(currentIndex);\n          nextBlock.parent = index;\n        }\n      }\n      return block;\n    });\n    return {\n      appointmentForest: appointmentForest,\n      blocks: nextBlocks\n    };\n  });\n};\nvar isChildBlock = function (block, possibleChildBlock) {\n  var start = block.start,\n    endForChildren = block.endForChildren,\n    minOffset = block.minOffset,\n    includedInto = block.includedInto;\n  var childStart = possibleChildBlock.start,\n    childIncludedInto = possibleChildBlock.includedInto,\n    childMaxOffset = possibleChildBlock.maxOffset;\n  return intervalIncludes(start, endForChildren, childStart) && childMaxOffset + 1 === minOffset && (childIncludedInto === undefined || childIncludedInto === includedInto);\n};\nvar adjustByBlocks = function (groupedIntoBlocks, indirectChildLeftOffset) {\n  var updatedBlocks = groupedIntoBlocks.map(function (_a) {\n    var blocks = _a.blocks,\n      appointmentForest = _a.appointmentForest;\n    var dimensionsCalculated = calculateBlocksDimensions(blocks, appointmentForest.items);\n    return {\n      blocks: alignBlocksWithPrevious(dimensionsCalculated, appointmentForest.items),\n      appointmentForest: appointmentForest\n    };\n  });\n  var adjustedByBlocks = updatedBlocks.map(function (_a) {\n    var blocks = _a.blocks,\n      appointmentForest = _a.appointmentForest;\n    return __assign(__assign({}, appointmentForest), {\n      items: adjustAppointmentsByBlocks(appointmentForest.items, blocks, indirectChildLeftOffset)\n    });\n  });\n  return adjustedByBlocks;\n};\nvar calculateBlocksDimensions = function (blocks, appointments) {\n  return updateBlocksProportions(calculateBlocksLeftLimit(calculateBlocksTotalSize(blocks), appointments));\n};\nvar alignBlocksWithPrevious = function (blocks, appointments) {\n  var nextBlocks = blocks.map(function (_a) {\n    var right = _a.right,\n      restProps = __rest(_a, [\"right\"]);\n    return __assign({}, restProps);\n  });\n  var leftLimitCalculated = calculateBlocksLeftLimit(updateBlocksLeft(nextBlocks, appointments), appointments);\n  return updateBlocksProportions(leftLimitCalculated);\n};\nvar adjustAppointmentsByBlocks = function (appointments, blocks, indirectChildLeftOffset) {\n  var nextAppointments = appointments.map(function (props) {\n    return __assign({}, props);\n  });\n  var nextBlocks = blocks.map(function (props) {\n    return __assign({}, props);\n  });\n  nextBlocks.forEach(function (block, index) {\n    if (index !== 0) {\n      var items = block.items,\n        blockLeft = block.left,\n        right = block.right,\n        children_1 = block.children;\n      var maxRight_1 = calculateIncludedBlockMaxRight(nextBlocks, block);\n      var finalMaxRight_1 = maxRight_1 * right;\n      var defaultLeft_1 = blockLeft * maxRight_1;\n      items.forEach(function (appointmentIndex, itemIndex) {\n        var appointment = nextAppointments[appointmentIndex];\n        if (itemIndex === 0) {\n          var _a = calculateAppointmentLeftAndWidth(nextAppointments, nextBlocks, appointment, finalMaxRight_1, indirectChildLeftOffset, defaultLeft_1),\n            left_1 = _a.left,\n            width = _a.width;\n          appointment.data.left = left_1;\n          appointment.data.width = width;\n          if (defaultLeft_1 !== left_1) {\n            children_1.forEach(function (childIndex) {\n              redistributeChildBlocks(nextBlocks, childIndex, left_1 / maxRight_1);\n            });\n          }\n        } else {\n          var _b = calculateAppointmentLeftAndWidth(nextAppointments, nextBlocks, appointment, finalMaxRight_1, indirectChildLeftOffset, undefined),\n            left = _b.left,\n            width = _b.width;\n          appointment.data.left = left;\n          appointment.data.width = width;\n        }\n      });\n    }\n  });\n  blocks[0].items.forEach(function (appointmentIndex) {\n    var appointment = nextAppointments[appointmentIndex];\n    var _a = calculateAppointmentLeftAndWidth(nextAppointments, blocks, appointment, 1, indirectChildLeftOffset, undefined),\n      left = _a.left,\n      width = _a.width;\n    appointment.data.left = left;\n    appointment.data.width = width;\n  });\n  return nextAppointments;\n};\nvar redistributeChildBlocks = function (blocks, blockIndex, right) {\n  var block = blocks[blockIndex];\n  var leftOffset = block.leftOffset,\n    size = block.size,\n    leftLimit = block.leftLimit,\n    children = block.children;\n  block.right = right;\n  var width = size + leftOffset;\n  var relativeWidth = right - leftLimit;\n  var left = right - relativeWidth * size / width;\n  block.left = left;\n  children.forEach(function (childIndex) {\n    redistributeChildBlocks(blocks, childIndex, left);\n  });\n};\nvar calculateIncludedBlockMaxRight = function (blocks, includedBlock) {\n  var includedIntoIndex = includedBlock.includedInto;\n  if (includedIntoIndex === undefined) {\n    return 1;\n  }\n  var includedInto = blocks[includedIntoIndex];\n  var currentMaxRight = includedInto.right;\n  return currentMaxRight * calculateIncludedBlockMaxRight(blocks, includedInto);\n};\nvar calculateBlocksTotalSize = function (blocks) {\n  var result = blocks.map(function (block) {\n    var totalSize = calculateSingleBlockTotalSize(blocks, block);\n    return __assign(__assign({}, block), {\n      totalSize: totalSize,\n      leftOffset: totalSize - block.size\n    });\n  });\n  return result;\n};\nvar calculateSingleBlockTotalSize = function (blocks, block) {\n  var children = block.children,\n    size = block.size;\n  if (children.length === 0) {\n    return size;\n  }\n  return Math.max.apply(Math, __spreadArray([], __read(children.map(function (childIndex) {\n    return calculateSingleBlockTotalSize(blocks, blocks[childIndex]);\n  })), false)) + size;\n};\nvar calculateBlocksLeftLimit = function (blocks, appointments) {\n  return blocks.map(function (block) {\n    var leftLimit = calculateSingleBlockLeftLimit(blocks, appointments, block);\n    return __assign(__assign({}, block), {\n      leftLimit: leftLimit\n    });\n  });\n};\nvar calculateSingleBlockLeftLimit = function (blocks, appointments, block) {\n  var _a = block,\n    children = _a.children,\n    items = _a.items,\n    left = _a.left;\n  if (children.length === 0) {\n    return left !== undefined ? Math.min(left, appointments[items[0]].data.left) : appointments[items[0]].data.left;\n  }\n  return Math.min.apply(Math, __spreadArray([], __read(children.map(function (childIndex) {\n    return calculateSingleBlockLeftLimit(blocks, appointments, blocks[childIndex]);\n  })), false));\n};\nvar updateBlocksProportions = function (blocks) {\n  var nextBlocks = blocks.map(function (props) {\n    return __assign({}, props);\n  });\n  nextBlocks.forEach(function (block) {\n    var parentIndex = block.parent,\n      leftLimit = block.leftLimit,\n      leftOffset = block.leftOffset,\n      totalSize = block.totalSize;\n    if (parentIndex === undefined) {\n      block.right = 1;\n      block.left = (1 - leftLimit) * leftOffset / totalSize + leftLimit;\n      return;\n    }\n    var parent = nextBlocks[parentIndex];\n    var _a = parent,\n      parentLeft = _a.left,\n      parentTotalSize = _a.totalSize;\n    block.totalSize = parentTotalSize;\n    block.right = parentLeft;\n    block.left = (1 - leftLimit) * leftOffset / parentTotalSize + leftLimit;\n  });\n  return nextBlocks;\n};\nvar updateBlocksLeft = function (blocks, appointments) {\n  return blocks.map(function (block) {\n    var items = block.items,\n      left = block.left;\n    var firstItem = appointments[items[0]];\n    var firstItemParentIndex = firstItem.parent;\n    if (firstItemParentIndex === undefined) {\n      return block;\n    }\n    var firstItemParent = appointments[firstItemParentIndex];\n    var parentBlock = blocks[firstItemParent.blockIndex];\n    return __assign(__assign({}, block), {\n      left: parentBlock.parent === undefined ? left : blocks[parentBlock.parent].left\n    });\n  });\n};\nvar createAndAdjustAppointmentForest = function (appointmentGroups, cellDuration) {\n  var appointmentForest = createAppointmentForest(appointmentGroups, cellDuration);\n  var indirectChildLeftOffset = Math.min(1 / findMaxReduceValue(appointmentForest), INDIRECT_CHILD_LEFT_OFFSET);\n  var baseCalculated = calculateAppointmentsMetaData(appointmentForest, indirectChildLeftOffset);\n  var preparedToGroupIntoBlocks = prepareToGroupIntoBlocks(baseCalculated);\n  var groupedIntoBlocks = groupAppointmentsIntoBlocks(preparedToGroupIntoBlocks);\n  var blocksWithIncluded = findIncludedBlocks(groupedIntoBlocks);\n  var blocksWithParents = findChildBlocks(blocksWithIncluded);\n  return adjustByBlocks(blocksWithParents, indirectChildLeftOffset);\n};\nvar calculateRectByDateAndGroupIntervals = function (type, intervals, rectByDates, rectByDatesMeta, viewMetaData) {\n  var growDirection = type.growDirection,\n    multiline = type.multiline;\n  var isHorizontal = growDirection === HORIZONTAL_TYPE;\n  var sorted = intervals.map(sortAppointments);\n  var grouped = sorted.reduce(function (acc, sortedGroup) {\n    return __spreadArray(__spreadArray([], __read(acc), false), __read(findOverlappedAppointments(sortedGroup, isHorizontal)), false);\n  }, []);\n  var cellDuration = rectByDatesMeta.cellDuration,\n    placeAppointmentsNextToEachOther = rectByDatesMeta.placeAppointmentsNextToEachOther;\n  var rectCalculator = isHorizontal ? horizontalRectCalculator : placeAppointmentsNextToEachOther ? oldVerticalRectCalculator : verticalRectCalculator;\n  var groupsCalculated = calculateAppointmentOffsets(grouped, isHorizontal);\n  var isAppointmentForestNeeded = !isHorizontal && !placeAppointmentsNextToEachOther;\n  var appointmentForest;\n  if (isAppointmentForestNeeded) {\n    appointmentForest = createAndAdjustAppointmentForest(groupsCalculated, cellDuration);\n  }\n  var unwrappedAppointments = isAppointmentForestNeeded ? unwrapAppointmentForest(appointmentForest) : unwrapGroups(groupsCalculated);\n  var rects = unwrappedAppointments.map(function (appointment) {\n    return rectCalculator(appointment, viewMetaData, {\n      rectByDates: rectByDates,\n      multiline: multiline,\n      rectByDatesMeta: rectByDatesMeta\n    });\n  });\n  return rects.sort(function (first, second) {\n    return first.offset >= second.offset ? 1 : -1;\n  });\n};\nvar sliceAppointmentByDay = function (appointment, cellDuration) {\n  var start = appointment.start,\n    end = appointment.end,\n    dataItem = appointment.dataItem,\n    key = appointment.key;\n  if (start.isSame(end, 'day')) return [appointment];\n  var minDuration = cellDuration / 2;\n  var isShortOnFirstDay = start.clone().endOf('day').diff(start, 'minutes') < minDuration;\n  var isShortOnSecondDay = end.clone().diff(end.clone().startOf('day'), 'minutes') < minDuration;\n  var firstAppointmentKey = addDateToKey(key, start);\n  var secondAppointmentKey = addDateToKey(key, end);\n  return [isShortOnFirstDay ? {\n    start: start.clone().endOf('day').add(-minDuration, 'minutes'),\n    end: start.clone().endOf('day'),\n    dataItem: dataItem,\n    key: firstAppointmentKey\n  } : {\n    start: start,\n    end: start.clone().endOf('day'),\n    dataItem: dataItem,\n    key: firstAppointmentKey\n  }, isShortOnSecondDay ? {\n    start: end.clone().startOf('day'),\n    end: end.clone().startOf('day').add(minDuration, 'minutes'),\n    dataItem: dataItem,\n    key: secondAppointmentKey\n  } : {\n    start: end.clone().startOf('day'),\n    end: end,\n    dataItem: dataItem,\n    key: secondAppointmentKey\n  }];\n};\nvar dayBoundaryPredicate = function (appointment, leftBound, rightBound, excludedDays) {\n  if (excludedDays === void 0) {\n    excludedDays = [];\n  }\n  var dayStart = moment(leftBound);\n  var dayEnd = moment(rightBound);\n  var startDayTime = moment(appointment.start).hour(dayStart.hour()).minutes(dayStart.minutes());\n  var endDayTime = moment(appointment.start).hour(dayEnd.hour()).minutes(dayEnd.minutes());\n  if (appointment.end.isBefore(dayStart) || appointment.start.isAfter(dayEnd)) return false;\n  if (excludedDays.findIndex(function (day) {\n    return day === moment(appointment.start).day();\n  }) !== -1) return false;\n  return appointment.end.isAfter(startDayTime) && appointment.start.isBefore(endDayTime);\n};\nvar reduceAppointmentByDayBounds = function (appointment, leftBound, rightBound, cellDuration) {\n  var dayStart = moment(leftBound);\n  var dayEnd = moment(rightBound);\n  var startDayTime = moment(appointment.start).hour(dayStart.hour()).minutes(dayStart.minutes()).seconds(dayStart.seconds());\n  var endDayTime = moment(appointment.start).hour(dayEnd.hour()).minutes(dayEnd.minutes()).seconds(dayEnd.seconds());\n  var minDuration = cellDuration / 2;\n  var isShortOnFirstDay = endDayTime.clone().diff(appointment.start, 'minutes') < minDuration;\n  var isShortOnSecondDay = appointment.end.clone().diff(startDayTime, 'minutes') < minDuration;\n  if (isShortOnFirstDay) {\n    return __assign(__assign({}, appointment), {\n      start: endDayTime.clone().add(-minDuration, 'minutes'),\n      end: endDayTime\n    });\n  }\n  if (isShortOnSecondDay) {\n    return __assign(__assign({}, appointment), {\n      start: startDayTime,\n      end: startDayTime.clone().add(minDuration, 'minutes')\n    });\n  }\n  return __assign(__assign(__assign({}, appointment), appointment.start.isSameOrBefore(startDayTime) ? {\n    start: startDayTime\n  } : null), appointment.end.isSameOrAfter(endDayTime) ? {\n    end: endDayTime\n  } : null);\n};\nvar normalizeAppointmentDuration = function (appointment, cellDuration) {\n  var minDuration = cellDuration / 2;\n  var start = moment(appointment.start);\n  var end = moment(appointment.end);\n  if (end.diff(start, 'minutes') > minDuration) {\n    return __assign(__assign({}, appointment), {\n      start: start,\n      end: end\n    });\n  }\n  if (end.isSame(start.clone().add(minDuration, 'minutes'), 'day')) {\n    return __assign(__assign({}, appointment), {\n      start: start,\n      end: start.clone().add(minDuration, 'minutes')\n    });\n  }\n  return __assign(__assign({}, appointment), {\n    start: start.clone().endOf('day').add(-minDuration, 'minutes'),\n    end: start.clone().endOf('day')\n  });\n};\nvar getWeekVerticallyGroupedColumnIndex = function (viewCellsData, date) {\n  return viewCellsData[0].findIndex(function (timeCell) {\n    return moment(date).isSame(timeCell.startDate, 'date');\n  });\n};\nvar getWeekHorizontallyGroupedColumnIndex = function (viewCellsData, appointment, date) {\n  return viewCellsData[0].findIndex(function (timeCell) {\n    var isCorrectGroup = checkCellGroupingInfo(timeCell, appointment);\n    return moment(date).isSame(timeCell.startDate, 'date') && isCorrectGroup;\n  });\n};\nvar getWeekVerticallyGroupedRowIndex = function (viewCellsData, appointment, date, columnIndex, takePrev, groupCount) {\n  var timeTableHeight = viewCellsData.length / groupCount;\n  var timeTableRowIndex = getWeekHorizontallyGroupedRowIndex(viewCellsData, date, columnIndex, takePrev);\n  if (!viewCellsData[0][0].groupingInfo) return timeTableRowIndex;\n  var isWrongCell = !checkCellGroupingInfo(viewCellsData[timeTableRowIndex][columnIndex], appointment);\n  while (isWrongCell) {\n    timeTableRowIndex += timeTableHeight;\n    isWrongCell = !checkCellGroupingInfo(viewCellsData[timeTableRowIndex][columnIndex], appointment);\n  }\n  return timeTableRowIndex;\n};\nvar getWeekHorizontallyGroupedRowIndex = function (viewCellsData, date, columnIndex, takePrev) {\n  return viewCellsData.findIndex(function (timeCell) {\n    return moment(date).isBetween(timeCell[columnIndex].startDate, timeCell[columnIndex].endDate, 'seconds', takePrev ? '(]' : '[)');\n  });\n};\nvar calculateWeekDateIntervals = function (appointments, leftBound, rightBound,\n// startViewDate, endViewDate\nexcludedDays, cellDuration) {\n  return [appointments.map(function (appointment) {\n    return normalizeAppointmentDuration(appointment, cellDuration);\n  }).reduce(function (acc, appointment) {\n    return __spreadArray(__spreadArray([], __read(acc), false), __read(filterByViewBoundaries(appointment, leftBound, rightBound, excludedDays, true)), false);\n  }, []).reduce(function (acc, appointment) {\n    return __spreadArray(__spreadArray([], __read(acc), false), __read(sliceAppointmentByDay(appointment, cellDuration)), false);\n  }, []).filter(function (appointment) {\n    return dayBoundaryPredicate(appointment, leftBound, rightBound, excludedDays);\n  }).map(function (appointment) {\n    return reduceAppointmentByDayBounds(appointment, leftBound, rightBound, cellDuration);\n  })];\n};\nvar CELL_GAP_PX = 10;\nvar CELL_BOUND_HORIZONTAL_OFFSET_PX = 1;\nvar CELL_BOUND_VERTICAL_OFFSET_PX = 4;\nvar getVerticalCellIndexByAppointmentData = function (appointment, viewCellsData, viewMetaData, date, takePrev) {\n  if (takePrev === void 0) {\n    takePrev = false;\n  }\n  var groupOrientation = viewMetaData.groupOrientation,\n    groupCount = viewMetaData.groupCount;\n  var columnIndex = groupOrientation === VERTICAL_GROUP_ORIENTATION ? getWeekVerticallyGroupedColumnIndex(viewCellsData, date) : getWeekHorizontallyGroupedColumnIndex(viewCellsData, appointment, date);\n  var rowIndex = groupOrientation === VERTICAL_GROUP_ORIENTATION ? getWeekVerticallyGroupedRowIndex(viewCellsData, appointment, date, columnIndex, takePrev, groupCount) : getWeekHorizontallyGroupedRowIndex(viewCellsData, date, columnIndex, takePrev);\n  var cellIndex = rowIndex * viewCellsData[0].length + columnIndex;\n  return {\n    index: cellIndex,\n    startDate: viewCellsData[rowIndex][columnIndex].startDate\n  };\n};\nvar getCellRect = function (date, appointment, viewCellsData, cellDuration, cellElementsMeta, takePrev, viewMetaData) {\n  var _a = getVerticalCellIndexByAppointmentData(appointment, viewCellsData, viewMetaData, date, takePrev),\n    cellIndex = _a.index,\n    cellStartDate = _a.startDate;\n  var _b = cellElementsMeta.getCellRects[cellIndex](),\n    top = _b.top,\n    left = _b.left,\n    width = _b.width,\n    cellHeight = _b.height;\n  var timeOffset = moment(date).diff(cellStartDate, 'minutes');\n  var topOffset = cellHeight * (timeOffset / cellDuration);\n  var parentRect = cellElementsMeta.parentRect();\n  return {\n    top: top,\n    left: left,\n    width: width,\n    topOffset: topOffset,\n    parentRect: parentRect\n  };\n};\nvar getVerticalRectByAppointmentData = function (appointment, viewMetaData, _a) {\n  var viewCellsData = _a.viewCellsData,\n    cellDuration = _a.cellDuration,\n    cellElementsMeta = _a.cellElementsMeta,\n    placeAppointmentsNextToEachOther = _a.placeAppointmentsNextToEachOther;\n  var firstCellRect = getCellRect(appointment.start.toDate(), appointment, viewCellsData, cellDuration, cellElementsMeta, false, viewMetaData);\n  var lastCellRect = getCellRect(appointment.end.toDate(), appointment, viewCellsData, cellDuration, cellElementsMeta, true, viewMetaData);\n  var top = firstCellRect.top + firstCellRect.topOffset;\n  var height = lastCellRect.top + lastCellRect.topOffset - top;\n  return {\n    width: firstCellRect.width - CELL_GAP_PX - CELL_BOUND_HORIZONTAL_OFFSET_PX,\n    top: top - firstCellRect.parentRect.top + CELL_BOUND_HORIZONTAL_OFFSET_PX,\n    left: firstCellRect.left - firstCellRect.parentRect.left + CELL_BOUND_HORIZONTAL_OFFSET_PX,\n    parentWidth: firstCellRect.parentRect.width,\n    height: placeAppointmentsNextToEachOther ? height - CELL_BOUND_VERTICAL_OFFSET_PX : height\n  };\n};\nvar allDayPredicate = function (appointment) {\n  return appointment.end.diff(appointment.start, 'hours') > 23 || !!appointment.allDay;\n};\nvar getAllDayCellIndexByAppointmentData = function (viewCellsData, viewMetaData, date, appointment, takePrev) {\n  var currentDate = moment(date);\n  var groupOrientation = viewMetaData.groupOrientation,\n    groupCount = viewMetaData.groupCount;\n  var columnIndex = groupOrientation === HORIZONTAL_GROUP_ORIENTATION ? getAllDayHorizontallyGroupedColumnIndex(viewCellsData, currentDate, appointment) : getAllDayVerticallyGroupedColumnIndex(viewCellsData, currentDate);\n  var rowIndex = groupOrientation === HORIZONTAL_GROUP_ORIENTATION ? 0 : getAllDayVerticallyGroupedRowIndex(viewCellsData, appointment, groupCount);\n  var cellIndex = rowIndex * viewCellsData[0].length + columnIndex;\n  if (takePrev && currentDate.format() === currentDate.startOf('day').format()) {\n    cellIndex -= 1;\n  }\n  return cellIndex;\n};\nvar getAllDayVerticallyGroupedColumnIndex = function (viewCellsData, date) {\n  return viewCellsData[0].findIndex(function (timeCell) {\n    return date.isSame(timeCell.startDate, 'date');\n  });\n};\nvar getAllDayHorizontallyGroupedColumnIndex = function (viewCellsData, date, appointment) {\n  return viewCellsData[0].findIndex(function (timeCell) {\n    return date.isSame(timeCell.startDate, 'date') && checkCellGroupingInfo(timeCell, appointment);\n  });\n};\nvar getAllDayVerticallyGroupedRowIndex = function (viewCellsData, appointment, groupCount) {\n  var index = viewCellsData.findIndex(function (viewCellsDataRow) {\n    return checkCellGroupingInfo(viewCellsDataRow[0], appointment);\n  });\n  return index * groupCount / viewCellsData.length;\n};\nvar sliceAppointmentsByBoundaries = function (appointment, left, right, excludedDays) {\n  if (excludedDays === void 0) {\n    excludedDays = [];\n  }\n  var startDate = appointment.start.clone();\n  var endDate = appointment.end.clone();\n  var nextStart = startDate.clone();\n  var nextEnd = endDate.clone();\n  if (startDate.isBefore(left)) {\n    nextStart = moment(left);\n    nextStart.startOf('day');\n  }\n  if (endDate.isAfter(right)) {\n    nextEnd = moment(right);\n    nextEnd.endOf('day');\n  }\n  if (excludedDays.findIndex(function (day) {\n    return day === startDate.day();\n  }) !== -1) {\n    while (excludedDays.findIndex(function (day) {\n      return day === nextStart.day();\n    }) !== -1 && nextStart.isSameOrBefore(endDate, 'day')) {\n      nextStart.add(1, 'days').startOf('day');\n    }\n  }\n  if (excludedDays.findIndex(function (day) {\n    return day === endDate.day();\n  }) !== -1) {\n    while (excludedDays.findIndex(function (day) {\n      return day === nextEnd.day();\n    }) !== -1 && nextStart.isSameOrAfter(startDate, 'day')) {\n      nextEnd.add(-1, 'days').endOf('day');\n    }\n  }\n  return [__assign(__assign({}, appointment), {\n    start: nextStart,\n    end: nextEnd\n  })];\n};\nvar sliceAppointmentsByDays = function (appointment, excludedDays) {\n  if (excludedDays === void 0) {\n    excludedDays = [];\n  }\n  var startDate = appointment.start;\n  var endDate = appointment.end;\n  var nextStart = startDate.clone();\n  var appointments = [];\n  while (nextStart.isBefore(endDate)) {\n    if (excludedDays.findIndex(function (day) {\n      return day === nextStart.day();\n    }) === -1) {\n      appointments.push(__assign(__assign({}, appointment), {\n        start: nextStart,\n        end: moment(nextStart).endOf('day')\n      }));\n    }\n    nextStart = moment(nextStart).add(1, 'day');\n  }\n  return appointments;\n};\nvar DEFAULT_RULE_OBJECT = {\n  interval: 1\n};\nvar DAYS_OF_WEEK = {\n  MONDAY: 0,\n  TUESDAY: 1,\n  WEDNESDAY: 2,\n  THURSDAY: 3,\n  FRIDAY: 4,\n  SATURDAY: 5,\n  SUNDAY: 6\n};\nvar RRULE_DAYS_OF_WEEK = [RRule.MO, RRule.TU, RRule.WE, RRule.TH, RRule.FR, RRule.SA, RRule.SU];\nvar DAYS_IN_WEEK = 7;\nvar DAYS_OF_WEEK_ARRAY = [DAYS_OF_WEEK.SUNDAY, DAYS_OF_WEEK.MONDAY, DAYS_OF_WEEK.TUESDAY, DAYS_OF_WEEK.WEDNESDAY, DAYS_OF_WEEK.THURSDAY, DAYS_OF_WEEK.FRIDAY, DAYS_OF_WEEK.SATURDAY];\nvar MONTHS = {\n  JANUARY: 1,\n  FEBRUARY: 2,\n  MARCH: 3,\n  APRIL: 4,\n  MAY: 5,\n  JUNE: 6,\n  JULY: 7,\n  AUGUST: 8,\n  SEPTEMBER: 9,\n  OCTOBER: 10,\n  NOVEMBER: 11,\n  DECEMBER: 12\n};\nvar RRULE_REPEAT_TYPES = {\n  YEARLY: RRule.YEARLY,\n  MONTHLY: RRule.MONTHLY,\n  WEEKLY: RRule.WEEKLY,\n  DAILY: RRule.DAILY,\n  HOURLY: RRule.HOURLY,\n  MINUTELY: RRule.MINUTELY\n};\nvar REPEAT_TYPES = {\n  DAILY: 'daily',\n  WEEKLY: 'weekly',\n  MONTHLY: 'monthly',\n  YEARLY: 'yearly',\n  NEVER: 'never'\n};\nvar REPEAT_TYPES_ARRAY = [REPEAT_TYPES.DAILY, REPEAT_TYPES.WEEKLY, REPEAT_TYPES.MONTHLY, REPEAT_TYPES.YEARLY];\nvar WEEK_NUMBER_LABELS = ['firstLabel', 'secondLabel', 'thirdLabel', 'fourthLabel', 'lastLabel'];\nvar END_REPEAT_RADIO_GROUP = 'endRepeat';\nvar MONTHLY_RADIO_GROUP = 'monthlyRadioGroup';\nvar YEARLY_RADIO_GROUP = 'yearlyRadioGroup';\nvar TITLE_TEXT_EDITOR = 'titleTextEditor';\nvar MULTILINE_TEXT_EDITOR = 'multilineTextEditor';\nvar ORDINARY_TEXT_EDITOR = 'ordinaryTextEditor';\nvar NUMBER_EDITOR = 'numberEditor';\nvar TITLE = 'title';\nvar ORDINARY_LABEL = 'ordinaryLabel';\nvar SAVE_BUTTON = 'saveButton';\nvar DELETE_BUTTON = 'deleteButton';\nvar CANCEL_BUTTON = 'cancelButton';\nvar OUTLINED_SELECT = 'outlinedSelect';\nvar STANDARD_SELECT = 'standardSelect';\nvar SUNDAY_DATE = new Date(2019, 7, 11);\nvar MONDAY_DATE = new Date(2019, 7, 12);\nvar TUESDAY_DATE = new Date(2019, 7, 13);\nvar WEDNESDAY_DATE = new Date(2019, 7, 14);\nvar THURSDAY_DATE = new Date(2019, 7, 15);\nvar FRIDAY_DATE = new Date(2019, 7, 16);\nvar SATURDAY_DATE = new Date(2019, 7, 17);\nvar DAYS_OF_WEEK_DATES = [SUNDAY_DATE, MONDAY_DATE, TUESDAY_DATE, WEDNESDAY_DATE, THURSDAY_DATE, FRIDAY_DATE, SATURDAY_DATE];\nvar JANUARY_DATE = new Date(2019, 0, 1);\nvar FEBRUARY_DATE = new Date(2019, 1, 1);\nvar MARCH_DATE = new Date(2019, 2, 1);\nvar APRIL_DATE = new Date(2019, 3, 1);\nvar MAY_DATE = new Date(2019, 4, 1);\nvar JUNE_DATE = new Date(2019, 5, 1);\nvar JULY_DATE = new Date(2019, 6, 1);\nvar AUGUST_DATE = new Date(2019, 7, 1);\nvar SEPTEMBER_DATE = new Date(2019, 8, 1);\nvar OCTOBER_DATE = new Date(2019, 9, 1);\nvar NOVEMBER_DATE = new Date(2019, 10, 1);\nvar DECEMBER_DATE = new Date(2019, 11, 1);\nvar MONTHS_DATES = [JANUARY_DATE, FEBRUARY_DATE, MARCH_DATE, APRIL_DATE, MAY_DATE, JUNE_DATE, JULY_DATE, AUGUST_DATE, SEPTEMBER_DATE, OCTOBER_DATE, NOVEMBER_DATE, DECEMBER_DATE];\nvar FIRST_WEEK = 0;\nvar SECOND_WEEK = 1;\nvar THIRD_WEEK = 2;\nvar FOURTH_WEEK = 3;\nvar LAST_WEEK = 4;\nvar BASIC_YEALY_COUNT = 5;\nvar BASIC_MONTHLY_COUNT = 12;\nvar BASIC_WEEKLY_COUNT = 13;\nvar BASIC_DAILY_COUNT = 30;\nvar sliceAppointmentByWeek = function (timeBounds, appointment, step) {\n  var left = timeBounds.left,\n    right = timeBounds.right;\n  var pieces = [];\n  var start = appointment.start,\n    end = appointment.end,\n    key = appointment.key,\n    restFields = __rest(appointment, [\"start\", \"end\", \"key\"]);\n  var apptStart = start;\n  var apptEnd = end;\n  if (apptStart.isBefore(left)) apptStart = left.clone();\n  if (apptEnd.isAfter(right)) apptEnd = right.clone();\n  var pieceFrom = apptStart.clone();\n  var pieceTo = apptStart.clone();\n  var i = 0;\n  while (pieceTo.isBefore(apptEnd)) {\n    var currentRightBound = left.clone().add(step * i, 'days').subtract(1, 'second');\n    if (currentRightBound.isAfter(apptStart)) {\n      pieceTo = apptStart.clone().add(step * i, 'days');\n      if (pieceTo.isAfter(currentRightBound)) {\n        pieceTo = currentRightBound.clone();\n      }\n      if (pieceTo.isAfter(apptEnd)) {\n        pieceTo = apptEnd.clone();\n      }\n      if (!pieceFrom.isSameOrAfter(pieceTo)) {\n        pieces.push(__assign({\n          start: pieceFrom,\n          end: pieceTo,\n          key: addDateToKey(key, pieceFrom)\n        }, restFields));\n        pieceFrom = pieceTo.clone().add(1, 'second');\n      }\n    }\n    i += 1;\n  }\n  return pieces;\n};\nvar getMonthCellIndexByAppointmentData = function (viewCellsData, viewMetaData, date, appointment, takePrev) {\n  if (takePrev === void 0) {\n    takePrev = false;\n  }\n  var groupOrientation = viewMetaData.groupOrientation,\n    groupedByDate = viewMetaData.groupedByDate,\n    groupCount = viewMetaData.groupCount;\n  var startViewDate = moment(viewCellsData[0][0].startDate);\n  var currentDate = moment(date);\n  var dayNumber = currentDate.diff(startViewDate, 'days');\n  if (takePrev && currentDate.format() === currentDate.startOf('day').format()) {\n    dayNumber -= 1;\n  }\n  var weekNumber = Math.floor(dayNumber / DAYS_IN_WEEK);\n  var dayOfWeek = dayNumber % DAYS_IN_WEEK;\n  var columnIndex = groupOrientation === HORIZONTAL_GROUP_ORIENTATION ? getMonthHorizontallyGroupedColumnIndex(viewCellsData, appointment, weekNumber, dayOfWeek, groupCount, groupedByDate) : dayOfWeek;\n  var rowIndex = groupOrientation === HORIZONTAL_GROUP_ORIENTATION ? weekNumber : getMonthVerticallyGroupedRowIndex(viewCellsData, appointment, weekNumber, dayOfWeek, groupCount);\n  var totalCellIndex = rowIndex * viewCellsData[0].length + columnIndex;\n  return totalCellIndex;\n};\nvar getMonthHorizontallyGroupedColumnIndex = function (viewCellsData, appointment, weekNumber, dayOfWeek, groupCount, groupByDate) {\n  var columnIndex = -1;\n  var currentColumnIndex = groupByDate ? dayOfWeek * groupCount : dayOfWeek;\n  var cellsInGroupRow = groupByDate ? 1 : DAYS_IN_WEEK;\n  while (columnIndex === -1) {\n    var isCorrectCell = checkCellGroupingInfo(viewCellsData[weekNumber][currentColumnIndex], appointment);\n    if (isCorrectCell) {\n      columnIndex = currentColumnIndex;\n    }\n    currentColumnIndex += cellsInGroupRow;\n  }\n  return columnIndex;\n};\nvar getMonthVerticallyGroupedRowIndex = function (viewCellsData, appointment, weekNumber, dayOfWeek, groupCount) {\n  var rowsInOneGroup = viewCellsData.length / groupCount;\n  var rowIndex = -1;\n  var currentRowIndex = weekNumber;\n  while (rowIndex === -1) {\n    var isCorrectCell = checkCellGroupingInfo(viewCellsData[currentRowIndex][dayOfWeek], appointment);\n    if (isCorrectCell) {\n      rowIndex = currentRowIndex;\n    }\n    currentRowIndex += rowsInOneGroup;\n  }\n  return rowIndex;\n};\nvar TOP_CELL_OFFSET = 0.32;\nvar CELL_BOUND_OFFSET_PX = 1;\nvar getCellRect$1 = function (date, appointment, viewCellsData, viewMetaData, cellElementsMeta, takePrev, multiline) {\n  var cellIndex = multiline ? getMonthCellIndexByAppointmentData(viewCellsData, viewMetaData, date, appointment, takePrev) : getAllDayCellIndexByAppointmentData(viewCellsData, viewMetaData, date, appointment, takePrev);\n  var _a = cellElementsMeta.getCellRects[cellIndex](),\n    top = _a.top,\n    left = _a.left,\n    width = _a.width,\n    height = _a.height;\n  var parentRect = cellElementsMeta.parentRect();\n  return {\n    top: top,\n    left: left,\n    width: width,\n    height: height,\n    parentRect: parentRect\n  };\n};\nvar getHorizontalRectByAppointmentData = function (appointment, viewMetaData, _a) {\n  var multiline = _a.multiline,\n    viewCellsData = _a.viewCellsData,\n    cellElementsMeta = _a.cellElementsMeta;\n  var firstCellRect = getCellRect$1(appointment.start.toDate(), appointment, viewCellsData, viewMetaData, cellElementsMeta, false, multiline);\n  var lastCellRect = getCellRect$1(appointment.end.toDate(), appointment, viewCellsData, viewMetaData, cellElementsMeta, true, multiline);\n  var top = firstCellRect.top + firstCellRect.height * TOP_CELL_OFFSET;\n  var height = firstCellRect.height - firstCellRect.height * TOP_CELL_OFFSET;\n  return {\n    top: top - firstCellRect.parentRect.top,\n    left: firstCellRect.left - firstCellRect.parentRect.left + CELL_BOUND_OFFSET_PX,\n    width: lastCellRect.left - firstCellRect.left + firstCellRect.width - CELL_BOUND_OFFSET_PX,\n    height: height,\n    parentWidth: firstCellRect.parentRect.width\n  };\n};\nvar DAY_COUNT = 7;\nvar MONTH_LENGTH = 31;\nvar monthCellsData = function (currentDate, firstDayOfWeek, intervalCount, today) {\n  if (intervalCount === void 0) {\n    intervalCount = 1;\n  }\n  var targetDate = moment(currentDate);\n  var currentMonths = [targetDate.month()];\n  while (currentMonths.length < intervalCount) {\n    currentMonths.push(targetDate.add(1, 'months').month());\n  }\n  var firstMonthDate = moment(currentDate).date(1);\n  var firstMonthDay = firstMonthDate.day() - firstDayOfWeek;\n  var prevMonthDayCount = firstMonthDate.day(firstMonthDay).day() || DAY_COUNT;\n  var prevMonth = moment(currentDate).subtract(1, 'months');\n  var prevMonthStartDay = prevMonth.daysInMonth() - (prevMonthDayCount - 1);\n  var from = moment().year(prevMonth.year()).month(prevMonth.month()).date(prevMonthStartDay).startOf('day');\n  var result = [];\n  while (result.length < Math.trunc(MONTH_LENGTH * intervalCount / DAY_COUNT) + 2) {\n    var week = [];\n    while (week.length < DAY_COUNT) {\n      week.push({\n        startDate: from.toDate(),\n        endDate: from.clone().add(1, 'day').toDate(),\n        otherMonth: currentMonths.findIndex(function (month) {\n          return month === from.month();\n        }) === -1,\n        today: today ? moment(today).isSame(from, 'date') : false\n      });\n      from.add(1, 'day');\n    }\n    result.push(week);\n  }\n  return result;\n};\nvar calculateMonthDateIntervals = function (appointments, leftBound, rightBound) {\n  return [appointments.map(function (_a) {\n    var start = _a.start,\n      end = _a.end,\n      restArgs = __rest(_a, [\"start\", \"end\"]);\n    return __assign({\n      start: moment(start),\n      end: moment(end)\n    }, restArgs);\n  }).reduce(function (acc, appointment) {\n    return __spreadArray(__spreadArray([], __read(acc), false), __read(filterByViewBoundaries(appointment, leftBound, rightBound, [], false)), false);\n  }, []).reduce(function (acc, appointment) {\n    return __spreadArray(__spreadArray([], __read(acc), false), __read(sliceAppointmentByWeek({\n      left: moment(leftBound),\n      right: moment(rightBound)\n    }, appointment, DAY_COUNT)), false);\n  }, [])];\n};\nvar calculateAllDayDateIntervals = function (appointments, leftBound, rightBound, excludedDays) {\n  return [appointments.map(function (_a) {\n    var start = _a.start,\n      end = _a.end,\n      restArgs = __rest(_a, [\"start\", \"end\"]);\n    return __assign({\n      start: moment(start),\n      end: moment(end)\n    }, restArgs);\n  }).reduce(function (acc, appointment) {\n    return __spreadArray(__spreadArray([], __read(acc), false), __read(filterByViewBoundaries(appointment, leftBound, rightBound, excludedDays, false)), false);\n  }, []).filter(function (appointment) {\n    return allDayPredicate(appointment);\n  }).reduce(function (acc, appointment) {\n    return __spreadArray(__spreadArray([], __read(acc), false), __read(sliceAppointmentsByBoundaries(appointment, leftBound, rightBound, excludedDays)), false);\n  }, [])];\n};\nvar getGroupFromResourceInstance = function (resourceInstance) {\n  return {\n    id: resourceInstance.id,\n    fieldName: resourceInstance.fieldName,\n    text: resourceInstance.text\n  };\n};\nvar addGroupInfoToCells = function (currentGroup, groups, sortedResources, viewCellRow, index, endOfGroup, groupOrientation) {\n  return viewCellRow.map(function (viewCell, cellIndex) {\n    var groupedCell = addGroupInfoToCell(currentGroup, groups, sortedResources, viewCell, index, endOfGroup, groupOrientation);\n    return cellIndex === viewCellRow.length - 1 && groupOrientation === HORIZONTAL_GROUP_ORIENTATION ? __assign(__assign({}, groupedCell), {\n      endOfGroup: true\n    }) : groupedCell;\n  });\n};\nvar addGroupInfoToCell = function (currentGroup, groups, sortedResources, viewCell, index, endOfGroup, groupOrientation) {\n  var previousIndex = index;\n  var groupingInfo = groups.reduceRight(function (acc, group, currentIndex) {\n    if (currentIndex === groups.length - 1) return acc;\n    var previousResourceLength = sortedResources[currentIndex + 1].instances.length;\n    var currentGroupingInstance = group[Math.floor(previousIndex / previousResourceLength)];\n    previousIndex = currentIndex;\n    return __spreadArray(__spreadArray([], __read(acc), false), [currentGroupingInstance], false);\n  }, [currentGroup]);\n  return __assign(__assign({}, viewCell), {\n    groupingInfo: groupingInfo,\n    endOfGroup: endOfGroup,\n    groupOrientation: groupOrientation\n  });\n};\nvar getCurrentGroup = function (groups, resources, index, group) {\n  var currentIndex = index;\n  return groups.reduceRight(function (groupAcc, groupsRow, rowIndex) {\n    if (rowIndex === groups.length - 1) {\n      return groupAcc;\n    }\n    currentIndex = Math.floor(currentIndex / resources[rowIndex + 1].instances.length);\n    var currentInstance = groupsRow[currentIndex];\n    return __spreadArray(__spreadArray([], __read(groupAcc), false), [currentInstance], false);\n  }, [group]);\n};\nvar groupAppointments = function (appointments, resources, groups) {\n  if (!resources || !groups) return [appointments.slice()];\n  var mainResource = resources.find(function (resource) {\n    return resource.isMain;\n  });\n  return groups[groups.length - 1].map(function (group, index) {\n    var currentGroup = getCurrentGroup(groups, resources, index, group);\n    return appointments.reduce(function (acc, appointment) {\n      var _a;\n      var belongsToGroup = currentGroup.reduce(function (isBelonging, groupItem) {\n        return isBelonging && groupItem.id === appointment[groupItem.fieldName];\n      }, true);\n      if (!belongsToGroup) return acc;\n      var currentMainResourceId = currentGroup.find(function (groupItem) {\n        return groupItem.fieldName === mainResource.fieldName;\n      }).id;\n      var updatedAppointment = __assign(__assign({}, appointment), {\n        dataItem: __assign(__assign({}, appointment.dataItem), (_a = {}, _a[mainResource.fieldName] = rearrangeResourceIds(mainResource, appointment, currentMainResourceId), _a)),\n        resources: appointment.resources && rearrangeResources(mainResource, appointment, currentMainResourceId)\n      });\n      return __spreadArray(__spreadArray([], __read(acc), false), [updatedAppointment], false);\n    }, []);\n  });\n};\nvar rearrangeResourceIds = function (mainResource, appointment, mainResourceId) {\n  if (!mainResource.allowMultiple) {\n    return mainResourceId;\n  }\n  return __spreadArray([mainResourceId], __read(appointment.dataItem[mainResource.fieldName].filter(function (id) {\n    return id !== mainResourceId;\n  })), false);\n};\nvar rearrangeResources = function (mainResource, appointment, currentResourceInstanceId) {\n  var _a;\n  if (!mainResource.allowMultiple) {\n    return appointment.resources;\n  }\n  var resources = appointment.resources.slice();\n  var firstMainResource = resources.findIndex(function (el) {\n    return el.isMain;\n  });\n  var currentResourceIndex = resources.findIndex(function (el) {\n    return el.isMain && el.id === currentResourceInstanceId;\n  });\n  _a = __read([resources[currentResourceIndex], resources[firstMainResource]], 2), resources[firstMainResource] = _a[0], resources[currentResourceIndex] = _a[1];\n  return resources;\n};\nvar expandGroupedAppointment = function (appointment, grouping, resources) {\n  if (!resources || !grouping) {\n    return [appointment];\n  }\n  return resources.reduce(function (acc, resource) {\n    var isGroupedByResource = grouping.find(function (group) {\n      return group.resourceName === resource.fieldName;\n    }) !== undefined;\n    if (!isGroupedByResource) return acc;\n    var resourceField = resource.fieldName;\n    if (!resource.allowMultiple) {\n      return acc.reduce(function (accumulatedAppointments, currentAppointment) {\n        var _a;\n        return __spreadArray(__spreadArray([], __read(accumulatedAppointments), false), [__assign(__assign({}, currentAppointment), (_a = {}, _a[resourceField] = currentAppointment.dataItem[resourceField], _a))], false);\n      }, []);\n    }\n    return acc.reduce(function (accumulatedAppointments, currentAppointment) {\n      return __spreadArray(__spreadArray([], __read(accumulatedAppointments), false), __read(currentAppointment.dataItem[resourceField].map(function (resourceValue) {\n        var _a;\n        return __assign(__assign({}, currentAppointment), (_a = {}, _a[resourceField] = resourceValue, _a.key = generateMultipleResourceKey(currentAppointment.key, resourceValue), _a));\n      })), false);\n    }, []);\n  }, [appointment]);\n};\nvar generateMultipleResourceKey = function (previousKey, resourceValue) {\n  return \"\".concat(previousKey, \"_\").concat(resourceValue);\n};\nvar getGroupingInfoFromGroups = function (groups, groupIndex) {\n  var previousIndex = groupIndex;\n  return groups.reduceRight(function (acc, currentGroups, currentIndex) {\n    if (currentIndex === groups.length - 1) return acc;\n    var previousResourceLength = groups[currentIndex + 1].length / currentGroups.length;\n    var currentGroupingInstance = currentGroups[Math.floor(previousIndex / previousResourceLength)];\n    previousIndex = currentIndex;\n    return __spreadArray(__spreadArray([], __read(acc), false), [currentGroupingInstance], false);\n  }, [getGroupsLastRow(groups)[groupIndex]]);\n};\nvar getGroupsLastRow = function (groups) {\n  return groups[groups.length - 1];\n};\nvar filterResourcesByGrouping = function (resources, grouping) {\n  return resources.filter(function (resource) {\n    return grouping.find(function (resourceId) {\n      return resource.fieldName === resourceId.resourceName;\n    });\n  });\n};\nvar sortFilteredResources = function (resources, grouping) {\n  return grouping.map(function (_a) {\n    var resourceName = _a.resourceName;\n    return resources.find(function (resource) {\n      return resource.fieldName === resourceName;\n    });\n  });\n};\nvar getGroupsFromResources = function (sortedAndFilteredResources) {\n  return sortedAndFilteredResources.reduce(function (acc, resource, index) {\n    if (index === 0) {\n      return [resource.instances.map(function (instance) {\n        return getGroupFromResourceInstance(instance);\n      })];\n    }\n    return __spreadArray(__spreadArray([], __read(acc), false), [acc[index - 1].reduce(function (currentResourceNames) {\n      return __spreadArray(__spreadArray([], __read(currentResourceNames), false), __read(resource.instances.map(function (instance) {\n        return getGroupFromResourceInstance(instance);\n      })), false);\n    }, [])], false);\n  }, []);\n};\nvar expandViewCellsDataWithGroups = function (viewCellsData, groups, sortedResources, groupByDate, groupOrientation) {\n  if (groups.length === 0) return viewCellsData;\n  if (groupByDate) {\n    return expandCellsWithGroupedByDateData(viewCellsData, groups, sortedResources);\n  }\n  if (groupOrientation === HORIZONTAL_GROUP_ORIENTATION) {\n    return expandHorizontallyGroupedCells(viewCellsData, groups, sortedResources);\n  }\n  return expandVerticallyGroupedCells(viewCellsData, groups, sortedResources);\n};\nvar expandCellsWithGroupedByDateData = function (viewCellsData, groups, sortedResources) {\n  return viewCellsData.map(function (cellsRow) {\n    return cellsRow.reduce(function (acc, viewCell) {\n      var groupedCells = getGroupsLastRow(groups).map(function (group, index) {\n        return addGroupInfoToCell(group, groups, sortedResources, viewCell, index, false, HORIZONTAL_GROUP_ORIENTATION);\n      });\n      groupedCells[groupedCells.length - 1] = __assign(__assign({}, groupedCells[groupedCells.length - 1]), {\n        endOfGroup: true\n      });\n      return __spreadArray(__spreadArray([], __read(acc), false), __read(groupedCells), false);\n    }, []);\n  });\n};\nvar expandHorizontallyGroupedCells = function (viewCellsData, groups, sortedResources) {\n  return getGroupsLastRow(groups).reduce(function (acc, group, index) {\n    if (index === 0) {\n      return viewCellsData.map(function (viewCellsRow) {\n        return addGroupInfoToCells(group, groups, sortedResources, viewCellsRow, index, false, HORIZONTAL_GROUP_ORIENTATION);\n      });\n    }\n    return acc.map(function (item, id) {\n      return __spreadArray(__spreadArray([], __read(item), false), __read(addGroupInfoToCells(group, groups, sortedResources, viewCellsData[id], index, false, HORIZONTAL_GROUP_ORIENTATION)), false);\n    });\n  }, [[]]);\n};\nvar expandVerticallyGroupedCells = function (viewCellsData, groups, sortedResources) {\n  return getGroupsLastRow(groups).reduce(function (acc, group, index) {\n    if (index === 0) {\n      return viewCellsData.map(function (viewCellsRow, viewRowIndex) {\n        return addGroupInfoToCells(group, groups, sortedResources, viewCellsRow, index, viewRowIndex === viewCellsData.length - 1, VERTICAL_GROUP_ORIENTATION);\n      });\n    }\n    return __spreadArray(__spreadArray([], __read(acc), false), __read(viewCellsData.map(function (viewCellsRow, viewRowIndex) {\n      return addGroupInfoToCells(group, groups, sortedResources, viewCellsRow, index, viewRowIndex === viewCellsData.length - 1, VERTICAL_GROUP_ORIENTATION);\n    })), false);\n  }, [[]]);\n};\nvar updateGroupingWithMainResource = function (grouping, resources) {\n  return grouping || [{\n    resourceName: resources.find(function (resource) {\n      return resource.isMain;\n    }).fieldName\n  }];\n};\nvar expandGroups = function (appointments, grouping, resources, groups, excludedDays, sliceByDay) {\n  if (sliceByDay === void 0) {\n    sliceByDay = false;\n  }\n  var slicedAppointments = sliceByDay ? appointments[0].reduce(function (acc, appointment) {\n    return __spreadArray(__spreadArray([], __read(acc), false), __read(sliceAppointmentsByDays(appointment, excludedDays)), false);\n  }, []) : appointments[0];\n  var expandedAppointments = slicedAppointments.reduce(function (acc, appointment) {\n    return __spreadArray(__spreadArray([], __read(acc), false), __read(expandGroupedAppointment(appointment, grouping, resources)), false);\n  }, []);\n  return groupAppointments(expandedAppointments, resources, groups);\n};\nvar updateTimeTableCellElementsMeta = function (timeTableElementsMeta, groupOrientation, groups, allDayPanelExists, viewCellsData, currentView) {\n  if (checkCellElementsMeta(timeTableElementsMeta, groupOrientation, currentView, allDayPanelExists)) {\n    return timeTableElementsMeta;\n  }\n  var _a = initializeCellElementsData(timeTableElementsMeta, viewCellsData, groups),\n    groupCount = _a.groupCount,\n    timeTableWidth = _a.timeTableWidth,\n    groupSize = _a.groupSize,\n    validGetCellRects = _a.validGetCellRects;\n  var allDayPanelsLeft = groupCount;\n  while (allDayPanelsLeft > 0) {\n    allDayPanelsLeft -= 1;\n    validGetCellRects.splice(allDayPanelsLeft * (timeTableWidth + groupSize), timeTableWidth);\n  }\n  return {\n    parentRect: timeTableElementsMeta.parentRect,\n    getCellRects: validGetCellRects\n  };\n};\nvar updateAllDayCellElementsMeta = function (allDayElementsMeta, timeTableElementsMeta, groupOrientation, groups, allDayPanelExists, viewCellsData, currentView) {\n  if (checkCellElementsMeta(timeTableElementsMeta, groupOrientation, currentView, allDayPanelExists)) {\n    return allDayElementsMeta;\n  }\n  var _a = initializeCellElementsData(timeTableElementsMeta, viewCellsData, groups),\n    groupCount = _a.groupCount,\n    timeTableWidth = _a.timeTableWidth,\n    groupSize = _a.groupSize,\n    validGetCellRects = _a.validGetCellRects;\n  var allDayPanelsLeft = groupCount;\n  while (allDayPanelsLeft > 0) {\n    allDayPanelsLeft -= 1;\n    validGetCellRects.splice(groupSize * allDayPanelsLeft + timeTableWidth * (allDayPanelsLeft + 1), groupSize);\n  }\n  return {\n    parentRect: timeTableElementsMeta.parentRect,\n    getCellRects: validGetCellRects\n  };\n};\nvar checkCellElementsMeta = function (cellElementsMeta, groupOrientation, currentView, allDayPanelExists) {\n  return groupOrientation(currentView.name) === HORIZONTAL_GROUP_ORIENTATION || !allDayPanelExists || !cellElementsMeta.getCellRects;\n};\nvar initializeCellElementsData = function (cellElementsMeta, viewCellsData, groups) {\n  var timeTableWidth = viewCellsData[0].length;\n  var groupCount = getGroupsLastRow(groups).length;\n  var groupHeight = viewCellsData.length / groupCount;\n  return {\n    groupCount: groupCount,\n    timeTableWidth: timeTableWidth,\n    groupSize: timeTableWidth * groupHeight,\n    validGetCellRects: cellElementsMeta.getCellRects.slice()\n  };\n};\nvar updateTimeCellsData = function (viewCellsData, timeCellsData, groups, sortedResources, groupOrientation) {\n  var firstViewDate = viewCellsData[0][0].startDate;\n  if (!containsDSTChange(firstViewDate)) {\n    return viewCellsData;\n  }\n  if (groupOrientation !== VERTICAL_GROUP_ORIENTATION) {\n    return timeCellsData;\n  }\n  return expandVerticallyGroupedCells(timeCellsData, groups, sortedResources);\n};\nvar allDayRects = function (appointments, startViewDate, endViewDate, excludedDays, viewCellsData, cellElementsMeta, grouping, resources, groups, groupOrientation, sliceAppointments) {\n  var intervals = calculateAllDayDateIntervals(appointments, startViewDate, endViewDate, excludedDays);\n  var groupedIntervals = expandGroups(intervals, grouping, resources, groups, excludedDays, sliceAppointments);\n  return calculateRectByDateAndGroupIntervals({\n    growDirection: HORIZONTAL_TYPE,\n    multiline: false\n  }, groupedIntervals, getHorizontalRectByAppointmentData, {\n    startViewDate: startViewDate,\n    endViewDate: endViewDate,\n    viewCellsData: viewCellsData,\n    cellElementsMeta: cellElementsMeta,\n    excludedDays: excludedDays\n  }, {\n    groupOrientation: groupOrientation,\n    groupedByDate: sliceAppointments,\n    groupCount: groups ? getGroupsLastRow(groups).length : 1\n  });\n};\nvar verticalTimeTableRects = function (appointments, startViewDate, endViewDate, excludedDays, viewCellsData, cellDuration, cellElementsMeta, grouping, resources, groups, groupOrientation, groupByDate) {\n  var intervals = calculateWeekDateIntervals(appointments, startViewDate, endViewDate, excludedDays, cellDuration);\n  var groupedIntervals = expandGroups(intervals, grouping, resources, groups, excludedDays, false);\n  return calculateRectByDateAndGroupIntervals({\n    growDirection: VERTICAL_TYPE,\n    multiline: false\n  }, groupedIntervals, getVerticalRectByAppointmentData, {\n    startViewDate: startViewDate,\n    endViewDate: endViewDate,\n    viewCellsData: viewCellsData,\n    cellDuration: cellDuration,\n    cellElementsMeta: cellElementsMeta\n  }, {\n    groupOrientation: groupOrientation,\n    groupedByDate: groupByDate,\n    groupCount: groups ? getGroupsLastRow(groups).length : 1\n  });\n};\nvar horizontalTimeTableRects = function (appointments, startViewDate, endViewDate, viewCellsData, cellElementsMeta, grouping, resources, groups, groupOrientation, sliceAppointments) {\n  var intervals = calculateMonthDateIntervals(appointments, startViewDate, endViewDate);\n  var groupedIntervals = expandGroups(intervals, grouping, resources, groups, [], sliceAppointments);\n  return calculateRectByDateAndGroupIntervals({\n    growDirection: HORIZONTAL_TYPE,\n    multiline: true\n  }, groupedIntervals, getHorizontalRectByAppointmentData, {\n    startViewDate: startViewDate,\n    endViewDate: endViewDate,\n    viewCellsData: viewCellsData,\n    cellElementsMeta: cellElementsMeta\n  }, {\n    groupOrientation: groupOrientation,\n    groupedByDate: sliceAppointments,\n    groupCount: groups ? getGroupsLastRow(groups).length : 1\n  });\n};\nvar dateTimeFormatInstance = function (locale, formatOptions) {\n  return new Intl.DateTimeFormat(locale, formatOptions);\n};\nvar appointments = function (data) {\n  return data.map(function (appointment, index) {\n    return __assign(__assign(__assign(__assign(__assign({\n      dataItem: appointment,\n      start: appointment.startDate\n    }, appointment.endDate !== undefined ? {\n      end: appointment.endDate\n    } : {\n      end: appointment.startDate,\n      dataItem: __assign(__assign({}, appointment), {\n        endDate: appointment.startDate\n      })\n    }), appointment.allDay !== undefined && {\n      allDay: appointment.allDay\n    }), appointment.rRule !== undefined && {\n      rRule: appointment.rRule\n    }), appointment.exDate !== undefined && {\n      exDate: appointment.exDate\n    }), {\n      key: appointment.id || index\n    });\n  });\n};\nvar formatDateTimeGetter = function (locale) {\n  var cache = new Map(); // any -> type\n  var formatter = function (nextDate, nextOptions) {\n    if (nextDate === undefined) return '';\n    var date = convertToMoment(nextDate).toDate();\n    var formatInstance = cache.get(nextOptions);\n    if (!formatInstance) {\n      formatInstance = dateTimeFormatInstance(locale, nextOptions);\n      cache.set(nextOptions, formatInstance);\n    }\n    return formatInstance.format(date);\n  };\n  return formatter;\n};\nvar getCellKey = function (groups, groupIndex, rowNumber) {\n  var currentIndex = groupIndex;\n  return groups.reduceRight(function (acc, groupRow, rowIndex) {\n    if (rowNumber < rowIndex) return acc;\n    var currentKey = groupRow[currentIndex].id;\n    if (rowIndex > 0) {\n      var currentRowLength = groups[rowIndex].length / groups[rowIndex - 1].length;\n      currentIndex = Math.floor(currentIndex / currentRowLength);\n    }\n    return acc + currentKey;\n  }, '');\n};\nvar getRowFromGroups = function (width, groupRow, cellStyle, groups, rowIndex) {\n  var row = [];\n  var currentRowLength = groupRow.length;\n  var standardWidth = width / getGroupsLastRow(groups).length;\n  var colSpan = getGroupsLastRow(groups).length / currentRowLength;\n  var _loop_1 = function (i) {\n    row = __spreadArray(__spreadArray([], __read(row), false), __read(groupRow.reduce(function (acc, group, index) {\n      return __spreadArray(__spreadArray([], __read(acc), false), [{\n        group: group,\n        colSpan: colSpan,\n        key: getCellKey(groups, index, rowIndex) + i,\n        left: cellStyle.left,\n        endOfGroup: index === currentRowLength - 1\n      }], false);\n    }, [])), false);\n  };\n  for (var i = 0; i < standardWidth; i += 1) {\n    _loop_1(i);\n  }\n  return row;\n};\nvar getVerticalRowFromGroups = function (groups, groupIndex, groupingPanelRowSpan, timeTableCellHeight, addAllDayHeight, allDayCellHeight) {\n  return groups.reduce(function (acc, groupColumn, columnIndex) {\n    var groupSpan = getGroupsLastRow(groups).length / groupColumn.length;\n    var cellIndex = groupIndex / groupSpan;\n    var baseHeight = groupingPanelRowSpan * groupSpan * timeTableCellHeight / getGroupsLastRow(groups).length;\n    var allDayHeight = groupSpan * allDayCellHeight;\n    return groupIndex % groupSpan !== 0 ? acc : __spreadArray(__spreadArray([], __read(acc), false), [{\n      group: groupColumn[cellIndex],\n      rowSpan: groupSpan,\n      height: addAllDayHeight ? baseHeight + allDayHeight : baseHeight,\n      key: getCellKey(groups, cellIndex, columnIndex)\n    }], false);\n  }, []);\n};\nvar getLabelsForSingleGroup = function (groups, cellsData, groupIndex, groupHeight) {\n  var currentGroupIndex = groupIndex * groupHeight;\n  var nextGroupIndex = currentGroupIndex + groupHeight;\n  return cellsData.slice(currentGroupIndex, nextGroupIndex - 1).reduce(function (acc, days) {\n    return __spreadArray(__spreadArray([], __read(acc), false), [{\n      startDate: days[0].startDate,\n      endDate: days[0].endDate,\n      key: days[0].endDate + getCellKey(groups, groupIndex, groups.length - 1),\n      groupingInfo: days[0].groupingInfo\n    }], false);\n  }, []);\n};\nvar getLabelsForAllGroups = function (cellsData, groups, groupOrientation) {\n  if (groupOrientation === HORIZONTAL_GROUP_ORIENTATION) {\n    return [cellsData.map(function (cellsRow) {\n      return {\n        startDate: cellsRow[0].startDate,\n        endDate: cellsRow[0].endDate,\n        groupingInfo: cellsRow[0].groupingInfo,\n        key: cellsRow[0].endDate\n      };\n    })];\n  }\n  var groupCount = getGroupsLastRow(groups).length;\n  var singleGroupHeight = cellsData.length / groupCount;\n  return getGroupsLastRow(groups).reduce(function (acc, group, groupIndex) {\n    return __spreadArray(__spreadArray([], __read(acc), false), [getLabelsForSingleGroup(groups, cellsData, groupIndex, singleGroupHeight)], false);\n  }, []);\n};\nvar prepareVerticalViewCellsData = function (cellsData, allDayCellsData) {\n  var groupCount = (allDayCellsData === null || allDayCellsData === void 0 ? void 0 : allDayCellsData.length) || 1;\n  var validCellsData = [];\n  var groupHeight = cellsData.length / groupCount;\n  for (var i = 0; i < groupCount; i += 1) {\n    validCellsData.push(cellsData.slice(i * groupHeight, (i + 1) * groupHeight));\n  }\n  return validCellsData;\n};\nvar changeCurrentDate = function (currentDate, _a) {\n  var nextDate = _a.nextDate,\n    step = _a.step,\n    amount = _a.amount,\n    direction = _a.direction;\n  return nextDate || moment(currentDate)[direction === 'back' ? 'subtract' : 'add'](amount, step).toDate() || moment().subtract(amount, step);\n};\nvar setCurrentViewName = function (currentViewName, nextViewName) {\n  return nextViewName;\n};\nvar setAppointmentMeta = function (prevAppointmentMeta, _a) {\n  var target = _a.target,\n    data = _a.data;\n  return {\n    target: target,\n    data: data\n  };\n};\nvar OPEN_COMMAND_BUTTON = 'open';\nvar CLOSE_COMMAND_BUTTON = 'close';\nvar DELETE_COMMAND_BUTTON = 'delete';\nvar CANCEL_COMMAND_BUTTON = 'cancel';\nvar COMMIT_COMMAND_BUTTON = 'commit';\nvar setAppointmentData = function (prevAppointmentData, _a) {\n  var appointmentData = _a.appointmentData;\n  return appointmentData;\n};\nvar getWeekNumberLabels = function (getMessage) {\n  return WEEK_NUMBER_LABELS.map(function (weekNumberLabel, index) {\n    return {\n      text: getMessage(weekNumberLabel),\n      id: index\n    };\n  });\n};\nvar getDaysOfWeek = function (formatDate, firstDayOfWeek) {\n  var daysOfWeekArray = getDaysOfWeekArray(firstDayOfWeek);\n  var daysOfWeekDates = getDaysOfWeekDates(firstDayOfWeek);\n  return daysOfWeekDates.map(function (day, index) {\n    return {\n      text: getDayOfWeek(day, formatDate),\n      id: index + 1 < DAYS_IN_WEEK ? daysOfWeekArray[index + 1] : daysOfWeekArray[0]\n    };\n  });\n};\nvar getMonths = function (formatDate) {\n  return MONTHS_DATES.map(function (month, index) {\n    return {\n      text: getMonth(month, formatDate),\n      id: getMonthId(index)\n    };\n  });\n};\nvar getMonthsWithOf = function (getMessage, formatDate) {\n  return MONTHS_DATES.map(function (month, index) {\n    return {\n      text: getMonthWithOf(month, getMessage, formatDate),\n      id: getMonthId(index)\n    };\n  });\n};\nvar getMonthWithOf = function (date, getMessage, formatDate) {\n  return getMessage('ofLabel') + formatDate(date, DAY_LONG_MONTH_OPTIONS).replace(/[\\d.,]/g, '').toString();\n};\nvar getMonth = function (date, formatDate) {\n  return formatDate(date, LONG_MONTH_OPTIONS);\n};\nvar getDayOfWeek = function (date, formatDate) {\n  return formatDate(date, LONG_WEEK_DAY_OPTIONS);\n};\nvar getMonthId = function (index) {\n  return index + 1;\n};\nvar getAvailableRecurrenceOptions = function (getMessage) {\n  return REPEAT_TYPES_ARRAY.map(function (type) {\n    return {\n      text: getMessage(type),\n      id: type\n    };\n  });\n};\nvar getCountDependingOnRecurrenceType = function (frequency) {\n  var count;\n  switch (frequency) {\n    case RRULE_REPEAT_TYPES.YEARLY:\n      count = BASIC_YEALY_COUNT;\n      break;\n    case RRULE_REPEAT_TYPES.MONTHLY:\n      count = BASIC_MONTHLY_COUNT;\n      break;\n    case RRULE_REPEAT_TYPES.WEEKLY:\n      count = BASIC_WEEKLY_COUNT;\n      break;\n    case RRULE_REPEAT_TYPES.DAILY:\n      count = BASIC_DAILY_COUNT;\n      break;\n  }\n  return count;\n};\nvar checkIsNaturalNumber = function (number) {\n  return number > 0 && number <= Number.MAX_SAFE_INTEGER;\n};\nvar callActionIfExists = function (action, payload) {\n  if (action) {\n    action(payload);\n  }\n};\nvar isAllDayCell = function (startDate, endDate) {\n  return moment(endDate).diff(moment(startDate), 'days') >= 1;\n};\nvar changeRecurrenceFrequency = function (rule, freq, startDate) {\n  if (!rule) {\n    if (freq === RRULE_REPEAT_TYPES.MONTHLY) {\n      return new RRule(__assign(__assign({}, DEFAULT_RULE_OBJECT), {\n        freq: freq,\n        bymonthday: [startDate.getDate()],\n        count: getCountDependingOnRecurrenceType(freq)\n      })).toString();\n    }\n    if (freq === RRULE_REPEAT_TYPES.YEARLY) {\n      return new RRule(__assign(__assign({}, DEFAULT_RULE_OBJECT), {\n        freq: freq,\n        bymonthday: [startDate.getDate()],\n        bymonth: startDate.getMonth() + 1,\n        count: getCountDependingOnRecurrenceType(freq)\n      })).toString();\n    }\n    return new RRule(__assign(__assign({}, DEFAULT_RULE_OBJECT), {\n      freq: freq,\n      count: getCountDependingOnRecurrenceType(freq)\n    })).toString();\n  }\n  var options = RRule.parseString(rule);\n  if (options.freq === freq) return rule;\n  options.freq = freq;\n  options.count = getCountDependingOnRecurrenceType(freq);\n  if (freq === RRULE_REPEAT_TYPES.MONTHLY || freq === RRULE_REPEAT_TYPES.YEARLY) {\n    options.bymonthday = startDate.getDate();\n  }\n  if (freq === RRULE_REPEAT_TYPES.YEARLY) {\n    options.bymonth = startDate.getMonth() + 1;\n  }\n  if (freq === RRULE_REPEAT_TYPES.DAILY || freq === RRULE_REPEAT_TYPES.WEEKLY) {\n    options.bymonthday = undefined;\n  }\n  options.byweekday = undefined;\n  var nextRule = new RRule(options);\n  return nextRule.toString();\n};\nvar getRecurrenceOptions = function (rule) {\n  return !rule ? null : RRule.parseString(rule);\n};\nvar changeRecurrenceOptions = function (options) {\n  return options ? new RRule(__assign({}, options)).toString() : undefined;\n};\nvar handleStartDateChange = function (nextStartDay, options) {\n  if (nextStartDay <= 31) {\n    var nextOptions = __assign(__assign({}, options), {\n      bymonthday: nextStartDay\n    });\n    return changeRecurrenceOptions(nextOptions);\n  }\n  return changeRecurrenceOptions(options);\n};\nvar handleToDayOfWeekChange = function (weekNumber, dayOfWeek, options) {\n  var validDayOfWeek = dayOfWeek > 0 ? dayOfWeek - 1 : 6;\n  var validWeekNumber = weekNumber === 4 ? -1 : weekNumber + 1;\n  var rruleDayOfWeek = RRULE_DAYS_OF_WEEK[validDayOfWeek];\n  var nextOptions = __assign(__assign({}, options), {\n    byweekday: [rruleDayOfWeek.nth(validWeekNumber)],\n    bymonthday: undefined\n  });\n  return changeRecurrenceOptions(nextOptions);\n};\nvar getRRuleFrequency = function (repeatType) {\n  return RRULE_REPEAT_TYPES[repeatType.toUpperCase()];\n};\nvar getFrequencyString = function (rRuleFrequency) {\n  if (rRuleFrequency === RRULE_REPEAT_TYPES.DAILY) return REPEAT_TYPES.DAILY;\n  if (rRuleFrequency === RRULE_REPEAT_TYPES.WEEKLY) return REPEAT_TYPES.WEEKLY;\n  if (rRuleFrequency === RRULE_REPEAT_TYPES.MONTHLY) return REPEAT_TYPES.MONTHLY;\n  if (rRuleFrequency === RRULE_REPEAT_TYPES.YEARLY) return REPEAT_TYPES.YEARLY;\n  return REPEAT_TYPES.NEVER;\n};\nvar getRadioGroupDisplayData = function (recurrenceOptions, stateDayOfWeek, stateWeekNumber, stateDayNumber, firstOption, secondOption) {\n  if (recurrenceOptions.bymonthday && !Array.isArray(recurrenceOptions.bymonthday)) {\n    return {\n      dayNumberTextField: recurrenceOptions.bymonthday,\n      weekNumber: stateWeekNumber,\n      dayOfWeek: stateDayOfWeek,\n      radioGroupValue: firstOption\n    };\n  }\n  if (!recurrenceOptions.byweekday) {\n    return {\n      dayOfWeek: stateDayOfWeek,\n      weekNumber: stateWeekNumber,\n      radioGroupValue: secondOption,\n      dayNumberTextField: stateDayNumber\n    };\n  }\n  var dayOfWeek = recurrenceOptions.byweekday[0].weekday < 6 ? recurrenceOptions.byweekday[0].weekday + 1 : 0;\n  var weekNumber = recurrenceOptions.byweekday[0].n === -1 ? LAST_WEEK : recurrenceOptions.byweekday[0].n - 1;\n  return {\n    dayOfWeek: dayOfWeek,\n    weekNumber: weekNumber,\n    radioGroupValue: secondOption,\n    dayNumberTextField: stateDayNumber\n  };\n};\nvar handleChangeFrequency = function (repeatType, rRule, startDate, action) {\n  var rruleRepeatType = getRRuleFrequency(repeatType);\n  var nextRRule;\n  if (rruleRepeatType !== undefined) {\n    nextRRule = changeRecurrenceFrequency(rRule, rruleRepeatType, startDate);\n  }\n  action({\n    rRule: nextRRule\n  });\n};\nvar handleWeekDaysChange = function (options, currentWeekDay) {\n  var byWeekDay = options.byweekday || [];\n  var index = byWeekDay.findIndex(function (_a) {\n    var weekday = _a.weekday;\n    return weekday === currentWeekDay;\n  });\n  var isAdded = index === -1;\n  if (isAdded) {\n    byWeekDay.push(RRULE_DAYS_OF_WEEK[currentWeekDay]);\n  } else if (index > -1) {\n    byWeekDay.splice(index, 1);\n  }\n  if (byWeekDay === 0) return __assign(__assign({}, options), {\n    byweekday: undefined\n  });\n  return __assign(__assign({}, options), {\n    byweekday: byWeekDay\n  });\n};\nvar getDaysOfWeekArray = function (firstDayOfWeek) {\n  var firstPart = DAYS_OF_WEEK_ARRAY.filter(function (dayOfWeek) {\n    return dayOfWeek >= firstDayOfWeek - 1 && dayOfWeek < DAYS_IN_WEEK - 1;\n  });\n  var secondPart = DAYS_OF_WEEK_ARRAY.filter(function (dayOfWeek) {\n    return dayOfWeek < firstDayOfWeek - 1 || dayOfWeek >= DAYS_IN_WEEK - 1;\n  });\n  return firstDayOfWeek !== 0 ? __spreadArray(__spreadArray([], __read(firstPart), false), __read(secondPart), false) : __spreadArray(__spreadArray([], __read(secondPart), false), __read(firstPart), false);\n};\nvar getDaysOfWeekDates = function (firstDayOfWeek) {\n  var firstPart = DAYS_OF_WEEK_DATES.slice(firstDayOfWeek, DAYS_OF_WEEK_DATES.length);\n  var secondPart = DAYS_OF_WEEK_DATES.slice(0, firstDayOfWeek);\n  return __spreadArray(__spreadArray([], __read(firstPart), false), __read(secondPart), false);\n};\nvar checkMultipleResourceFields = function (resourceFields, resources) {\n  return resources.reduce(function (acc, resource) {\n    var _a;\n    if (!resource.allowMultiple) {\n      return acc;\n    }\n    var fieldName = resource.fieldName;\n    var field = resourceFields[fieldName];\n    return __assign(__assign({}, acc), (_a = {}, _a[fieldName] = Array.isArray(field) ? field : [field], _a));\n  }, resourceFields);\n};\nvar addAppointment = function (addedAppointmentData, _a) {\n  var _b = _a === void 0 ? {\n      appointmentData: {}\n    } : _a,\n    appointmentData = _b.appointmentData;\n  return appointmentData;\n};\nvar cancelAddedAppointment = function () {\n  return {};\n};\nvar startEditAppointment = function (prevEditingAppointment, appointmentData) {\n  return appointmentData;\n};\nvar stopEditAppointment = function () {\n  return null;\n};\nvar changeAppointment = function (appointment, _a) {\n  var change = _a.change;\n  return __assign(__assign({}, appointment), change);\n};\nvar cancelChanges = function () {\n  return {};\n};\nvar changedAppointmentById = function (changes, appointmentId) {\n  var _a;\n  return _a = {}, _a[appointmentId] = changes, _a;\n};\nvar mergeNewChanges = function (appointmentData, changes) {\n  var appointment = __assign({}, appointmentData);\n  delete appointment.id;\n  delete appointment.rRule;\n  delete appointment.exDate;\n  delete appointment.parentData;\n  return __assign(__assign({}, appointment), changes);\n};\nvar reduceExDate = function (prevExDate, boundDate) {\n  if (prevExDate.length > 0) {\n    return prevExDate.split(',').reduce(function (acc, date) {\n      var momentDate = moment.utc(date);\n      if (momentDate.isBefore(boundDate)) {\n        return __spreadArray(__spreadArray([], __read(acc), false), [date], false);\n      }\n      return acc;\n    }, []).join(',');\n  }\n  return undefined;\n};\nvar configureExDate = function (exDate, date) {\n  var currentExDate = \"\".concat(moment.utc(date).format('YYYYMMDDTHHmmss'), \"Z\");\n  return exDate ? \"\".concat(exDate, \",\").concat(currentExDate) : currentExDate;\n};\nvar configureDateSequence = function (rRule, exDate, prevStartDate, nextStartDate) {\n  var rruleSet = getRRuleSetWithExDates(exDate);\n  var currentOptions = RRule.parseString(rRule);\n  var correctedOptions = currentOptions.until ? __assign(__assign({}, currentOptions), {\n    until: moment(getUTCDate(currentOptions.until)).toDate()\n  }) : currentOptions;\n  var prevStartDateUTC = moment(getUTCDate(prevStartDate)).toDate();\n  rruleSet.rrule(new RRule(__assign(__assign({}, correctedOptions), {\n    dtstart: prevStartDateUTC\n  })));\n  if (currentOptions.count || currentOptions.until) {\n    return {\n      options: currentOptions,\n      dates: rruleSet.all()\n      // we shouldn't use `new Date(string)` because this function has different results in Safari\n      .map(function (nextDate) {\n        return moment(formatDateToString(nextDate)).toDate();\n      })\n    };\n  }\n  var leftBound = prevStartDateUTC;\n  var rightBound = moment(getUTCDate(nextStartDate)).toDate();\n  return {\n    options: currentOptions,\n    dates: rruleSet.between(leftBound, rightBound, true).map(function (nextDate) {\n      return moment(formatDateToString(nextDate)).toDate();\n    })\n  };\n};\nvar configureICalendarRules = function (rRule, options) {\n  var rruleSet = new RRuleSet();\n  rruleSet.rrule(new RRule(__assign(__assign({}, RRule.parseString(rRule)), options)));\n  return rruleSet.valueOf();\n};\nvar changeCurrentAndFollowing = function (appointmentData, changes, changeAllAction) {\n  var _a;\n  var rRule = appointmentData.rRule,\n    startDate = appointmentData.startDate,\n    parentData = appointmentData.parentData,\n    _b = appointmentData.exDate,\n    prevExDate = _b === void 0 ? '' : _b,\n    id = appointmentData.id;\n  var _c = getAppointmentSequenceData(parentData.startDate, moment.utc(startDate).toDate(), prevExDate, rRule),\n    initialSequence = _c.initialSequence,\n    currentChildIndex = _c.currentChildIndex;\n  if (currentChildIndex === 0) return changeAllAction(appointmentData, changes);\n  var changedRules = configureICalendarRules(rRule, {\n    dtstart: moment.utc(parentData.startDate).toDate(),\n    until: moment.utc(initialSequence[currentChildIndex - 1]).toDate(),\n    count: null\n  });\n  var nextExDate = reduceExDate(prevExDate, startDate);\n  return {\n    changed: (_a = {}, _a[id] = __assign({\n      rRule: changedRules[1].slice(6)\n    }, nextExDate && prevExDate !== nextExDate ? {\n      exDate: nextExDate\n    } : {}), _a)\n  };\n};\nvar getAppointmentSequenceData = function (prevStartDate, startDate, exDate, rRule) {\n  var initialSequence = configureDateSequence(rRule, exDate, moment.utc(prevStartDate).toDate(), moment.utc(startDate).toDate()).dates;\n  var currentChildIndex = initialSequence.findIndex(function (date) {\n    return moment(date).isSame(startDate);\n  });\n  return {\n    initialSequence: initialSequence,\n    currentChildIndex: currentChildIndex\n  };\n};\nvar deleteCurrent = function (appointmentData) {\n  var _a;\n  var _b = configureDateSequence(appointmentData.rRule, appointmentData.exDate, moment.utc(appointmentData.parentData.startDate).toDate(), moment.utc(appointmentData.startDate).toDate()),\n    options = _b.options,\n    dates = _b.dates;\n  if ((options.count || options.until) && dates.length === 1) {\n    return deleteAll(appointmentData);\n  }\n  var nextExDate = configureExDate(appointmentData.exDate, appointmentData.startDate);\n  return {\n    changed: (_a = {}, _a[appointmentData.id] = {\n      exDate: nextExDate\n    }, _a)\n  };\n};\nvar deleteAll = function (appointmentData) {\n  return {\n    deleted: appointmentData.id\n  };\n};\nvar deleteCurrentAndFollowing = function (appointmentData) {\n  return changeCurrentAndFollowing(appointmentData, {}, deleteAll);\n};\nvar editAll = function (appointmentData, changes) {\n  var _a, _b;\n  var rRule = appointmentData.rRule,\n    id = appointmentData.id;\n  var initialRule = new RRule(RRule.parseString(rRule));\n  if (changes.startDate && moment.utc(changes.startDate).isAfter(initialRule.options.until)) {\n    return {\n      changed: (_a = {}, _a[id] = __assign(__assign({}, changes), {\n        rRule: 'FREQ=DAILY;COUNT=1',\n        exDate: ''\n      }), _a)\n    };\n  }\n  return {\n    changed: (_b = {}, _b[appointmentData.id] = changes, _b)\n  };\n};\nvar editCurrent = function (appointmentData, changes) {\n  var _a;\n  return {\n    changed: (_a = {}, _a[appointmentData.id] = {\n      exDate: configureExDate(appointmentData.exDate, appointmentData.startDate)\n    }, _a),\n    added: mergeNewChanges(appointmentData, changes)\n  };\n};\nvar editCurrentAndFollowing = function (appointmentData, changes) {\n  var rRule = appointmentData.rRule,\n    startDate = appointmentData.startDate,\n    _a = appointmentData.exDate,\n    prevExDate = _a === void 0 ? '' : _a,\n    parentData = appointmentData.parentData;\n  var initialRule = new RRule(RRule.parseString(rRule));\n  var _b = getAppointmentSequenceData(parentData.startDate, moment.utc(startDate).toDate(), prevExDate, rRule),\n    initialSequence = _b.initialSequence,\n    currentChildIndex = _b.currentChildIndex;\n  if (currentChildIndex === 0) return editAll(appointmentData, changes);\n  var addedOptions = initialRule.options.count || initialRule.options.until ? {\n    count: initialSequence.length - currentChildIndex\n  } : {};\n  var addedRules = configureICalendarRules(appointmentData.rRule, __assign({\n    dtstart: moment.utc(startDate).toDate()\n  }, addedOptions));\n  var addedAppointment = moment.utc(changes.startDate).isAfter(initialRule.options.until) ? {\n    rRule: 'FREQ=DAILY;COUNT=1',\n    exDate: ''\n  } : {\n    rRule: addedRules[1].slice(6)\n  };\n  return {\n    changed: changeCurrentAndFollowing(appointmentData, changes, editAll).changed,\n    added: __assign(__assign({}, addedAppointment), mergeNewChanges(appointmentData, changes))\n  };\n};\nvar preCommitChanges = function (changes, appointmentData, editType) {\n  if (changes === null) {\n    switch (editType) {\n      case RECURRENCE_EDIT_SCOPE.ALL:\n        {\n          return deleteAll(appointmentData);\n        }\n      case RECURRENCE_EDIT_SCOPE.CURRENT:\n        {\n          return deleteCurrent(appointmentData);\n        }\n      case RECURRENCE_EDIT_SCOPE.CURRENT_AND_FOLLOWING:\n        {\n          return deleteCurrentAndFollowing(appointmentData);\n        }\n    }\n  } else {\n    switch (editType) {\n      case RECURRENCE_EDIT_SCOPE.ALL:\n        {\n          return editAll(appointmentData, changes);\n        }\n      case RECURRENCE_EDIT_SCOPE.CURRENT:\n        {\n          return editCurrent(appointmentData, changes);\n        }\n      case RECURRENCE_EDIT_SCOPE.CURRENT_AND_FOLLOWING:\n        {\n          return editCurrentAndFollowing(appointmentData, changes);\n        }\n    }\n  }\n  return {};\n};\nvar clamp = function (value, min, max) {\n  return Math.max(Math.min(value, max), min);\n};\nvar calculateInsideOffset = function (targetType, insidePart, cellDurationMinutes) {\n  return targetType === VERTICAL_TYPE ? insidePart * cellDurationMinutes * 60 / 2 : 0;\n};\nvar cellType = function (data) {\n  return moment(data.startDate).isSame(data.endDate, 'day') ? VERTICAL_TYPE : HORIZONTAL_TYPE;\n};\nvar intervalDuration = function (data, type) {\n  return moment(data.endDate).diff(data.startDate, type);\n};\nvar cellIndex = function (getCellRects, clientOffset) {\n  return getCellRects.findIndex(function (getCellRect) {\n    var _a = getCellRect(),\n      left = _a.left,\n      top = _a.top,\n      right = _a.right,\n      bottom = _a.bottom;\n    var isOver = clientOffset && clamp(clientOffset.x, left, right) === clientOffset.x && clamp(clientOffset.y, top, bottom) === clientOffset.y;\n    return isOver;\n  });\n};\nvar cellData = function (timeTableIndex, allDayIndex, viewCellsData, allDayCellsData) {\n  var cellsData = allDayIndex !== -1 ? allDayCellsData : viewCellsData;\n  var currentIndex = allDayIndex !== -1 ? allDayIndex : timeTableIndex;\n  var tableWidth = cellsData[0].length;\n  var rowIndex = Math.floor(currentIndex / tableWidth);\n  var columnIndex = currentIndex % tableWidth;\n  return cellsData[rowIndex][columnIndex];\n};\nvar autoScroll = function (clientOffset, scrollingStrategy, scrollSpeed) {\n  scroll(clientOffset.y, scrollingStrategy.topBoundary, scrollingStrategy.bottomBoundary, scrollingStrategy.changeVerticalScroll, scrollSpeed);\n  scroll(clientOffset.x, scrollingStrategy.leftBoundary, scrollingStrategy.rightBoundary, scrollingStrategy.changeHorizontalScroll, scrollSpeed);\n};\nvar scroll = function (offset, firstBoundary, secondBoundary, changeScroll, scrollSpeed) {\n  if (offset < firstBoundary + SCROLL_OFFSET && offset > firstBoundary) {\n    changeScroll(-scrollSpeed);\n  }\n  if (secondBoundary - SCROLL_OFFSET < offset) {\n    changeScroll(+scrollSpeed);\n  }\n};\nvar timeBoundariesByResize = function (payload, targetData, targetType, cellDurationMinutes, insidePart) {\n  if (targetType !== payload.appointmentType) {\n    return {\n      appointmentStartTime: undefined,\n      appointmentEndTime: undefined\n    };\n  }\n  var appointmentStartTime;\n  var appointmentEndTime;\n  var sourceType = payload.type;\n  if (sourceType === RESIZE_TOP) {\n    var insideTopOffset = calculateInsideOffset(targetType, insidePart, cellDurationMinutes);\n    appointmentStartTime = moment(targetData.startDate).add(insideTopOffset, SECONDS).toDate();\n    appointmentEndTime = moment(payload.endDate).toDate();\n  }\n  if (sourceType === RESIZE_BOTTOM) {\n    var insideBottomOffset = insidePart === 0 && targetType === VERTICAL_TYPE ? cellDurationMinutes * 60 / 2 : 0;\n    appointmentEndTime = moment(targetData.endDate).add(-insideBottomOffset, SECONDS).toDate();\n    appointmentStartTime = moment(payload.startDate).toDate();\n  }\n  // keep origin appointment duration if coordinates are wrong\n  if (moment(appointmentEndTime).diff(appointmentStartTime, MINUTES) < 1) {\n    appointmentStartTime = moment(payload.startDate).toDate();\n    appointmentEndTime = moment(payload.endDate).toDate();\n  }\n  return {\n    appointmentStartTime: appointmentStartTime,\n    appointmentEndTime: appointmentEndTime\n  };\n};\nvar timeBoundariesByDrag = function (payload, targetData, targetType, cellDurationMinutes, insidePart, offsetTimeTopBase) {\n  if (targetType === HORIZONTAL_TYPE && intervalDuration(payload, SECONDS) < intervalDuration(targetData, SECONDS)) {\n    return {\n      appointmentStartTime: targetData.startDate,\n      appointmentEndTime: targetData.endDate,\n      offsetTimeTop: 0\n    };\n  }\n  var offsetTimeTop;\n  var appointmentStartTime;\n  var appointmentEndTime;\n  var insideOffset = calculateInsideOffset(targetType, insidePart, cellDurationMinutes);\n  var start = moment(targetData.startDate).add(insideOffset, SECONDS);\n  if (offsetTimeTopBase === null) {\n    offsetTimeTop = moment(targetData.startDate).diff(payload.startDate, SECONDS) + insideOffset;\n  } else {\n    offsetTimeTop = offsetTimeTopBase;\n  }\n  if (payload.type === targetType) {\n    var appointmentDurationSeconds = intervalDuration(payload, SECONDS);\n    appointmentStartTime = moment(start).add(offsetTimeTop * -1, SECONDS).toDate();\n    appointmentEndTime = moment(start).add(appointmentDurationSeconds - offsetTimeTop, SECONDS).toDate();\n  } else {\n    appointmentStartTime = moment(targetData.startDate).add(insideOffset, SECONDS).toDate();\n    appointmentEndTime = moment(targetData.endDate).add(insideOffset, SECONDS).toDate();\n  }\n  return {\n    appointmentStartTime: appointmentStartTime,\n    appointmentEndTime: appointmentEndTime,\n    offsetTimeTop: offsetTimeTop\n  };\n};\nvar calculateAppointmentTimeBoundaries = function (payload, targetData, targetType, cellDurationMinutes, insidePart, offsetTimeTopBase) {\n  var isDragging = payload.type === VERTICAL_TYPE || payload.type === HORIZONTAL_TYPE;\n  return isDragging ? timeBoundariesByDrag(payload, targetData, targetType, cellDurationMinutes, insidePart, offsetTimeTopBase) : timeBoundariesByResize(payload, targetData, targetType, cellDurationMinutes, insidePart);\n};\nvar calculateInsidePart = function (top, timeTableCellsRects, timeTableIndex) {\n  if (timeTableIndex !== undefined && timeTableIndex !== -1) {\n    var cellRect = timeTableCellsRects[timeTableIndex]();\n    return top > cellRect.top + cellRect.height / 2 ? 1 : 0;\n  }\n  return 0;\n};\nvar calculateDraftAppointments = function (allDayIndex, draftAppointments, startViewDate, endViewDate, excludedDays, viewCellsData, getAllDayCellsElementRects, targetType, cellDurationMinutes, getTableCellElementRects, grouping, resources, groups, groupOrientation, groupedByDate) {\n  if (allDayIndex !== -1 || targetType === VERTICAL_TYPE && getAllDayCellsElementRects.getCellRects.length && intervalDuration(draftAppointments[0].dataItem, HOURS) > 23) {\n    var allDayDrafts = draftAppointments.map(function (draftAppt) {\n      return __assign(__assign({}, draftAppt), {\n        allDay: true\n      });\n    });\n    return {\n      allDayDraftAppointments: allDayRects(allDayDrafts, startViewDate, endViewDate, excludedDays, viewCellsData, getAllDayCellsElementRects, grouping, resources, groups, groupOrientation, groupedByDate),\n      timeTableDraftAppointments: []\n    };\n  }\n  if (targetType === VERTICAL_TYPE || allDayIndex !== -1) {\n    return {\n      allDayDraftAppointments: [],\n      timeTableDraftAppointments: verticalTimeTableRects(draftAppointments, startViewDate, endViewDate, excludedDays, viewCellsData, cellDurationMinutes, getTableCellElementRects, grouping, resources, groups, groupOrientation, groupedByDate)\n    };\n  }\n  return {\n    allDayDraftAppointments: [],\n    timeTableDraftAppointments: horizontalTimeTableRects(draftAppointments, startViewDate, endViewDate, viewCellsData, getTableCellElementRects, grouping, resources, groups, groupOrientation, groupedByDate)\n  };\n};\nvar calculateAppointmentGroups = function (cellGroupingInfo, resources, appointmentData) {\n  if (!cellGroupingInfo) return {};\n  return cellGroupingInfo.reduce(function (acc, group) {\n    var _a;\n    var isMultipleResource = resources.find(function (resource) {\n      return resource.fieldName === group.fieldName;\n    }).allowMultiple;\n    return __assign(__assign({}, acc), (_a = {}, _a[group.fieldName] = isMultipleResource ? updateMultipleResourceInfo(group, appointmentData) : group.id, _a));\n  }, {});\n};\nvar updateMultipleResourceInfo = function (cellResource, appointmentData) {\n  var appointmentGroupItems = appointmentData[cellResource.fieldName];\n  if (appointmentGroupItems.findIndex(function (groupItem) {\n    return groupItem === cellResource.id;\n  }) !== -1) {\n    return appointmentGroupItems;\n  }\n  return [cellResource.id];\n};\nvar appointmentDragged = function (start, startPrev, end, endPrev, groupingInfo, groupingInfoPrev) {\n  if (moment(start).isSame(startPrev) && moment(end).isSame(endPrev) && groupingInfoNotChanged(groupingInfo, groupingInfoPrev)) {\n    return false;\n  }\n  return true;\n};\nvar groupingInfoNotChanged = function (groupingInfo, groupingInfoPrev) {\n  var fields = Object.getOwnPropertyNames(groupingInfo);\n  return fields.every(function (field) {\n    if (Array.isArray(groupingInfo[field]) && Array.isArray(groupingInfoPrev[field])) {\n      return groupingInfo[field].every(function (item, index) {\n        return item === groupingInfoPrev[field][index];\n      });\n    }\n    return groupingInfo[field] === groupingInfoPrev[field];\n  });\n};\nvar isMonthCell = function (otherMonth) {\n  return otherMonth !== undefined;\n};\nvar isShadedAppointment = function (_a, currentTime, shadePreviousAppointments) {\n  var appointmentData = _a.data;\n  var momentCurrentDate = moment(currentTime);\n  if (appointmentData.allDay) {\n    return momentCurrentDate.isAfter(appointmentData.endDate, 'day') && shadePreviousAppointments;\n  }\n  if (momentCurrentDate.isAfter(appointmentData.endDate)) {\n    return shadePreviousAppointments;\n  }\n  return false;\n};\nvar getCurrentTimeIndicatorTop = function (cellData, currentTime) {\n  var top = (currentTime - cellData.startDate.getTime()) * 100 / (cellData.endDate.getTime() - cellData.startDate.getTime());\n  return top < 0 || top > 100 ? undefined : \"\".concat(top, \"%\");\n};\nvar isCellShaded = function (_a, currentTime, shadePreviousCells) {\n  var startDate = _a.startDate,\n    endDate = _a.endDate,\n    otherMonth = _a.otherMonth;\n  var monthCell = isMonthCell(otherMonth);\n  return (startDate.getTime() < currentTime && !monthCell || endDate.getTime() < currentTime && monthCell) && shadePreviousCells;\n};\nvar getAppointmentResources = function (appointment, resources, plainResources) {\n  if (!resources || resources.length === 0 || !plainResources || plainResources.length === 0) return [];\n  return resources.reduce(function (acc, resource) {\n    var appointmentResourceId = appointment[resource.fieldName];\n    if (appointmentResourceId === undefined) return acc;\n    if (resource.allowMultiple && !Array.isArray(appointmentResourceId) || !resource.allowMultiple && Array.isArray(appointmentResourceId)) {\n      // throw error\n      return acc;\n    }\n    if (resource.allowMultiple) {\n      return __spreadArray(__spreadArray([], __read(acc), false), __read(appointmentResourceId.reduce(function (prevResources, itemId) {\n        return addResourceToAppointmentResources(plainResources, prevResources, resource, itemId);\n      }, [])), false);\n    }\n    return addResourceToAppointmentResources(plainResources, acc, resource, appointmentResourceId);\n  }, []);\n};\nvar addResourceToAppointmentResources = function (plainResources, appointmentResources, resource, resourceId) {\n  var currentResource = plainResources.find(function (plainItem) {\n    return resource.fieldName === plainItem.fieldName && plainItem.id === resourceId;\n  });\n  return currentResource ? __spreadArray(__spreadArray([], __read(appointmentResources), false), [currentResource], false) : appointmentResources;\n};\nvar convertResourcesToPlain = function (validResources) {\n  return validResources.reduce(function (acc, resource) {\n    return __spreadArray(__spreadArray([], __read(acc), false), __read(resource.instances.map(function (item) {\n      return item;\n    })), false);\n  }, []);\n};\nvar validateResources = function (resources, mainResourceName, palette) {\n  var isMainResourceDefined = !!mainResourceName;\n  var currentPaletteIndex = 0;\n  return resources.map(function (resource, groupIndex) {\n    var fieldName = resource.fieldName;\n    var isMain = isMainResourceDefined && mainResourceName === fieldName || groupIndex === 0 && !isMainResourceDefined;\n    var title = resource.title || fieldName;\n    var allowMultiple = !!resource.allowMultiple;\n    return {\n      fieldName: fieldName,\n      isMain: isMain,\n      title: title,\n      allowMultiple: allowMultiple,\n      instances: resource.instances.map(function (resourceItem) {\n        var color = resourceItem.color || palette[currentPaletteIndex % palette.length];\n        if (!resourceItem.color) currentPaletteIndex += 1;\n        return {\n          id: resourceItem.id,\n          color: color,\n          fieldName: fieldName,\n          text: resourceItem.text || title || fieldName,\n          title: title,\n          allowMultiple: allowMultiple,\n          isMain: isMain\n        };\n      })\n    };\n  });\n};\nvar addResourcesToAppointments = function (appointments, resources, plainResources) {\n  return [appointments.map(function (appointment) {\n    return __assign(__assign({}, appointment), {\n      resources: getAppointmentResources(appointment.dataItem, resources, plainResources)\n    });\n  })];\n};\nvar toggleExpandedGroups = function (state, _a) {\n  var groupKey = _a.groupKey;\n  var expandedGroups = slice(state.expandedGroups);\n  var groupKeyIndex = expandedGroups.indexOf(groupKey);\n  if (groupKeyIndex > -1) {\n    expandedGroups.splice(groupKeyIndex, 1);\n  } else {\n    expandedGroups.push(groupKey);\n  }\n  return {\n    expandedGroups: expandedGroups\n  };\n};\nvar getDayScaleCellColSpan = function (cellsData) {\n  var firstDate = cellsData[0][0].startDate;\n  var count = 1;\n  while (cellsData[0][count] && moment(cellsData[0][count].startDate).isSame(firstDate, 'day')) {\n    count += 1;\n  }\n  return count;\n};\nvar getDayScaleCells = function (cellsData, groupedByDate) {\n  if (!groupedByDate) {\n    return cellsData[0].map(function (_a, index) {\n      var startDate = _a.startDate,\n        endDate = _a.endDate,\n        today = _a.today,\n        endOfGroup = _a.endOfGroup,\n        groupingInfo = _a.groupingInfo;\n      return {\n        key: index.toString(),\n        startDate: startDate,\n        endDate: endDate,\n        today: today,\n        endOfGroup: endOfGroup,\n        groupingInfo: groupingInfo\n      };\n    });\n  }\n  var prevDate;\n  var colSpan = getDayScaleCellColSpan(cellsData);\n  return cellsData[0].reduce(function (acc, _a, index) {\n    var startDate = _a.startDate,\n      endDate = _a.endDate,\n      today = _a.today;\n    var currentDate = moment(startDate);\n    if (currentDate.isSame(prevDate)) {\n      return acc;\n    }\n    prevDate = currentDate;\n    return __spreadArray(__spreadArray([], __read(acc), false), [{\n      key: index.toString(),\n      startDate: startDate,\n      endDate: endDate,\n      today: today,\n      colSpan: colSpan,\n      endOfGroup: true\n    }], false);\n  }, []);\n};\nvar navigateByOneMonth = function (currentDate, isBackward) {\n  return moment(currentDate)[isBackward ? 'subtract' : 'add'](1, 'month').toDate();\n};\n\n/** @internal */\nvar RecurrenceFrequency;\n(function (RecurrenceFrequency) {\n  RecurrenceFrequency[RecurrenceFrequency[\"Daily\"] = RRULE_REPEAT_TYPES.DAILY] = \"Daily\";\n  RecurrenceFrequency[RecurrenceFrequency[\"Weekly\"] = RRULE_REPEAT_TYPES.WEEKLY] = \"Weekly\";\n  RecurrenceFrequency[RecurrenceFrequency[\"Monthly\"] = RRULE_REPEAT_TYPES.MONTHLY] = \"Monthly\";\n  RecurrenceFrequency[RecurrenceFrequency[\"Yearly\"] = RRULE_REPEAT_TYPES.YEARLY] = \"Yearly\";\n})(RecurrenceFrequency || (RecurrenceFrequency = {}));\nexport { APRIL_DATE, AUGUST_DATE, AUTO_HEIGHT, BASIC_DAILY_COUNT, BASIC_MONTHLY_COUNT, BASIC_WEEKLY_COUNT, BASIC_YEALY_COUNT, CANCEL_BUTTON, CANCEL_COMMAND_BUTTON, CLOSE_COMMAND_BUTTON, COMMIT_COMMAND_BUTTON, DAYS_IN_WEEK, DAYS_OF_WEEK, DAYS_OF_WEEK_ARRAY, DAYS_OF_WEEK_DATES, DAY_LONG_MONTH_LONG_YEAR_OPTIONS, DAY_LONG_MONTH_OPTIONS, DAY_OPTIONS, DAY_SHORT_MONTH_LONG_YEAR_OPTIONS, DAY_SHORT_MONTH_OPTIONS, DAY_SHORT_MONTH_SHORT_YEAR_OPTIONS, DECEMBER_DATE, DEFAULT_RULE_OBJECT, DELETE_BUTTON, DELETE_COMMAND_BUTTON, EMPTY_OPTIONS, END_REPEAT_RADIO_GROUP, FEBRUARY_DATE, FIRST_WEEK, FOURTH_WEEK, FRIDAY_DATE, HORIZONTAL_GROUP_ORIENTATION, HORIZONTAL_TYPE, HORIZONTAL_VIEW_LEFT_OFFSET, HOURS, HOUR_MINUTE_OPTIONS, JANUARY_DATE, JULY_DATE, JUNE_DATE, LAST_WEEK, LONG_MONTH_OPTIONS, LONG_WEEK_DAY_OPTIONS, MARCH_DATE, MAY_DATE, MINUTES, MONDAY_DATE, MONTHLY_RADIO_GROUP, MONTHS, MONTHS_DATES, MONTH_YEAR_OPTIONS, MULTILINE_TEXT_EDITOR, NOVEMBER_DATE, NUMBER_EDITOR, OCTOBER_DATE, OPEN_COMMAND_BUTTON, ORDINARY_LABEL, ORDINARY_TEXT_EDITOR, OUTLINED_SELECT, POSITION_END, POSITION_START, RECURRENCE_EDIT_SCOPE, REPEAT_TYPES, REPEAT_TYPES_ARRAY, RESIZE_BOTTOM, RESIZE_TOP, RRULE_DAYS_OF_WEEK, RRULE_REPEAT_TYPES, RecurrenceFrequency, SATURDAY_DATE, SAVE_BUTTON, SCROLL_OFFSET, SCROLL_SPEED_PX, SECONDS, SECOND_WEEK, SEPTEMBER_DATE, SHORT_MONTH_LONG_YEAR_OPTIONS, SHORT_MONTH_OPTIONS, SHORT_MONTH_SHORT_YEAR_OPTIONS, STANDARD_SELECT, SUNDAY_DATE, THIRD_WEEK, THURSDAY_DATE, TITLE, TITLE_TEXT_EDITOR, TOGGLE_APPOINTMENT_FORM_VISIBILITY, TOGGLE_APPOINTMENT_TOOLTIP_VISIBILITY, TUESDAY_DATE, VERTICAL_GROUP_ORIENTATION, VERTICAL_TYPE, VERTICAL_VIEW_LEFT_OFFSET, VIEW_TYPES, WEDNESDAY_DATE, WEEKDAY_INTERVAL, WEEK_DAY_OPTIONS, WEEK_NUMBER_LABELS, YEARLY_RADIO_GROUP, addAppointment, addDateToKey, addGroupInfoToCell, addGroupInfoToCells, addResourcesToAppointments, adjustByBlocks, allDayCells, allDayPredicate, allDayRects, appointmentDragged, appointments, areDatesSame, autoScroll, availableViews, calculateAllDayDateIntervals, calculateAppointmentGroups, calculateAppointmentLeftAndWidth, calculateAppointmentOffsets, calculateAppointmentTimeBoundaries, calculateAppointmentsMetaData, calculateBlocksLeftLimit, calculateBlocksTotalSize, calculateDraftAppointments, calculateFirstDateOfWeek, calculateIncludedBlockMaxRight, calculateInsidePart, calculateMonthDateIntervals, calculateRectByDateAndGroupIntervals, calculateWeekDateIntervals, callActionIfExists, cancelAddedAppointment, cancelChanges, cellData, cellIndex, cellType, changeAppointment, changeCurrentDate, changeRecurrenceFrequency, changeRecurrenceOptions, changedAppointmentById, checkCellGroupingInfo, checkIsNaturalNumber, checkMultipleResourceFields, computed, containsDSTChange, convertResourcesToPlain, convertToMoment, createAppointmentForest, dayBoundaryPredicate, dayScale, deleteAll, deleteCurrent, deleteCurrentAndFollowing, editAll, editCurrent, editCurrentAndFollowing, endViewDate, excludedIntervals, expandGroupedAppointment, expandGroups, expandViewCellsDataWithGroups, filterByViewBoundaries, filterResourcesByGrouping, findBlockIndexByAppointment, findChildBlocks, findChildrenMaxEndDate, findIncludedBlocks, findMaxReduceValue, findOverlappedAppointments, formatDateTimeGetter, formatDateToString, getAllDayCellIndexByAppointmentData, getAllDayHorizontallyGroupedColumnIndex, getAllDayVerticallyGroupedColumnIndex, getAllDayVerticallyGroupedRowIndex, getAppointmentResources, getAppointmentStyle, getAvailableRecurrenceOptions, getCellKey, getCountDependingOnRecurrenceType, getCurrentTimeIndicatorTop, getDayScaleCellColSpan, getDayScaleCells, getDaysOfWeek, getDaysOfWeekArray, getDaysOfWeekDates, getFrequencyString, getGroupFromResourceInstance, getGroupingInfoFromGroups, getGroupsFromResources, getGroupsLastRow, getHorizontalRectByAppointmentData, getLabelsForAllGroups, getMonthCellIndexByAppointmentData, getMonthHorizontallyGroupedColumnIndex, getMonthVerticallyGroupedRowIndex, getMonths, getMonthsWithOf, getRRuleFrequency, getRRuleSetWithExDates, getRadioGroupDisplayData, getRecurrenceOptions, getRowFromGroups, getTimeTableHeight, getUTCDate, getVerticalCellIndexByAppointmentData, getVerticalRectByAppointmentData, getVerticalRowFromGroups, getViewType, getWeekHorizontallyGroupedColumnIndex, getWeekHorizontallyGroupedRowIndex, getWeekNumberLabels, getWeekVerticallyGroupedColumnIndex, getWeekVerticallyGroupedRowIndex, groupAppointments, groupAppointmentsIntoBlocks, handleChangeFrequency, handleStartDateChange, handleToDayOfWeekChange, handleWeekDaysChange, horizontalTimeTableRects, intervalDuration, intervalIncludes, isAllDayCell, isAllDayElementsMetaActual, isCellShaded, isDateValid, isMidnight, isMonthCell, isOverlappingSubTreeRoot, isPossibleChild, isShadedAppointment, isTimeTableElementsMetaActual, monthCellsData, navigateByOneMonth, normalizeAppointmentDuration, preCommitChanges, prepareToGroupIntoBlocks, prepareVerticalViewCellsData, rearrangeResources, reduceAppointmentByDayBounds, setAppointmentData, setAppointmentMeta, setCurrentViewName, sliceAppointmentByDay, sliceAppointmentByWeek, sliceAppointmentsByBoundaries, sliceAppointmentsByDays, sortAppointments, sortFilteredResources, startEditAppointment, startViewDate, stopEditAppointment, timeBoundariesByDrag, timeBoundariesByResize, timeCellsData, timeScale, toPercentage, toggleExpandedGroups, unwrapGroups, updateAllDayCellElementsMeta, updateBlocksLeft, updateBlocksProportions, updateGroupingWithMainResource, updateTimeCellsData, updateTimeTableCellElementsMeta, validateResources, verticalTimeTableRects, viewBoundText, viewCellsData, viewPredicate };","map":{"version":3,"names":["computed","getters","viewName","baseComputed","defaultValue","currentView","name","toPercentage","value","total","createExcludedInterval","day","start","leftBound","moment","hour","endOf","excludedIntervals","excludedDays","map","sort","a","b","reduce","acc","i","allDays","length","push","inInterval","date","interval","isBetween","undefined","viewPredicate","appointment","left","right","removeAllDayAppointments","end","isAppointmentInBoundary","isAfter","isBefore","isAppointmentInExcludedDays","find","considerAllDayAppointment","diff","allDay","calculateFirstDateOfWeek","currentDate","firstDayOfWeek","currentLocale","locale","updateLocale","week","dow","doy","firstDateOfWeek","startOf","indexOf","slice","forEach","add","toDate","getAppointmentStyle","_a","top","width","height","concat","transform","msTransform","position","expandRecurrenceAppointment","rightBound","rightBoundUTC","getUTCDate","leftBoundUTC","appointmentStartDate","options","__assign","RRule","parseString","rRule","dtstart","correctedOptions","until","rruleSet","getRRuleSetWithExDates","exDate","rrule","datesInBoundaries","between","formatDateToString","appointmentDuration","startDate","index","dataItem","endDate","parentData","key","filterByViewBoundaries","removeAllDay","appointments","filter","appt","Date","UTC","getFullYear","getMonth","getDate","getHours","getMinutes","RRuleSet","split","currentExDate","exdate","utc","format","addDateToKey","prevKey","momentDate","toString","VERTICAL_TYPE","HORIZONTAL_TYPE","SCROLL_OFFSET","SCROLL_SPEED_PX","SECONDS","MINUTES","HOURS","RESIZE_TOP","RESIZE_BOTTOM","POSITION_START","POSITION_END","AUTO_HEIGHT","DAY_OPTIONS","WEEK_DAY_OPTIONS","weekday","SHORT_MONTH_OPTIONS","month","HOUR_MINUTE_OPTIONS","minute","MONTH_YEAR_OPTIONS","year","DAY_SHORT_MONTH_OPTIONS","SHORT_MONTH_LONG_YEAR_OPTIONS","SHORT_MONTH_SHORT_YEAR_OPTIONS","DAY_LONG_MONTH_LONG_YEAR_OPTIONS","DAY_SHORT_MONTH_LONG_YEAR_OPTIONS","DAY_SHORT_MONTH_SHORT_YEAR_OPTIONS","LONG_WEEK_DAY_OPTIONS","LONG_MONTH_OPTIONS","DAY_LONG_MONTH_OPTIONS","EMPTY_OPTIONS","RECURRENCE_EDIT_SCOPE","ALL","CURRENT_AND_FOLLOWING","CURRENT","TOGGLE_APPOINTMENT_FORM_VISIBILITY","TOGGLE_APPOINTMENT_TOOLTIP_VISIBILITY","WEEKDAY_INTERVAL","VERTICAL_VIEW_LEFT_OFFSET","HORIZONTAL_VIEW_LEFT_OFFSET","VERTICAL_GROUP_ORIENTATION","HORIZONTAL_GROUP_ORIENTATION","VIEW_TYPES","MONTH","WEEK","DAY","ALL_DAY_PANEL","MONTH_TYPE","getViewType","currentViewType","isMidnight","hours","minutes","seconds","calculateTextByDays","startViewDate","endViewDate","formatDate","additionalOptions","momentStartViewDate","momentEndViewDate","isSame","calculateTextByMonths","intervalCount","momentCurrentDate","lastMonth","clone","viewBoundText","type","checkCellGroupingInfo","cell","groupingInfo","every","group","id","fieldName","isDateValid","isValid","convertToMoment","areDatesSame","firstDate","secondDate","getTimeTableHeight","timeTableElementsMeta","parentRect","call","containsDSTChange","isStartDST","isDST","isEndDst","subtractSecond","subtract","dayScale","dayCount","excluded","result","findIndex","item","timeScale","startDayHour","endDayHour","cellDuration","startDateOfView","isDSTChange","validDate","timeScaleLastIndex","availableViews","views","viewDisplayName","displayName","view","nextViews","viewCellsData","currTime","days","times","currentTime","cellsAcc","time","rowCells","rowAcc","today","timeCellsData","cellsData","firstViewDate","nextDay","validCellsData","allDayCells","viewCells","endOfGroup","lastRowIndex","lastCellIndex","MAX_WIDTH","INDIRECT_CHILD_LEFT_OFFSET","isAllDayElementsMetaActual","allDayElementsMeta","groupOrientation","groupCount","numberOfRows","isElementsMetaActual","isTimeTableElementsMetaActual","elementsMeta","getCellRects","tableSize","appointmentHeightType","durationRatio","horizontalRectCalculator","viewMetaData","getRectByAppointment","rectByDates","multiline","_b","rectByDatesMeta","cellElementsMeta","_c","parentWidth","resources","reduceValue","offset","fromPrev","toNext","verticalRectCalculator","relativeWidth","relativeLeft","widthMultiplier","validWidth","durationType","oldVerticalRectCalculator","placeAppointmentsNextToEachOther","widthInPx","compareByDay","first","second","compareByAllDay","compareByTime","sortAppointments","byDayPredicate","boundary","isSameOrAfter","findOverlappedAppointments","sortedAppointments","byDay","groups","totalIndex","current","currentGroup","next","maxBoundary","isMidnight$1","maxBoundaryPredicate","calculateAppointmentOffsets","items","groupLength","startIndex","isSameOrBefore","unwrapAppointmentForest","appointmentForests","forestUnwrapped","data","unwrapGroups","apply","__spreadArray","__read","restProps","__rest","intervalIncludes","intervalStart","intervalEnd","createAppointmentForest","appointmentGroups","appointmentGroup","nextItems","roots","children","treeDepth","isDirectChild","hasDirectChild","visitRoots","appointmentTreeRoots","appointmentItems","appointmentNodes","props","appointmentIndex","appointmentOffset","visitAllChildren","parent","visitChild","parentAppointmentIndex","appointmentNode","nextTreeDepth","calculatedTreeDepth","directChildTimeLimit","maxAppointmentTreeDepth","nextChildIndex","isPossibleChild","nextAppointment","nextOffset","nextStart","possibleChildIndex","parentEnd","parentOffset","possibleChild","findMaxReduceValue","maxReduceValue","currentReduceValue","calculateAppointmentsMetaData","indirectChildLeftOffset","appointmentForest","firstNode","calculateRootsMetaData","calculateAppointmentLeftAndWidth","calculateChildrenMetaData","calculateChildMetaData","maxWidth","childIndex","blocks","maxRight","defaultLeft","parentIndex","blockIndex","firstChild","firstChildBlockIndex","hasDirectChildAndInSameBlock","includedInto","parentLeft","calculatedLeft","Math","max","unoccupiedSpace","prepareToGroupIntoBlocks","nodes","overlappingSubTreeRoots","currentBlockEnd","maxOffset","previousSubTreeRoot","isOverlappingSubTreeRoot","overlappingSubTreeRoot","maxChildDate","findChildrenMaxEndDate","previousEndDate","nextData","maxDate","currentMaxDate","child","maxChildrenDate","groupAppointmentsIntoBlocks","findBlockIndexByAppointment","minOffset","size","endForChildren","subTreeRootIndex","subTreeRoot","subTreeRootData","calculateBlockSizeByEndDate","appointmentInBlock","nextBlocks","blockEndDate","maxSize","currentBlock","findIncludedBlocks","groupedIntoBlocks","block","includedBlocks","currentBlockIndex","isIncludedBlock","possibleIncludedBlock","possibleIncludedStart","possibleIncludedEnd","possibleMinOffset","possibleMaxOffset","findChildBlocks","currentIndex","nextBlock","isChildBlock","possibleChildBlock","childStart","childIncludedInto","childMaxOffset","adjustByBlocks","updatedBlocks","dimensionsCalculated","calculateBlocksDimensions","alignBlocksWithPrevious","adjustedByBlocks","adjustAppointmentsByBlocks","updateBlocksProportions","calculateBlocksLeftLimit","calculateBlocksTotalSize","leftLimitCalculated","updateBlocksLeft","nextAppointments","blockLeft","children_1","maxRight_1","calculateIncludedBlockMaxRight","finalMaxRight_1","defaultLeft_1","itemIndex","left_1","redistributeChildBlocks","leftOffset","leftLimit","includedBlock","includedIntoIndex","currentMaxRight","totalSize","calculateSingleBlockTotalSize","calculateSingleBlockLeftLimit","min","parentTotalSize","firstItem","firstItemParentIndex","firstItemParent","parentBlock","createAndAdjustAppointmentForest","baseCalculated","preparedToGroupIntoBlocks","blocksWithIncluded","blocksWithParents","calculateRectByDateAndGroupIntervals","intervals","growDirection","isHorizontal","sorted","grouped","sortedGroup","rectCalculator","groupsCalculated","isAppointmentForestNeeded","unwrappedAppointments","rects","sliceAppointmentByDay","minDuration","isShortOnFirstDay","isShortOnSecondDay","firstAppointmentKey","secondAppointmentKey","dayBoundaryPredicate","dayStart","dayEnd","startDayTime","endDayTime","reduceAppointmentByDayBounds","normalizeAppointmentDuration","getWeekVerticallyGroupedColumnIndex","timeCell","getWeekHorizontallyGroupedColumnIndex","isCorrectGroup","getWeekVerticallyGroupedRowIndex","columnIndex","takePrev","timeTableHeight","timeTableRowIndex","getWeekHorizontallyGroupedRowIndex","isWrongCell","calculateWeekDateIntervals","CELL_GAP_PX","CELL_BOUND_HORIZONTAL_OFFSET_PX","CELL_BOUND_VERTICAL_OFFSET_PX","getVerticalCellIndexByAppointmentData","rowIndex","cellIndex","getCellRect","cellStartDate","cellHeight","timeOffset","topOffset","getVerticalRectByAppointmentData","firstCellRect","lastCellRect","allDayPredicate","getAllDayCellIndexByAppointmentData","getAllDayHorizontallyGroupedColumnIndex","getAllDayVerticallyGroupedColumnIndex","getAllDayVerticallyGroupedRowIndex","viewCellsDataRow","sliceAppointmentsByBoundaries","nextEnd","sliceAppointmentsByDays","DEFAULT_RULE_OBJECT","DAYS_OF_WEEK","MONDAY","TUESDAY","WEDNESDAY","THURSDAY","FRIDAY","SATURDAY","SUNDAY","RRULE_DAYS_OF_WEEK","MO","TU","WE","TH","FR","SA","SU","DAYS_IN_WEEK","DAYS_OF_WEEK_ARRAY","MONTHS","JANUARY","FEBRUARY","MARCH","APRIL","MAY","JUNE","JULY","AUGUST","SEPTEMBER","OCTOBER","NOVEMBER","DECEMBER","RRULE_REPEAT_TYPES","YEARLY","MONTHLY","WEEKLY","DAILY","HOURLY","MINUTELY","REPEAT_TYPES","NEVER","REPEAT_TYPES_ARRAY","WEEK_NUMBER_LABELS","END_REPEAT_RADIO_GROUP","MONTHLY_RADIO_GROUP","YEARLY_RADIO_GROUP","TITLE_TEXT_EDITOR","MULTILINE_TEXT_EDITOR","ORDINARY_TEXT_EDITOR","NUMBER_EDITOR","TITLE","ORDINARY_LABEL","SAVE_BUTTON","DELETE_BUTTON","CANCEL_BUTTON","OUTLINED_SELECT","STANDARD_SELECT","SUNDAY_DATE","MONDAY_DATE","TUESDAY_DATE","WEDNESDAY_DATE","THURSDAY_DATE","FRIDAY_DATE","SATURDAY_DATE","DAYS_OF_WEEK_DATES","JANUARY_DATE","FEBRUARY_DATE","MARCH_DATE","APRIL_DATE","MAY_DATE","JUNE_DATE","JULY_DATE","AUGUST_DATE","SEPTEMBER_DATE","OCTOBER_DATE","NOVEMBER_DATE","DECEMBER_DATE","MONTHS_DATES","FIRST_WEEK","SECOND_WEEK","THIRD_WEEK","FOURTH_WEEK","LAST_WEEK","BASIC_YEALY_COUNT","BASIC_MONTHLY_COUNT","BASIC_WEEKLY_COUNT","BASIC_DAILY_COUNT","sliceAppointmentByWeek","timeBounds","step","pieces","restFields","apptStart","apptEnd","pieceFrom","pieceTo","currentRightBound","getMonthCellIndexByAppointmentData","groupedByDate","dayNumber","weekNumber","floor","dayOfWeek","getMonthHorizontallyGroupedColumnIndex","getMonthVerticallyGroupedRowIndex","totalCellIndex","groupByDate","currentColumnIndex","cellsInGroupRow","isCorrectCell","rowsInOneGroup","currentRowIndex","TOP_CELL_OFFSET","CELL_BOUND_OFFSET_PX","getCellRect$1","getHorizontalRectByAppointmentData","DAY_COUNT","MONTH_LENGTH","monthCellsData","targetDate","currentMonths","firstMonthDate","firstMonthDay","prevMonthDayCount","prevMonth","prevMonthStartDay","daysInMonth","from","trunc","otherMonth","calculateMonthDateIntervals","restArgs","calculateAllDayDateIntervals","getGroupFromResourceInstance","resourceInstance","text","addGroupInfoToCells","sortedResources","viewCellRow","viewCell","groupedCell","addGroupInfoToCell","previousIndex","reduceRight","previousResourceLength","instances","currentGroupingInstance","getCurrentGroup","groupAcc","groupsRow","currentInstance","groupAppointments","mainResource","resource","isMain","belongsToGroup","isBelonging","groupItem","currentMainResourceId","updatedAppointment","rearrangeResourceIds","rearrangeResources","mainResourceId","allowMultiple","currentResourceInstanceId","firstMainResource","el","currentResourceIndex","expandGroupedAppointment","grouping","isGroupedByResource","resourceName","resourceField","accumulatedAppointments","currentAppointment","resourceValue","generateMultipleResourceKey","previousKey","getGroupingInfoFromGroups","groupIndex","currentGroups","getGroupsLastRow","filterResourcesByGrouping","resourceId","sortFilteredResources","getGroupsFromResources","sortedAndFilteredResources","instance","currentResourceNames","expandViewCellsDataWithGroups","expandCellsWithGroupedByDateData","expandHorizontallyGroupedCells","expandVerticallyGroupedCells","cellsRow","groupedCells","viewCellsRow","viewRowIndex","updateGroupingWithMainResource","expandGroups","sliceByDay","slicedAppointments","expandedAppointments","updateTimeTableCellElementsMeta","allDayPanelExists","checkCellElementsMeta","initializeCellElementsData","timeTableWidth","groupSize","validGetCellRects","allDayPanelsLeft","splice","updateAllDayCellElementsMeta","groupHeight","updateTimeCellsData","allDayRects","sliceAppointments","groupedIntervals","verticalTimeTableRects","horizontalTimeTableRects","dateTimeFormatInstance","formatOptions","Intl","DateTimeFormat","formatDateTimeGetter","cache","Map","formatter","nextDate","nextOptions","formatInstance","get","set","getCellKey","rowNumber","groupRow","currentKey","currentRowLength","getRowFromGroups","cellStyle","row","standardWidth","colSpan","getVerticalRowFromGroups","groupingPanelRowSpan","timeTableCellHeight","addAllDayHeight","allDayCellHeight","groupColumn","groupSpan","baseHeight","allDayHeight","rowSpan","getLabelsForSingleGroup","currentGroupIndex","nextGroupIndex","getLabelsForAllGroups","singleGroupHeight","prepareVerticalViewCellsData","allDayCellsData","changeCurrentDate","amount","direction","setCurrentViewName","currentViewName","nextViewName","setAppointmentMeta","prevAppointmentMeta","target","OPEN_COMMAND_BUTTON","CLOSE_COMMAND_BUTTON","DELETE_COMMAND_BUTTON","CANCEL_COMMAND_BUTTON","COMMIT_COMMAND_BUTTON","setAppointmentData","prevAppointmentData","appointmentData","getWeekNumberLabels","getMessage","weekNumberLabel","getDaysOfWeek","daysOfWeekArray","getDaysOfWeekArray","daysOfWeekDates","getDaysOfWeekDates","getDayOfWeek","getMonths","getMonthId","getMonthsWithOf","getMonthWithOf","replace","getAvailableRecurrenceOptions","getCountDependingOnRecurrenceType","frequency","count","checkIsNaturalNumber","number","Number","MAX_SAFE_INTEGER","callActionIfExists","action","payload","isAllDayCell","changeRecurrenceFrequency","rule","freq","bymonthday","bymonth","byweekday","nextRule","getRecurrenceOptions","changeRecurrenceOptions","handleStartDateChange","nextStartDay","handleToDayOfWeekChange","validDayOfWeek","validWeekNumber","rruleDayOfWeek","nth","getRRuleFrequency","repeatType","toUpperCase","getFrequencyString","rRuleFrequency","getRadioGroupDisplayData","recurrenceOptions","stateDayOfWeek","stateWeekNumber","stateDayNumber","firstOption","secondOption","Array","isArray","dayNumberTextField","radioGroupValue","n","handleChangeFrequency","rruleRepeatType","nextRRule","handleWeekDaysChange","currentWeekDay","byWeekDay","isAdded","firstPart","secondPart","checkMultipleResourceFields","resourceFields","field","addAppointment","addedAppointmentData","cancelAddedAppointment","startEditAppointment","prevEditingAppointment","stopEditAppointment","changeAppointment","change","cancelChanges","changedAppointmentById","changes","appointmentId","mergeNewChanges","reduceExDate","prevExDate","boundDate","join","configureExDate","configureDateSequence","prevStartDate","nextStartDate","currentOptions","prevStartDateUTC","dates","all","configureICalendarRules","valueOf","changeCurrentAndFollowing","changeAllAction","getAppointmentSequenceData","initialSequence","currentChildIndex","changedRules","nextExDate","changed","deleteCurrent","deleteAll","deleted","deleteCurrentAndFollowing","editAll","initialRule","editCurrent","added","editCurrentAndFollowing","addedOptions","addedRules","addedAppointment","preCommitChanges","editType","clamp","calculateInsideOffset","targetType","insidePart","cellDurationMinutes","cellType","intervalDuration","clientOffset","bottom","isOver","x","y","cellData","timeTableIndex","allDayIndex","tableWidth","autoScroll","scrollingStrategy","scrollSpeed","scroll","topBoundary","bottomBoundary","changeVerticalScroll","leftBoundary","rightBoundary","changeHorizontalScroll","firstBoundary","secondBoundary","changeScroll","timeBoundariesByResize","targetData","appointmentType","appointmentStartTime","appointmentEndTime","sourceType","insideTopOffset","insideBottomOffset","timeBoundariesByDrag","offsetTimeTopBase","offsetTimeTop","insideOffset","appointmentDurationSeconds","calculateAppointmentTimeBoundaries","isDragging","calculateInsidePart","timeTableCellsRects","cellRect","calculateDraftAppointments","draftAppointments","getAllDayCellsElementRects","getTableCellElementRects","allDayDrafts","draftAppt","allDayDraftAppointments","timeTableDraftAppointments","calculateAppointmentGroups","cellGroupingInfo","isMultipleResource","updateMultipleResourceInfo","cellResource","appointmentGroupItems","appointmentDragged","startPrev","endPrev","groupingInfoPrev","groupingInfoNotChanged","fields","Object","getOwnPropertyNames","isMonthCell","isShadedAppointment","shadePreviousAppointments","getCurrentTimeIndicatorTop","getTime","isCellShaded","shadePreviousCells","monthCell","getAppointmentResources","plainResources","appointmentResourceId","prevResources","itemId","addResourceToAppointmentResources","appointmentResources","currentResource","plainItem","convertResourcesToPlain","validResources","validateResources","mainResourceName","palette","isMainResourceDefined","currentPaletteIndex","title","resourceItem","color","addResourcesToAppointments","toggleExpandedGroups","state","groupKey","expandedGroups","groupKeyIndex","getDayScaleCellColSpan","getDayScaleCells","prevDate","navigateByOneMonth","isBackward","RecurrenceFrequency"],"sources":["/Users/solomon-moulang-lewis/Documents/University/Year 2/Term 2/User interface design/soen357Project/client/node_modules/@devexpress/dx-scheduler-core/src/utils.ts","/Users/solomon-moulang-lewis/Documents/University/Year 2/Term 2/User interface design/soen357Project/client/node_modules/@devexpress/dx-scheduler-core/src/constants.ts","/Users/solomon-moulang-lewis/Documents/University/Year 2/Term 2/User interface design/soen357Project/client/node_modules/@devexpress/dx-scheduler-core/src/plugins/common/helpers.ts","/Users/solomon-moulang-lewis/Documents/University/Year 2/Term 2/User interface design/soen357Project/client/node_modules/@devexpress/dx-scheduler-core/src/plugins/common/computeds.ts","/Users/solomon-moulang-lewis/Documents/University/Year 2/Term 2/User interface design/soen357Project/client/node_modules/@devexpress/dx-scheduler-core/src/plugins/appointments/helpers.ts","/Users/solomon-moulang-lewis/Documents/University/Year 2/Term 2/User interface design/soen357Project/client/node_modules/@devexpress/dx-scheduler-core/src/plugins/week-view/helpers.ts","/Users/solomon-moulang-lewis/Documents/University/Year 2/Term 2/User interface design/soen357Project/client/node_modules/@devexpress/dx-scheduler-core/src/plugins/week-view/computeds.ts","/Users/solomon-moulang-lewis/Documents/University/Year 2/Term 2/User interface design/soen357Project/client/node_modules/@devexpress/dx-scheduler-core/src/plugins/vertical-rect/helpers.ts","/Users/solomon-moulang-lewis/Documents/University/Year 2/Term 2/User interface design/soen357Project/client/node_modules/@devexpress/dx-scheduler-core/src/plugins/all-day-panel/helpers.ts","/Users/solomon-moulang-lewis/Documents/University/Year 2/Term 2/User interface design/soen357Project/client/node_modules/@devexpress/dx-scheduler-core/src/plugins/appointment-form/constants.ts","/Users/solomon-moulang-lewis/Documents/University/Year 2/Term 2/User interface design/soen357Project/client/node_modules/@devexpress/dx-scheduler-core/src/plugins/month-view/helpers.ts","/Users/solomon-moulang-lewis/Documents/University/Year 2/Term 2/User interface design/soen357Project/client/node_modules/@devexpress/dx-scheduler-core/src/plugins/horizontal-rect/helpers.ts","/Users/solomon-moulang-lewis/Documents/University/Year 2/Term 2/User interface design/soen357Project/client/node_modules/@devexpress/dx-scheduler-core/src/plugins/month-view/computeds.ts","/Users/solomon-moulang-lewis/Documents/University/Year 2/Term 2/User interface design/soen357Project/client/node_modules/@devexpress/dx-scheduler-core/src/plugins/all-day-panel/computeds.ts","/Users/solomon-moulang-lewis/Documents/University/Year 2/Term 2/User interface design/soen357Project/client/node_modules/@devexpress/dx-scheduler-core/src/plugins/integrated-grouping/helpers.ts","/Users/solomon-moulang-lewis/Documents/University/Year 2/Term 2/User interface design/soen357Project/client/node_modules/@devexpress/dx-scheduler-core/src/plugins/integrated-grouping/computeds.ts","/Users/solomon-moulang-lewis/Documents/University/Year 2/Term 2/User interface design/soen357Project/client/node_modules/@devexpress/dx-scheduler-core/src/plugins/common/calculate-rects.ts","/Users/solomon-moulang-lewis/Documents/University/Year 2/Term 2/User interface design/soen357Project/client/node_modules/@devexpress/dx-scheduler-core/src/plugins/scheduler-core/helpers.ts","/Users/solomon-moulang-lewis/Documents/University/Year 2/Term 2/User interface design/soen357Project/client/node_modules/@devexpress/dx-scheduler-core/src/plugins/scheduler-core/computeds.ts","/Users/solomon-moulang-lewis/Documents/University/Year 2/Term 2/User interface design/soen357Project/client/node_modules/@devexpress/dx-scheduler-core/src/plugins/grouping-panel/utils.ts","/Users/solomon-moulang-lewis/Documents/University/Year 2/Term 2/User interface design/soen357Project/client/node_modules/@devexpress/dx-scheduler-core/src/plugins/week-view/utils.ts","/Users/solomon-moulang-lewis/Documents/University/Year 2/Term 2/User interface design/soen357Project/client/node_modules/@devexpress/dx-scheduler-core/src/plugins/view-state/reducers.ts","/Users/solomon-moulang-lewis/Documents/University/Year 2/Term 2/User interface design/soen357Project/client/node_modules/@devexpress/dx-scheduler-core/src/plugins/appointment-tooltip/reducers.ts","/Users/solomon-moulang-lewis/Documents/University/Year 2/Term 2/User interface design/soen357Project/client/node_modules/@devexpress/dx-scheduler-core/src/plugins/appointment-tooltip/constants.ts","/Users/solomon-moulang-lewis/Documents/University/Year 2/Term 2/User interface design/soen357Project/client/node_modules/@devexpress/dx-scheduler-core/src/plugins/appointment-form/reducers.ts","/Users/solomon-moulang-lewis/Documents/University/Year 2/Term 2/User interface design/soen357Project/client/node_modules/@devexpress/dx-scheduler-core/src/plugins/appointment-form/utils.ts","/Users/solomon-moulang-lewis/Documents/University/Year 2/Term 2/User interface design/soen357Project/client/node_modules/@devexpress/dx-scheduler-core/src/plugins/appointment-form/helpers.ts","/Users/solomon-moulang-lewis/Documents/University/Year 2/Term 2/User interface design/soen357Project/client/node_modules/@devexpress/dx-scheduler-core/src/plugins/editing-state/reducers.ts","/Users/solomon-moulang-lewis/Documents/University/Year 2/Term 2/User interface design/soen357Project/client/node_modules/@devexpress/dx-scheduler-core/src/plugins/editing-state/computeds.ts","/Users/solomon-moulang-lewis/Documents/University/Year 2/Term 2/User interface design/soen357Project/client/node_modules/@devexpress/dx-scheduler-core/src/plugins/editing-state/helpers.ts","/Users/solomon-moulang-lewis/Documents/University/Year 2/Term 2/User interface design/soen357Project/client/node_modules/@devexpress/dx-scheduler-core/src/plugins/drag-drop-provider/helpers.ts","/Users/solomon-moulang-lewis/Documents/University/Year 2/Term 2/User interface design/soen357Project/client/node_modules/@devexpress/dx-scheduler-core/src/plugins/current-time-indicator/helpers.tsx","/Users/solomon-moulang-lewis/Documents/University/Year 2/Term 2/User interface design/soen357Project/client/node_modules/@devexpress/dx-scheduler-core/src/plugins/resources/helpers.ts","/Users/solomon-moulang-lewis/Documents/University/Year 2/Term 2/User interface design/soen357Project/client/node_modules/@devexpress/dx-scheduler-core/src/plugins/resources/computeds.ts","/Users/solomon-moulang-lewis/Documents/University/Year 2/Term 2/User interface design/soen357Project/client/node_modules/@devexpress/dx-scheduler-core/src/plugins/grouping-state/reducers.ts","/Users/solomon-moulang-lewis/Documents/University/Year 2/Term 2/User interface design/soen357Project/client/node_modules/@devexpress/dx-scheduler-core/src/plugins/common/utils.ts","/Users/solomon-moulang-lewis/Documents/University/Year 2/Term 2/User interface design/soen357Project/client/node_modules/@devexpress/dx-scheduler-core/src/plugins/date-navigator/helpers.ts","/Users/solomon-moulang-lewis/Documents/University/Year 2/Term 2/User interface design/soen357Project/client/node_modules/@devexpress/dx-scheduler-core/src/types/appointment-form.types.ts"],"sourcesContent":["import moment from 'moment';\nimport { CustomFunction, PureComputed } from '@devexpress/dx-core';\nimport { RRule, RRuleSet } from 'rrule';\nimport {\n  ComputedHelperFn, ViewPredicateFn,\n  CalculateFirstDateOfWeekFn, AppointmentMoment,\n  Interval, Rect, AppointmentKey,\n} from './types';\n\nexport const computed: ComputedHelperFn = (getters, viewName, baseComputed, defaultValue) => {\n  if (getters.currentView.name !== viewName && !!defaultValue) {\n    return defaultValue;\n  }\n  return baseComputed(getters, viewName);\n};\n\nexport const toPercentage: PureComputed<\n  [number, number]\n> = (value, total) => (value * 100) / total;\n\nconst createExcludedInterval: CustomFunction<\n  [number, moment.Moment], Interval\n> = (day, start) => {\n  const leftBound = moment(start.day(day));\n  return [\n    leftBound,\n    moment(leftBound).hour(start.hour()).endOf('day'),\n  ];\n};\n\nexport const excludedIntervals: PureComputed<\n  [number[], moment.Moment], Interval[]\n> = (excludedDays, start) => excludedDays\n  .map(day => (day === 0 ? 7 : day))\n  .sort((a, b) => a - b)\n  .reduce((acc, day, i, allDays) => {\n    if (i && day === allDays[i - 1] + 1) {\n      acc[acc.length - 1][1].day(day);\n    } else {\n      acc.push(createExcludedInterval(day, start));\n    }\n    return acc;\n  }, [] as Interval[]);\n\nconst inInterval = (\n  date: moment.Moment, interval: Interval,\n) => date.isBetween(interval[0], interval[1], undefined, '[]');\n\nexport const viewPredicate: ViewPredicateFn = (\n  appointment, left, right,\n  excludedDays = [],\n  removeAllDayAppointments = false,\n) => {\n  const { start, end } = appointment;\n  const isAppointmentInBoundary = end.isAfter(left as Date)\n    && start.isBefore(right as Date);\n\n  const isAppointmentInExcludedDays = !!excludedIntervals(excludedDays, moment(left as Date))\n    .find(interval => (inInterval(start, interval) && inInterval(end, interval)));\n  const considerAllDayAppointment = removeAllDayAppointments\n    ? moment(end).diff(start, 'hours') < 24 && !appointment.allDay\n    : true;\n\n  return isAppointmentInBoundary && !isAppointmentInExcludedDays && considerAllDayAppointment;\n};\n\nexport const calculateFirstDateOfWeek: CalculateFirstDateOfWeekFn = (\n  currentDate, firstDayOfWeek, excludedDays = [],\n) => {\n  const currentLocale = moment.locale();\n  moment.updateLocale('tmp-locale', {\n    week: { dow: firstDayOfWeek, doy: 1 }, // `doy` is required for TS using\n  });\n  const firstDateOfWeek = moment(currentDate as Date).startOf('week');\n  if (excludedDays.indexOf(firstDayOfWeek) !== -1) {\n    excludedDays.slice().sort().forEach((day) => {\n      if (day === firstDateOfWeek.day()) {\n        firstDateOfWeek.add(1, 'days');\n      }\n    });\n  }\n  moment.locale(currentLocale);\n\n  return firstDateOfWeek.toDate();\n};\n\nexport const getAppointmentStyle: PureComputed<\n  [Rect], React.CSSProperties\n> = ({\n  top, left,\n  width, height,\n}) => ({\n  height,\n  width: `${width}%`,\n  transform: `translateY(${top}px)`,\n  msTransform: `translateY(${top}px)`,\n  left: `${left}%`,\n  position: 'absolute',\n});\n\nconst expandRecurrenceAppointment = (\n  appointment: AppointmentMoment, leftBound: Date, rightBound: Date,\n) => {\n  const rightBoundUTC = moment(getUTCDate(rightBound)).toDate();\n  const leftBoundUTC = moment(getUTCDate(leftBound)).toDate();\n  const appointmentStartDate = moment(appointment.start).toDate();\n  const options = {\n    ...RRule.parseString(appointment.rRule),\n    dtstart: moment(getUTCDate(appointmentStartDate)).toDate(),\n  };\n  const correctedOptions = options.until\n    ? { ...options, until: moment(getUTCDate(options.until)).toDate() }\n    : options;\n\n  const rruleSet = getRRuleSetWithExDates(appointment.exDate);\n\n  rruleSet.rrule(new RRule(correctedOptions));\n\n  // According to https://github.com/jakubroztocil/rrule#important-use-utc-dates\n  // we have to format the dates we get from RRuleSet to get local dates\n  const datesInBoundaries = rruleSet.between(leftBoundUTC as Date, rightBoundUTC as Date, true)\n    .map(formatDateToString);\n  if (datesInBoundaries.length === 0) return [];\n\n  const appointmentDuration = moment(appointment.end)\n    .diff(appointment.start, 'minutes');\n\n  return datesInBoundaries.map((startDate, index) => ({\n    ...appointment,\n    dataItem: {\n      ...appointment.dataItem,\n      startDate: moment(startDate).toDate(),\n      endDate: moment(startDate).add(appointmentDuration, 'minutes').toDate(),\n      parentData: appointment.dataItem,\n    },\n    start: moment(startDate),\n    end: moment(startDate).add(appointmentDuration, 'minutes'),\n    key: `${appointment.key}_rec_${index}`,\n  }));\n};\n\nexport const filterByViewBoundaries: PureComputed<\n  [AppointmentMoment, Date, Date, number[], boolean], AppointmentMoment[]\n> = (appointment, leftBound, rightBound, excludedDays, removeAllDay) => {\n  let appointments = [appointment];\n  if (appointment.rRule) {\n    appointments = expandRecurrenceAppointment(\n      appointment as AppointmentMoment, leftBound as Date, rightBound as Date,\n    );\n  }\n  return appointments.filter(appt => viewPredicate(\n    appt, leftBound, rightBound, excludedDays, removeAllDay,\n  ));\n};\n\nexport const getUTCDate: PureComputed<[Date], number> = date =>\n  Date.UTC(\n    date.getFullYear(),\n    date.getMonth(),\n    date.getDate(),\n    date.getHours(),\n    date.getMinutes(),\n);\n\nexport const getRRuleSetWithExDates: PureComputed<\n  [string | undefined], RRuleSet\n> = (exDate) => {\n  const rruleSet = new RRuleSet();\n  if (exDate) {\n    exDate.split(',').map((date: string) => {\n      const currentExDate = moment(date).toDate();\n      rruleSet.exdate(moment(getUTCDate(currentExDate)).toDate());\n    });\n  }\n  return rruleSet;\n};\n\nexport const formatDateToString = (date: Date | string | number) => moment.utc(date).format('YYYY-MM-DDTHH:mm');\n\nexport const addDateToKey: PureComputed<\n  [AppointmentKey, moment.Moment], AppointmentKey\n> = (prevKey, momentDate) => `${prevKey}_${momentDate.toDate().toString()}`;\n","import { GroupOrientation } from './types';\n\nexport const VERTICAL_TYPE = 'vertical';\nexport const HORIZONTAL_TYPE = 'horizontal';\n\nexport const SCROLL_OFFSET = 50;\nexport const SCROLL_SPEED_PX = 15;\n\nexport const SECONDS = 'seconds';\nexport const MINUTES = 'minutes';\nexport const HOURS = 'hours';\n\nexport const RESIZE_TOP = 'resize-start';\nexport const RESIZE_BOTTOM = 'resize-end';\n\nexport const POSITION_START = 'start';\nexport const POSITION_END = 'end';\n\nexport const AUTO_HEIGHT = 'auto';\n\nexport const DAY_OPTIONS = { day: 'numeric' } as const;\nexport const WEEK_DAY_OPTIONS = { weekday: 'short' } as const;\nexport const SHORT_MONTH_OPTIONS = { month: 'short' } as const;\nexport const HOUR_MINUTE_OPTIONS = { hour: 'numeric', minute: 'numeric' } as const;\nexport const MONTH_YEAR_OPTIONS = { month: 'long', year: 'numeric' } as const;\nexport const DAY_SHORT_MONTH_OPTIONS = { day: 'numeric', month: 'short' } as const;\nexport const SHORT_MONTH_LONG_YEAR_OPTIONS = { month: 'short', year: 'numeric' } as const;\nexport const SHORT_MONTH_SHORT_YEAR_OPTIONS = { month: 'short', year: '2-digit' } as const;\nexport const DAY_LONG_MONTH_LONG_YEAR_OPTIONS = {\n  day: 'numeric', month: 'long', year: 'numeric',\n} as const;\nexport const DAY_SHORT_MONTH_LONG_YEAR_OPTIONS = {\n  day: 'numeric', month: 'short', year: 'numeric',\n} as const;\nexport const DAY_SHORT_MONTH_SHORT_YEAR_OPTIONS = {\n  day: 'numeric', month: 'short', year: '2-digit',\n} as const;\nexport const LONG_WEEK_DAY_OPTIONS = { weekday: 'long' } as const;\nexport const LONG_MONTH_OPTIONS = { month: 'long' } as const;\nexport const DAY_LONG_MONTH_OPTIONS = { day: 'numeric', month: 'long' } as const;\nexport const EMPTY_OPTIONS = {} as const;\n\nexport const RECURRENCE_EDIT_SCOPE = {\n  ALL: 'all',\n  CURRENT_AND_FOLLOWING: 'currentAndFollowing',\n  CURRENT: 'current',\n} as const;\n\nexport const TOGGLE_APPOINTMENT_FORM_VISIBILITY = 'toggleAppointmentFormVisibility';\nexport const TOGGLE_APPOINTMENT_TOOLTIP_VISIBILITY = 'toggleAppointmentTooltipVisibility';\n\nexport const WEEKDAY_INTERVAL = 'weekdayInterval';\n\nexport const VERTICAL_VIEW_LEFT_OFFSET = 80;\nexport const HORIZONTAL_VIEW_LEFT_OFFSET = 0;\n\nexport const VERTICAL_GROUP_ORIENTATION = 'Vertical' as GroupOrientation;\nexport const HORIZONTAL_GROUP_ORIENTATION = 'Horizontal' as GroupOrientation;\n\nexport const VIEW_TYPES = {\n  MONTH: 'month',\n  WEEK: 'week',\n  DAY: 'day',\n  ALL_DAY_PANEL: 'allDayPanel',\n} as const;\n","import moment from 'moment';\nimport { PureComputed } from '@devexpress/dx-core';\nimport {\n  VERTICAL_TYPE, HORIZONTAL_TYPE, DAY_OPTIONS, SHORT_MONTH_OPTIONS,\n  DAY_SHORT_MONTH_OPTIONS, SHORT_MONTH_LONG_YEAR_OPTIONS,\n  SHORT_MONTH_SHORT_YEAR_OPTIONS, MONTH_YEAR_OPTIONS,\n  DAY_LONG_MONTH_LONG_YEAR_OPTIONS, DAY_SHORT_MONTH_SHORT_YEAR_OPTIONS,\n  DAY_SHORT_MONTH_LONG_YEAR_OPTIONS, LONG_WEEK_DAY_OPTIONS, EMPTY_OPTIONS,\n  WEEKDAY_INTERVAL,\n} from '../../constants';\nimport {\n  ViewBoundTextFn, FormatterFn, ViewCell,\n  AppointmentMoment, Group, SchedulerDateTime, CellElementsMeta,\n} from '../../types';\n\nconst MONTH_TYPE = 'month';\n\nexport const getViewType: PureComputed<[string], string> = (currentViewType) => {\n  if (currentViewType === MONTH_TYPE) return HORIZONTAL_TYPE;\n  return VERTICAL_TYPE;\n};\n\nexport const isMidnight: PureComputed<\n  [Date], boolean\n> = (date) => {\n  const momentDate = moment(date as Date);\n  return momentDate.hours() === 0 && momentDate.minutes() === 0 && momentDate.seconds() === 0;\n};\n\nconst calculateTextByDays: PureComputed<\n  [Date, Date, FormatterFn, object], string\n> = (startViewDate, endViewDate, formatDate, additionalOptions) => {\n  const momentStartViewDate = moment(startViewDate as Date);\n  const momentEndViewDate = moment(endViewDate as Date);\n\n  if (momentStartViewDate.isSame(momentEndViewDate, 'day')) {\n    return formatDate(momentStartViewDate.toDate(), {\n      ...DAY_LONG_MONTH_LONG_YEAR_OPTIONS, ...additionalOptions,\n    });\n  }\n  if (momentStartViewDate.isSame(momentEndViewDate, 'year')) {\n    if (momentStartViewDate.isSame(momentEndViewDate, 'month')) {\n      return `${\n        formatDate(momentStartViewDate.toDate(), DAY_OPTIONS)\n      }-${\n        formatDate(momentEndViewDate.toDate(), DAY_OPTIONS)\n      } ${\n        formatDate(momentEndViewDate.toDate(), MONTH_YEAR_OPTIONS)\n      }`;\n    }\n    return `${\n      formatDate(momentStartViewDate.toDate(), DAY_SHORT_MONTH_OPTIONS)\n    } - ${\n      formatDate(momentEndViewDate.toDate(), DAY_SHORT_MONTH_LONG_YEAR_OPTIONS)\n    }`;\n  }\n  return `${\n    formatDate(momentStartViewDate.toDate(), DAY_SHORT_MONTH_SHORT_YEAR_OPTIONS)\n  } - ${\n    formatDate(momentEndViewDate.toDate(), DAY_SHORT_MONTH_SHORT_YEAR_OPTIONS)\n  }`;\n};\n\nconst calculateTextByMonths: PureComputed<\n  [Date, number, FormatterFn], string\n> = (currentDate, intervalCount, formatDate) => {\n  const momentCurrentDate = moment(currentDate as Date);\n\n  if (intervalCount === 1) {\n    return formatDate(momentCurrentDate.toDate(), MONTH_YEAR_OPTIONS);\n  }\n  const lastMonth = momentCurrentDate.clone().add(intervalCount - 1, 'month');\n  if (momentCurrentDate.isSame(lastMonth, 'year')) {\n    return `${\n      formatDate(momentCurrentDate.toDate(), SHORT_MONTH_OPTIONS)\n    }-${\n      formatDate(lastMonth.toDate(), SHORT_MONTH_LONG_YEAR_OPTIONS)\n    }`;\n  }\n  return `${\n    formatDate(momentCurrentDate.toDate(), SHORT_MONTH_SHORT_YEAR_OPTIONS)\n  } - ${\n    formatDate(lastMonth.toDate(), SHORT_MONTH_SHORT_YEAR_OPTIONS)\n  }`;\n};\n\nexport const viewBoundText: ViewBoundTextFn = (\n  startViewDate, endViewDate, type, currentDate, intervalCount, formatDate,\n) => (type !== 'month'\n  ? calculateTextByDays(\n    startViewDate, endViewDate, formatDate,\n    type === WEEKDAY_INTERVAL ? LONG_WEEK_DAY_OPTIONS : EMPTY_OPTIONS,\n  )\n  : calculateTextByMonths(currentDate, intervalCount, formatDate)\n);\n\nexport const checkCellGroupingInfo: PureComputed<\n  [ViewCell, AppointmentMoment], boolean\n> = (cell, appointment) => cell.groupingInfo\n  ? cell.groupingInfo.every((group: Group) => (\n    group.id === appointment[group.fieldName]\n  ))\n  : true;\n\nexport const isDateValid: PureComputed<\n  [Date], boolean\n> = date => moment(date as Date).isValid();\n\nexport const convertToMoment: PureComputed<\n  [SchedulerDateTime], moment.Moment\n> = date => moment(date as SchedulerDateTime);\n\nexport const areDatesSame: PureComputed<\n  [SchedulerDateTime, SchedulerDateTime], boolean\n> = (firstDate, secondDate) => moment(firstDate as SchedulerDateTime)\n  .isSame(secondDate as SchedulerDateTime, 'date');\n\nexport const getTimeTableHeight: PureComputed<\n  [CellElementsMeta], number | undefined\n> = timeTableElementsMeta => timeTableElementsMeta.parentRect?.().height;\n\nexport const containsDSTChange = (date: SchedulerDateTime) => {\n  const momentDate = moment(date);\n  momentDate.startOf('day');\n  const isStartDST = momentDate.isDST();\n\n  momentDate.endOf('day');\n  const isEndDst = momentDate.isDST();\n\n  return (isStartDST && !isEndDst) || (!isStartDST && isEndDst);\n};\n","import moment from 'moment';\nimport { PureComputed } from '@devexpress/dx-core';\nimport {\n  TimeScale, SchedulerDateTime, ViewCell,\n  DayScaleFn, TimeScaleFn, ViewCellsDataFn, AllDayCell,\n  SchedulerView,\n} from '../../types';\nimport { calculateFirstDateOfWeek } from '../../utils';\nimport {\n  isMidnight,\n  containsDSTChange,\n} from './helpers';\n\nconst subtractSecond: PureComputed<\n  [Date]\n> = date => moment(date as Date).subtract(1, 'second').toDate();\n\nexport const dayScale: DayScaleFn = (\n  currentDate,\n  firstDayOfWeek,\n  dayCount,\n  excluded = [],\n) => {\n  const result: Date[] = [];\n  const date = firstDayOfWeek !== undefined\n    ? moment(calculateFirstDateOfWeek(currentDate, firstDayOfWeek, excluded) as Date)\n    : moment(currentDate as Date);\n  for (let index = 0; index < dayCount; index += 1) {\n    if (excluded.findIndex(item => item === date.day()) === -1) {\n      result.push(date.toDate());\n    }\n    date.add(1, 'days');\n  }\n  return result;\n};\n\nexport const timeScale: TimeScaleFn = (\n  currentDate,\n  firstDayOfWeek,\n  startDayHour,\n  endDayHour,\n  cellDuration,\n  excludedDays,\n) => {\n  const result: TimeScale[] = [];\n  const startDateOfView = firstDayOfWeek !== undefined\n    ? calculateFirstDateOfWeek(currentDate, firstDayOfWeek, excludedDays)\n    : currentDate;\n\n  const isDSTChange = containsDSTChange(startDateOfView as Date);\n  const validDate = moment(startDateOfView as Date);\n  if (isDSTChange) {\n    validDate.subtract(1, 'day');\n  }\n\n  const left = moment(validDate)\n    .startOf('day')\n    .add(startDayHour, 'hour');\n  const right = moment(validDate)\n    .startOf('day')\n    .add(endDayHour, 'hour');\n\n  while (left.isBefore(right)) {\n    const startDate = left.toDate();\n    left.add(cellDuration, 'minutes');\n    result.push({ start: startDate, end: left.toDate() });\n  }\n\n  const timeScaleLastIndex = result.length - 1;\n  if (isMidnight(result[timeScaleLastIndex].end)) {\n    result[timeScaleLastIndex].end = subtractSecond(result[timeScaleLastIndex].end) as Date;\n  }\n  return result;\n};\n\nexport const availableViews: PureComputed<\n  [SchedulerView[], string, string], SchedulerView[]\n> = (views, viewName, viewDisplayName) => {\n  if (!views) return [{ name: viewName, displayName: viewDisplayName }];\n  if (views.findIndex(view => viewName === view.name) === -1) {\n    const nextViews = views.slice();\n    nextViews.push({ name: viewName, displayName: viewDisplayName });\n    return nextViews;\n  }\n  return views;\n};\n\nexport const viewCellsData: ViewCellsDataFn = (\n  currentDate, firstDayOfWeek,\n  dayCount, excludedDays,\n  startDayHour, endDayHour,\n  cellDuration, currTime,\n) => {\n  const days = dayScale(currentDate, firstDayOfWeek!, dayCount!, excludedDays);\n  const times = timeScale(\n    currentDate, firstDayOfWeek!, startDayHour, endDayHour, cellDuration, excludedDays,\n  );\n  const currentTime = moment(currTime as SchedulerDateTime);\n  return times.reduce((cellsAcc, time) => {\n    const start = moment(time.start);\n    const end = moment(time.end);\n    const rowCells = days.reduce((rowAcc, day) => {\n      const startDate = moment(day).hours(start.hours()).minutes(start.minutes()).toDate();\n      const endDate = moment(day).hours(end.hours()).minutes(end.minutes()).toDate();\n      const today = currentTime.isSame(startDate, 'day');\n      rowAcc.push({ startDate, endDate, today });\n      return rowAcc;\n    }, [] as ViewCell[]);\n    cellsAcc.push(rowCells);\n    return cellsAcc;\n  }, [] as ViewCell[][]);\n};\n\nexport const timeCellsData: PureComputed<\n  [ViewCell[][], number, number, number, number], ViewCell[][]\n> = (\n  cellsData, startDayHour, endDayHour, cellDuration, currentTime,\n) => {\n  const { startDate: firstViewDate } = cellsData[0][0];\n  if (!containsDSTChange(firstViewDate)) {\n    return cellsData;\n  }\n\n  const nextDay = moment(firstViewDate)\n    .add(1, 'day')\n    .toDate();\n  const validCellsData = viewCellsData(\n    nextDay, undefined, 1, [], startDayHour, endDayHour, cellDuration, currentTime,\n  );\n\n  return validCellsData;\n};\n\nexport const allDayCells: PureComputed<\n  [ViewCell[][]], AllDayCell[][]\n> = viewCells => [viewCells[0].map(cell => ({\n  startDate: moment(cell.startDate).startOf('day').toDate(),\n  endDate: moment(cell.startDate).add(1, 'day').startOf('day').toDate(),\n  groupingInfo: cell.groupingInfo,\n  endOfGroup: cell.endOfGroup,\n}))];\n\nexport const startViewDate: PureComputed<\n  [ViewCell[][]], Date\n> = viewCells => moment(viewCells[0][0].startDate).toDate();\n\nexport const endViewDate: PureComputed<\n  [ViewCell[][]], Date\n> = (viewCells) => {\n  const lastRowIndex = viewCells.length - 1;\n  const lastCellIndex = viewCells[lastRowIndex].length - 1;\n  return subtractSecond(viewCells[lastRowIndex][lastCellIndex].endDate!);\n};\n","import { PureComputed, CustomFunction } from '@devexpress/dx-core';\nimport {\n  ViewCell, CellElementsMeta, GroupOrientation, AppointmentMoment,\n  AppointmentUnwrappedGroup, ViewMetaData, ElementRect, AppointmentGroup,\n  AppointmentForestRoots, CalculatedTreeNode, TreeNodeWithOverlappingSubTreeRoots,\n  TreeNodeInBlock, AppointmentBlock, IncludedBlock, BlockWithChildren, CalculatedBlock,\n  GroupedIntoBlocksForest, AppointmentIndex,\n\n  VisitRootsFn, CalculateRectByDateAndGroupIntervalsFn, CreateAppointmentForestFn,\n  VisitChildFn, VisitAllChildrenFn, IsPossibleChildFn, FindMaxReduceValueFn,\n  CalculateAppointmentsMetaDataFn, CalulateRootsMetaDataFn, CalculateChildMetaDataFn,\n  CalculateChildrenMetaDataFn, CalculateAppointmentLeftAndWidthFn, PrepareToGroupIntoBlocksFn,\n  IsOverlappingSubTreeRootFn, FindChildrenMaxEndDateFn, GroupAppointmentsIntoBlocksFn,\n  CalculateBlockSizeBEndDateFn, FindBlockIndexByAppointmentFn, FindIncludedBlocksFn,\n  IsIncludedBlockFn, FindChildBlocksFn, IsChildBlockFn, AdjustByBlocksFn,\n  CalculateBlockDimensionsFn, AlignBlocksWithPreviousFn, AdjustAppointemntsByBlocksFn,\n  RedistributeBlocksFn, CalculateIncludedBlockMaxRightFn, CalculateBlocksTotalSizeFn,\n  CalculateSingleBlockTotalSizeFn, CalculateBlocksLeftLimitFn, CalculateSingleBlockLeftLimitFn,\n  UpdateBlocksProportionsFn, UpdateBlocksLeftFn, CreateAndAdjustAppointmentForestFn,\n} from '../../types';\nimport { HORIZONTAL_GROUP_ORIENTATION, HORIZONTAL_TYPE, VERTICAL_TYPE } from '../../constants';\nimport { toPercentage } from '../../utils';\nimport moment from 'moment';\n\nconst MAX_WIDTH = 1;\nconst INDIRECT_CHILD_LEFT_OFFSET = 0.05;\n\nexport const isAllDayElementsMetaActual: PureComputed<\n  [ViewCell[][], CellElementsMeta, GroupOrientation, number], boolean\n> = (viewCellsData, allDayElementsMeta, groupOrientation, groupCount) => {\n  const numberOfRows = groupOrientation === HORIZONTAL_GROUP_ORIENTATION ? 1 : groupCount;\n  return isElementsMetaActual(viewCellsData, allDayElementsMeta, numberOfRows);\n};\n\nexport const isTimeTableElementsMetaActual: PureComputed<\n  [ViewCell[][], CellElementsMeta], boolean\n> = (viewCellsData, timeTableElementsMeta) => isElementsMetaActual(\n  viewCellsData, timeTableElementsMeta, viewCellsData.length,\n);\n\nconst isElementsMetaActual: PureComputed<\n  [ViewCell[][], CellElementsMeta, number], boolean\n> = (viewCellsData, elementsMeta, numberOfRows) => {\n  if (!elementsMeta?.getCellRects) {\n    return false;\n  }\n\n  const tableSize = numberOfRows * viewCellsData[0].length;\n  return tableSize === elementsMeta.getCellRects.length;\n};\n\nconst appointmentHeightType = (appointment: AppointmentMoment, cellDuration: number) => {\n  const durationRatio = appointment.end.clone().diff(appointment.start, 'minutes') / cellDuration;\n  if (durationRatio === 1) return 'middle';\n  if (durationRatio > 1) return 'long';\n  return 'short';\n};\n\nconst horizontalRectCalculator: CustomFunction<\n  [AppointmentUnwrappedGroup, ViewMetaData, any], ElementRect\n> = (\n  appointment,\n  viewMetaData,\n  {\n    rectByDates: getRectByAppointment,\n    multiline,\n    rectByDatesMeta: {\n      cellElementsMeta,\n      viewCellsData,\n    },\n  },\n) => {\n  const {\n    top, left,\n    width, height, parentWidth,\n  } = getRectByAppointment(\n    appointment,\n    viewMetaData,\n    {\n      multiline,\n      cellElementsMeta,\n      viewCellsData,\n    },\n  );\n\n  return {\n    resources: appointment.resources,\n    top: top + ((height / appointment.reduceValue) * appointment.offset),\n    height: height / appointment.reduceValue,\n    left: toPercentage(left, parentWidth),\n    width: toPercentage(width, parentWidth),\n    dataItem: appointment.dataItem,\n    fromPrev: appointment.fromPrev,\n    toNext: appointment.toNext,\n    type: HORIZONTAL_TYPE,\n    key: appointment.key,\n  };\n};\n\nconst verticalRectCalculator: CustomFunction<\n  [AppointmentUnwrappedGroup, ViewMetaData, any], ElementRect\n> = (\n  appointment,\n  viewMetaData,\n  {\n    rectByDates: getRectByAppointment,\n    multiline,\n    rectByDatesMeta: {\n      viewCellsData,\n      cellDuration,\n      cellElementsMeta,\n      excludedDays,\n    },\n  },\n) => {\n  const {\n    top, left,\n    width, height, parentWidth,\n  } = getRectByAppointment(\n    appointment,\n    viewMetaData,\n    {\n      multiline,\n      viewCellsData,\n      cellDuration,\n      excludedDays,\n      cellElementsMeta,\n    },\n  );\n\n  const { offset, width: relativeWidth, left: relativeLeft  } = appointment;\n  const widthMultiplier = (relativeWidth! * 5 / 3 + relativeLeft!) <= 1 ? 5 / 3 : 1;\n  let validWidth = widthMultiplier === 5 / 3\n    ? widthMultiplier * relativeWidth! : relativeWidth! + 0.02;\n  if (validWidth + relativeLeft! > 1) {\n    validWidth = 1 - relativeLeft!;\n  }\n\n  return {\n    resources: appointment.resources,\n    top,\n    height,\n    left: toPercentage(left + relativeLeft! * width, parentWidth),\n    width: toPercentage(validWidth! * width, parentWidth),\n    dataItem: appointment.dataItem,\n    fromPrev: appointment.fromPrev,\n    toNext: appointment.toNext,\n    durationType: appointmentHeightType(appointment, cellDuration),\n    type: VERTICAL_TYPE,\n    offset,\n    key: appointment.key,\n  };\n};\n\nconst oldVerticalRectCalculator: CustomFunction<\n  [AppointmentUnwrappedGroup, ViewMetaData, any], ElementRect\n> = (\n  appointment,\n  viewMetaData,\n  {\n    rectByDates: getRectByAppointment,\n    multiline,\n    rectByDatesMeta: {\n      viewCellsData,\n      cellDuration,\n      cellElementsMeta,\n      excludedDays,\n      placeAppointmentsNextToEachOther,\n    },\n  },\n) => {\n  const {\n    top, left,\n    width, height, parentWidth,\n  } = getRectByAppointment(\n    appointment,\n    viewMetaData,\n    {\n      multiline,\n      viewCellsData,\n      cellDuration,\n      excludedDays,\n      cellElementsMeta,\n      placeAppointmentsNextToEachOther,\n    },\n  );\n\n  const widthInPx = width / appointment.reduceValue;\n\n  return {\n    resources: appointment.resources,\n    top,\n    height,\n    left: toPercentage(left + (widthInPx * appointment.offset), parentWidth),\n    width: toPercentage(widthInPx, parentWidth),\n    dataItem: appointment.dataItem,\n    fromPrev: appointment.fromPrev,\n    toNext: appointment.toNext,\n    durationType: appointmentHeightType(appointment, cellDuration),\n    type: VERTICAL_TYPE,\n    key: appointment.key,\n  };\n};\n\nconst compareByDay: PureComputed<\n  [AppointmentMoment, AppointmentMoment], number\n> = (first, second) => {\n  if (first.start.isBefore(second.start, 'day')) return -1;\n  if (first.start.isAfter(second.start, 'day')) return 1;\n  return 0;\n};\n\nconst compareByAllDay: PureComputed<\n  [AppointmentMoment, AppointmentMoment], number\n> = (first, second) => {\n  if (first.allDay && !second.allDay) return -1;\n  if (!first.allDay && second.allDay) return 1;\n  return 0;\n};\n\nconst compareByTime: PureComputed<\n  [AppointmentMoment, AppointmentMoment], number\n> = (first, second) => {\n  if (first.start.isBefore(second.start)) return -1;\n  if (first.start.isAfter(second.start)) return 1;\n  if (first.end.isBefore(second.end)) return 1;\n  if (first.end.isAfter(second.end)) return -1;\n  return 0;\n};\n\nexport const sortAppointments: PureComputed<\n  [AppointmentMoment[]], AppointmentMoment[]\n> = appointments => appointments\n  .slice().sort((a, b) => compareByDay(a, b) || compareByAllDay(a, b) || compareByTime(a, b));\n\nconst byDayPredicate: PureComputed<\n  [moment.Moment, moment.Moment], boolean\n> = (boundary, date) => (\n  boundary.isSameOrAfter(date, 'day')\n  && !boundary.isSame(boundary.clone().startOf('day'))\n);\n\nexport const findOverlappedAppointments: CustomFunction<\n  [AppointmentMoment[], boolean], any[]\n> = (sortedAppointments, byDay = false) => {\n  const appointments = sortedAppointments.slice();\n  const groups: AppointmentMoment[][] = [];\n  let totalIndex = 0;\n\n  while (totalIndex < appointments.length) {\n    groups.push([]);\n    const current = appointments[totalIndex];\n    const currentGroup = groups[groups.length - 1];\n    let next = appointments[totalIndex + 1];\n    let maxBoundary = current.end;\n\n    currentGroup.push(current);\n    totalIndex += 1;\n    while (next && (maxBoundary.isAfter(next.start)\n      || (byDay && byDayPredicate(maxBoundary, next.start)))) {\n      currentGroup.push(next);\n      if (maxBoundary.isBefore(next.end)) maxBoundary = next.end;\n      totalIndex += 1;\n      next = appointments[totalIndex];\n    }\n  }\n  return groups;\n};\n\nconst isMidnight: PureComputed<\n  [moment.Moment], boolean\n> = date => date.isSame(date.clone().startOf('day'));\n\nconst maxBoundaryPredicate: PureComputed<\n  [moment.Moment, Date], boolean\n> = (maxBoundary, startDate) => ((maxBoundary.isBefore(startDate as Date, 'day'))\n  || (isMidnight(maxBoundary) && maxBoundary.isSame(startDate as Date, 'day')));\n\nexport const calculateAppointmentOffsets: CustomFunction<\n  [any[], boolean], AppointmentGroup[]\n> = (groups, byDay = false) => groups.map((items) => {\n  let offset = 0;\n  let reduceValue = 1;\n  const appointments = items.map((appointment: any) => ({ ...appointment }));\n  const groupLength = appointments.length;\n  for (let startIndex = 0; startIndex < groupLength; startIndex += 1) {\n    const appointment = appointments[startIndex];\n    if (appointment.offset === undefined) {\n      let maxBoundary = appointment.end;\n      appointment.offset = offset;\n      for (let index = startIndex + 1; index < groupLength; index += 1) {\n        if (appointments[index].offset === undefined) {\n          if ((!byDay && maxBoundary.isSameOrBefore(appointments[index].start))\n            || (byDay && maxBoundaryPredicate(maxBoundary, appointments[index].start))) {\n            maxBoundary = appointments[index].end;\n            appointments[index].offset = offset;\n          }\n        }\n      }\n\n      offset += 1;\n      if (reduceValue < offset) reduceValue = offset;\n    }\n  }\n  return { items: appointments, reduceValue };\n});\n\nconst unwrapAppointmentForest: PureComputed<\n  [GroupedIntoBlocksForest[]], AppointmentUnwrappedGroup[]\n> = (appointmentForests) => {\n  const forestUnwrapped = appointmentForests.map(({ items, reduceValue }) => ({\n    reduceValue,\n    items: items.map(({ data }) => ({ ...data })),\n  }));\n  return unwrapGroups(forestUnwrapped);\n};\n\nexport const unwrapGroups: PureComputed<\n  [AppointmentGroup[]], AppointmentUnwrappedGroup[]\n> = groups => groups.reduce((acc, { items, reduceValue }) => {\n  acc.push(...items.map(({ start, end, dataItem, offset, resources, key, ...restProps }) => ({\n    start, end, dataItem, offset, reduceValue, resources,\n    fromPrev: moment(start).diff(dataItem.startDate, 'minutes') > 1,\n    toNext: moment(dataItem.endDate).diff(end, 'minutes') > 1,\n    key,\n    ...restProps,\n  })));\n  return acc;\n}, [] as AppointmentUnwrappedGroup[]);\n\nexport const intervalIncludes: PureComputed<\n  [moment.Moment, moment.Moment, moment.Moment], boolean\n> = (intervalStart, intervalEnd, date) => date\n  .isBetween(intervalStart, intervalEnd, undefined, '[)');\n\nexport const createAppointmentForest: CreateAppointmentForestFn = (\n  appointmentGroups, cellDuration,\n) => appointmentGroups.map((appointmentGroup) => {\n  const { items } = appointmentGroup;\n  let nextItems;\n  let roots;\n  if (items.length === 1) {\n    nextItems = [{\n      data: items[0], children: [], treeDepth: 0, isDirectChild: false, hasDirectChild: false,\n    }];\n    roots = [0];\n  } else {\n    const {\n      appointments, roots: appointmentTreeRoots,\n    } = visitRoots(items, cellDuration) as AppointmentForestRoots;\n    nextItems = appointments;\n    roots = appointmentTreeRoots;\n  }\n  return {\n    ...appointmentGroup,\n    items: nextItems,\n    roots,\n  };\n});\n\nconst visitRoots: VisitRootsFn = (appointmentItems, cellDuration) => {\n  const appointmentNodes: any[] = appointmentItems.map(props => ({\n    data: props,\n  }));\n\n  const roots = appointmentNodes.reduce((acc, appointment, appointmentIndex) => {\n    const { offset: appointmentOffset } = appointment.data;\n\n    if (appointmentOffset === 0) {\n      if (appointmentIndex + 1 === appointmentNodes.length) {\n        appointment.children = [];\n        appointment.hasDirectChild = false;\n        appointment.treeDepth = 0;\n      } else {\n        appointment.treeDepth = visitAllChildren(\n          appointmentNodes, appointmentIndex, cellDuration, 0,\n        );\n      }\n\n      appointment.parent = undefined;\n      appointment.isDirectChild = false;\n      return [...acc, appointmentIndex];\n    }\n    return acc;\n  }, []);\n  return { appointments: appointmentNodes, roots };\n};\n\nconst visitChild: VisitChildFn = (\n  appointmentNodes, index, parentAppointmentIndex, cellDuration, isDirectChild, treeDepth,\n) => {\n  const appointmentNode = appointmentNodes[index];\n  appointmentNode.isDirectChild = isDirectChild;\n  appointmentNode.parent = parentAppointmentIndex;\n  const nextTreeDepth = treeDepth + 1;\n  const { end } = appointmentNode.data;\n\n  if (index === appointmentNodes.length - 1\n    || end.isSameOrBefore(appointmentNodes[index + 1].data.start)) {\n    appointmentNode.children = [];\n    appointmentNode.treeDepth = 0;\n    appointmentNode.hasDirectChild = false;\n    return nextTreeDepth;\n  }\n\n  const calculatedTreeDepth = visitAllChildren(\n    appointmentNodes, index, cellDuration, treeDepth,\n  );\n\n  appointmentNode.treeDepth = calculatedTreeDepth;\n  return calculatedTreeDepth + 1;\n};\n\nconst visitAllChildren: VisitAllChildrenFn = (\n  appointmentNodes, appointmentIndex, cellDuration, treeDepth,\n) => {\n  const appointment = appointmentNodes[appointmentIndex];\n  const { end, offset: appointmentOffset, start } = appointment.data;\n  const directChildTimeLimit = moment(start).add(cellDuration, 'minutes');\n  let maxAppointmentTreeDepth = 0;\n  const children = [] as AppointmentIndex[];\n\n  let nextChildIndex = appointmentIndex + 1;\n  while (isPossibleChild(appointmentNodes, nextChildIndex, end, appointmentOffset)) {\n    const nextAppointment = appointmentNodes[nextChildIndex];\n    const { offset: nextOffset, start: nextStart } = nextAppointment.data;\n\n    if (nextOffset === appointmentOffset + 1) {\n      const isDirectChild = intervalIncludes(start, directChildTimeLimit, nextStart);\n      const nextTreeDepth = visitChild(\n        appointmentNodes, nextChildIndex, appointmentIndex, cellDuration, isDirectChild, treeDepth,\n      );\n\n      if (maxAppointmentTreeDepth < nextTreeDepth) {\n        maxAppointmentTreeDepth = nextTreeDepth;\n      }\n      children.push(nextChildIndex);\n    }\n    nextChildIndex += 1;\n  }\n  appointment.hasDirectChild = children.length !== 0 && appointmentNodes[children[0]].isDirectChild;\n  appointment.children = children;\n\n  return maxAppointmentTreeDepth;\n};\n\nexport const isPossibleChild: IsPossibleChildFn = (\n  appointments, possibleChildIndex, parentEnd, parentOffset,\n) => {\n  const possibleChild = appointments[possibleChildIndex];\n  return (\n    possibleChildIndex < appointments.length\n    && possibleChild.data.offset !== parentOffset\n    && possibleChild.data.start.isBefore(parentEnd)\n  );\n};\n\nexport const findMaxReduceValue: FindMaxReduceValueFn =\n  appointmentGroups => appointmentGroups.reduce((maxReduceValue, group) => {\n    const currentReduceValue = group.reduceValue;\n    return maxReduceValue > currentReduceValue ? maxReduceValue : currentReduceValue;\n  }, 1);\n\nexport const calculateAppointmentsMetaData: CalculateAppointmentsMetaDataFn = (\n  appointmentGroups, indirectChildLeftOffset,\n) => appointmentGroups.map((appointmentForest) => {\n  const { items, roots } = appointmentForest;\n  const firstNode = items[0];\n  return {\n    ...appointmentForest,\n    items: items.length === 1\n      ? [{\n        ...firstNode,\n        data: {\n          ...firstNode.data,\n          left: 0,\n          width: 1,\n        },\n      }]\n      : calculateRootsMetaData(items, roots, indirectChildLeftOffset) as CalculatedTreeNode[],\n  };\n});\n\nconst calculateRootsMetaData: CalulateRootsMetaDataFn = (\n  appointmentNodes, roots, indirectChildLeftOffset,\n) => {\n  const appointments = appointmentNodes.map(props => ({ ...props })) as CalculatedTreeNode[];\n\n  roots.forEach((appointmentIndex) => {\n    const appointment = appointments[appointmentIndex];\n    const { left, width } = calculateAppointmentLeftAndWidth(\n      appointments, undefined, appointment, MAX_WIDTH, indirectChildLeftOffset, undefined,\n    );\n    appointment.data.left = left;\n    appointment.data.width = width;\n    calculateChildrenMetaData(appointments, appointment, MAX_WIDTH, indirectChildLeftOffset);\n  });\n  return appointments;\n};\n\nconst calculateChildMetaData: CalculateChildMetaDataFn = (\n  appointmentNodes, appointmentIndex, maxWidth, indirectChildLeftOffset,\n) => {\n  const appointment = appointmentNodes[appointmentIndex];\n  const { left, width } = calculateAppointmentLeftAndWidth(\n    appointmentNodes, undefined, appointment, maxWidth, indirectChildLeftOffset, undefined,\n  );\n  appointment.data.left = left;\n  appointment.data.width = width;\n\n  calculateChildrenMetaData(\n    appointmentNodes, appointment, maxWidth, indirectChildLeftOffset,\n  );\n};\n\nconst calculateChildrenMetaData: CalculateChildrenMetaDataFn = (\n  appointmentNodes, appointmentNode, maxWidth, indirectChildLeftOffset,\n) => {\n  appointmentNode.children.forEach((childIndex) => {\n    calculateChildMetaData(appointmentNodes, childIndex, maxWidth, indirectChildLeftOffset);\n  });\n};\n\nexport const calculateAppointmentLeftAndWidth: CalculateAppointmentLeftAndWidthFn = (\n  appointmentNodes, blocks, appointmentNode, maxRight, indirectChildLeftOffset, defaultLeft,\n) => {\n  const {\n    hasDirectChild, treeDepth, isDirectChild, parent: parentIndex, children, blockIndex,\n  } = appointmentNode as TreeNodeInBlock;\n  const firstChild = appointmentNodes[children[0]];\n  const firstChildBlockIndex = (firstChild as TreeNodeInBlock)?.blockIndex;\n\n  const hasDirectChildAndInSameBlock = hasDirectChild\n    && (firstChildBlockIndex === undefined || (blockIndex === firstChildBlockIndex\n      || blocks![firstChildBlockIndex].includedInto === blockIndex\n      || maxRight === 1));\n\n  if (parentIndex === undefined) {\n    return ({\n      width: hasDirectChildAndInSameBlock ? maxRight / (treeDepth + 1) : maxRight,\n      left: 0,\n    });\n  }\n\n  const parent = appointmentNodes[parentIndex];\n  const {\n    width: parentWidth,\n    left: parentLeft,\n  } = parent.data;\n  const calculatedLeft = isDirectChild\n    ? parentLeft + parentWidth : parentLeft + indirectChildLeftOffset;\n  const left = defaultLeft !== undefined ? Math.max(defaultLeft, calculatedLeft) : calculatedLeft;\n  const unoccupiedSpace = maxRight - left;\n\n  return ({\n    width: hasDirectChildAndInSameBlock ? unoccupiedSpace / (treeDepth + 1) : unoccupiedSpace,\n    left,\n  });\n};\n\nexport const prepareToGroupIntoBlocks: PrepareToGroupIntoBlocksFn =\n  appointments => appointments.map((appointmentForest) => {\n    const { items: nodes } = appointmentForest;\n    const appointmentNodes = nodes.map(props => ({\n      ...props,\n    })) as TreeNodeWithOverlappingSubTreeRoots[];\n\n    appointmentNodes.forEach((appointmentNode, index) => {\n      if (index === 0) {\n        appointmentNode.overlappingSubTreeRoots = [];\n        return;\n      }\n      const overlappingSubTreeRoots = [] as any[];\n      const { offset: appointmentOffset, end } = appointmentNode.data;\n\n      let nextChildIndex = index + 1;\n      let currentBlockEnd;\n      while (isPossibleChild(appointmentNodes, nextChildIndex, end, appointmentOffset)) {\n        const nextAppointment = appointmentNodes[nextChildIndex];\n        if (nextAppointment.data.offset < appointmentOffset\n          && nextAppointment.maxOffset === undefined) {\n          nextAppointment.maxOffset = appointmentOffset;\n        }\n\n        const previousSubTreeRoot = overlappingSubTreeRoots.length > 0\n          ? appointmentNodes[overlappingSubTreeRoots[overlappingSubTreeRoots.length - 1]]\n          : undefined;\n        if (isOverlappingSubTreeRoot(\n          appointmentNode, nextAppointment, previousSubTreeRoot, currentBlockEnd,\n        )) {\n          overlappingSubTreeRoots.push(nextChildIndex);\n          nextAppointment.overlappingSubTreeRoot = true;\n          const maxChildDate = findChildrenMaxEndDate(appointmentNodes, nextAppointment);\n          if (!currentBlockEnd || currentBlockEnd.isBefore(maxChildDate)) {\n            currentBlockEnd = maxChildDate;\n          }\n        }\n        nextChildIndex += 1;\n      }\n      appointmentNode.overlappingSubTreeRoots = overlappingSubTreeRoots;\n    });\n    return {\n      ...appointmentForest,\n      items: appointmentNodes,\n    };\n  });\n\nexport const isOverlappingSubTreeRoot: IsOverlappingSubTreeRootFn = (\n  appointmentNode, nextAppointment, previousSubTreeRoot, previousEndDate,\n) => {\n  const {\n    overlappingSubTreeRoot, maxOffset, data: nextData,\n  } = nextAppointment;\n  const { offset: nextOffset, start: nextStart } = nextData;\n  const { offset } = appointmentNode.data;\n\n  return (\n    nextOffset < offset\n      && !overlappingSubTreeRoot\n      && (maxOffset === undefined || maxOffset >= offset)\n      && (!previousSubTreeRoot\n        || (previousSubTreeRoot.data.offset >= nextOffset\n        && nextStart.isSameOrAfter(previousEndDate)))\n  );\n};\n\nexport const findChildrenMaxEndDate: FindChildrenMaxEndDateFn = (\n  appointmentNodes, appointmentNode,\n) => {\n  const { children, data } = appointmentNode;\n  const { end } = data;\n\n  const maxDate = children.reduce((currentMaxDate, childIndex) => {\n    const child = appointmentNodes[childIndex];\n    const maxChildrenDate = findChildrenMaxEndDate(appointmentNodes, child);\n    if (maxChildrenDate.isAfter(currentMaxDate)) {\n      return maxChildrenDate;\n    }\n    return currentMaxDate;\n  }, end);\n  return maxDate;\n};\n\nexport const groupAppointmentsIntoBlocks: GroupAppointmentsIntoBlocksFn =\n  appointmentForests => appointmentForests.map((appointmentForest) => {\n    const { items, reduceValue } = appointmentForest;\n    const { blocks: nextBlocks, appointments } = items.reduce((acc, appointment, index) => {\n      const blocks = acc.blocks.slice();\n      const {\n        treeDepth, data, overlappingSubTreeRoots,\n      } = appointment;\n      const { offset, start, end } = data;\n      let blockIndex = findBlockIndexByAppointment(blocks, appointment);\n\n      if (blockIndex < 0) {\n        blocks.push({\n          start, end, minOffset: offset, maxOffset: offset + treeDepth,\n          size: treeDepth + 1, items: [], endForChildren: end,\n        });\n        blockIndex = blocks.length - 1;\n      }\n\n      blocks[blockIndex].items.push(index);\n\n      overlappingSubTreeRoots.forEach((subTreeRootIndex) => {\n        const subTreeRoot = items[subTreeRootIndex];\n        const { data: subTreeRootData } = subTreeRoot;\n        blocks.push({\n          start: subTreeRootData.start, end,\n          minOffset: subTreeRootData.offset, maxOffset: offset - 1,\n          size: calculateBlockSizeByEndDate(items, subTreeRoot, end), items: [],\n          endForChildren: subTreeRootData.end,\n        });\n      });\n      const appointmentInBlock = { ...appointment, blockIndex };\n\n      return {\n        blocks,\n        appointments: [...acc.appointments, appointmentInBlock],\n      };\n    }, {\n      blocks: [{\n        start: items[0].data.start,\n        end: items[0].data.end,\n        minOffset: 0,\n        maxOffset: reduceValue - 1,\n        size: reduceValue,\n        items: [],\n        endForChildren: items[0].data.end,\n      }] as AppointmentBlock[],\n      appointments: [] as TreeNodeInBlock[],\n    });\n    return {\n      blocks: nextBlocks,\n      appointmentForest: {\n        ...appointmentForest,\n        items: appointments,\n      },\n    };\n  });\n\nconst calculateBlockSizeByEndDate: CalculateBlockSizeBEndDateFn = (\n  appointmentNodes, subTreeRoot, blockEndDate,\n) => {\n  const { children, data } = subTreeRoot;\n  const { start } = data;\n\n  if (children.length === 0) {\n    if (blockEndDate.isAfter(start)) {\n      return 1;\n    }\n    return 0;\n  }\n  const maxSize = Math.max(\n    ...children.map(childIndex => calculateBlockSizeByEndDate(\n      appointmentNodes, appointmentNodes[childIndex], blockEndDate),\n    ),\n  );\n\n  if (blockEndDate.isSameOrBefore(start) && maxSize === 0) {\n    return 0;\n  }\n  return maxSize + 1;\n};\n\nexport const findBlockIndexByAppointment: FindBlockIndexByAppointmentFn = (\n  blocks, appointment,\n) => {\n  const { start, offset } = appointment.data;\n\n  let blockIndex = blocks.length - 1;\n  while (blockIndex >= 0) {\n    const currentBlock = blocks[blockIndex];\n    if (intervalIncludes(currentBlock.start, currentBlock.end, start)\n      && offset >= currentBlock.minOffset && offset <= currentBlock.maxOffset &&\n      (!appointment.overlappingSubTreeRoot ||\n        appointment.overlappingSubTreeRoot && !currentBlock.items.length)\n    ) {\n      break;\n    }\n    blockIndex -= 1;\n  }\n\n  return blockIndex;\n};\n\nexport const findIncludedBlocks: FindIncludedBlocksFn = (groupedIntoBlocks) => {\n  return groupedIntoBlocks.map(({ blocks, appointmentForest }) => {\n    const nextBlocks = blocks.map(props => ({ ...props })) as IncludedBlock[];\n\n    nextBlocks.forEach((block, blockIndex) => {\n      block.includedBlocks = [];\n      for (\n        let currentBlockIndex = blockIndex + 1;\n        currentBlockIndex < nextBlocks.length;\n        currentBlockIndex += 1\n      ) {\n        const currentBlock = nextBlocks[currentBlockIndex];\n        if (isIncludedBlock(block, currentBlock)) {\n          block.includedBlocks.push(currentBlockIndex);\n          currentBlock.includedInto = blockIndex;\n        }\n      }\n    });\n    return {\n      blocks: nextBlocks, appointmentForest,\n    };\n  });\n};\n\nconst isIncludedBlock: IsIncludedBlockFn = (block, possibleIncludedBlock) => {\n  const { start, end, minOffset, maxOffset } = block;\n  const {\n    start: possibleIncludedStart, end: possibleIncludedEnd,\n    minOffset: possibleMinOffset, maxOffset: possibleMaxOffset,\n  } = possibleIncludedBlock;\n  return intervalIncludes(start, end, possibleIncludedStart)\n    && intervalIncludes(start, end, possibleIncludedEnd)\n    && possibleMaxOffset <= maxOffset && possibleMinOffset >= minOffset;\n};\n\nexport const findChildBlocks: FindChildBlocksFn = (groupedIntoBlocks) => {\n  return groupedIntoBlocks.map(({ blocks, appointmentForest }) => {\n    const nextBlocks = blocks.map(props => ({ ...props })) as BlockWithChildren[];\n\n    nextBlocks.forEach((block, index) => {\n      block.children = [];\n      for (let currentIndex = index + 1; currentIndex < nextBlocks.length; currentIndex += 1) {\n        const nextBlock = nextBlocks[currentIndex];\n\n        if (isChildBlock(block, nextBlock)) {\n          block.children.push(currentIndex);\n          nextBlock.parent = index;\n        }\n      }\n      return block;\n    });\n    return {\n      appointmentForest, blocks: nextBlocks,\n    };\n  });\n};\n\nconst isChildBlock: IsChildBlockFn = (block, possibleChildBlock) => {\n  const { start, endForChildren, minOffset, includedInto } = block;\n  const {\n    start: childStart, includedInto: childIncludedInto, maxOffset: childMaxOffset,\n  } = possibleChildBlock;\n  return intervalIncludes(start, endForChildren, childStart)\n    && childMaxOffset + 1 === minOffset\n    && (\n      childIncludedInto === undefined\n      || childIncludedInto === includedInto\n    );\n};\n\nexport const adjustByBlocks: AdjustByBlocksFn = (\n  groupedIntoBlocks, indirectChildLeftOffset,\n) => {\n  const updatedBlocks = groupedIntoBlocks.map(({ blocks, appointmentForest }) => {\n    const dimensionsCalculated = calculateBlocksDimensions(blocks, appointmentForest.items);\n\n    return {\n      blocks: alignBlocksWithPrevious(dimensionsCalculated, appointmentForest.items),\n      appointmentForest,\n    };\n  });\n  const adjustedByBlocks = updatedBlocks.map(({ blocks, appointmentForest }) => {\n    return {\n      ...appointmentForest,\n      items: adjustAppointmentsByBlocks(\n        appointmentForest.items, blocks, indirectChildLeftOffset,\n        ) as TreeNodeInBlock[],\n    };\n  });\n  return adjustedByBlocks;\n};\n\nconst calculateBlocksDimensions: CalculateBlockDimensionsFn = (\n  blocks, appointments,\n) => updateBlocksProportions(calculateBlocksLeftLimit(\n  calculateBlocksTotalSize(blocks), appointments,\n));\n\nconst alignBlocksWithPrevious: AlignBlocksWithPreviousFn = (blocks, appointments) => {\n  const nextBlocks = blocks.map(({ right, ...restProps }) => ({ ...restProps }));\n\n  const leftLimitCalculated = calculateBlocksLeftLimit(\n    updateBlocksLeft(nextBlocks as CalculatedBlock[], appointments), appointments,\n  );\n  return updateBlocksProportions(leftLimitCalculated);\n};\n\nconst adjustAppointmentsByBlocks: AdjustAppointemntsByBlocksFn = (\n  appointments, blocks, indirectChildLeftOffset,\n) => {\n  const nextAppointments = appointments.map(props => ({ ...props }));\n  const nextBlocks = blocks.map(props => ({ ...props }));\n\n  nextBlocks.forEach((block, index) => {\n    if (index !== 0) {\n      const { items, left: blockLeft, right, children } = block;\n      const maxRight = calculateIncludedBlockMaxRight(nextBlocks, block);\n      const finalMaxRight = maxRight * right;\n      const defaultLeft = blockLeft! * maxRight;\n\n      items.forEach((appointmentIndex, itemIndex) => {\n        const appointment = nextAppointments[appointmentIndex];\n        if (itemIndex === 0) {\n          const { left, width } = calculateAppointmentLeftAndWidth(\n            nextAppointments, nextBlocks, appointment,\n            finalMaxRight, indirectChildLeftOffset, defaultLeft,\n          );\n          appointment.data.left = left;\n          appointment.data.width = width;\n          if (defaultLeft !== left) {\n            children.forEach((childIndex) => {\n              redistributeChildBlocks(nextBlocks, childIndex, left / maxRight);\n            });\n          }\n        } else {\n          const {\n            left, width,\n          } = calculateAppointmentLeftAndWidth(\n            nextAppointments, nextBlocks, appointment,\n            finalMaxRight, indirectChildLeftOffset, undefined,\n          );\n          appointment.data.left = left;\n          appointment.data.width = width;\n        }\n      });\n    }\n  });\n  blocks[0].items.forEach((appointmentIndex) => {\n    const appointment = nextAppointments[appointmentIndex];\n    const {\n      left, width,\n    } = calculateAppointmentLeftAndWidth(\n      nextAppointments, blocks, appointment, 1, indirectChildLeftOffset, undefined,\n    );\n    appointment.data.left = left;\n    appointment.data.width = width;\n  });\n  return nextAppointments;\n};\n\nconst redistributeChildBlocks: RedistributeBlocksFn = (blocks, blockIndex, right) => {\n  const block = blocks[blockIndex];\n  const { leftOffset, size, leftLimit, children } = block;\n  block.right = right;\n  const width = size + leftOffset;\n  const relativeWidth = right - leftLimit;\n  const left = right - relativeWidth * size / width;\n  block.left = left;\n  children.forEach((childIndex) => {\n    redistributeChildBlocks(blocks, childIndex, left);\n  });\n};\n\nexport const calculateIncludedBlockMaxRight: CalculateIncludedBlockMaxRightFn = (\n  blocks, includedBlock,\n) => {\n  const { includedInto: includedIntoIndex } = includedBlock;\n  if (includedIntoIndex === undefined) {\n    return 1;\n  }\n\n  const includedInto = blocks[includedIntoIndex];\n  const currentMaxRight = includedInto.right;\n  return currentMaxRight * calculateIncludedBlockMaxRight(blocks, includedInto);\n\n};\n\nexport const calculateBlocksTotalSize: CalculateBlocksTotalSizeFn = (blocks) => {\n  const result = blocks.map((block) => {\n    const totalSize = calculateSingleBlockTotalSize(blocks, block);\n    return {\n      ...block,\n      totalSize,\n      leftOffset: totalSize - block.size,\n    };\n  });\n  return result;\n};\n\nconst calculateSingleBlockTotalSize: CalculateSingleBlockTotalSizeFn = (\n  blocks, block,\n) => {\n  const { children, size } = block;\n  if (children.length === 0) {\n    return size;\n  }\n  return Math.max(\n    ...children.map(childIndex => calculateSingleBlockTotalSize(blocks, blocks[childIndex])),\n  ) + size;\n};\n\nexport const calculateBlocksLeftLimit: CalculateBlocksLeftLimitFn = (\n  blocks, appointments,\n) => (blocks as CalculatedBlock[]).map((block) => {\n  const leftLimit = calculateSingleBlockLeftLimit(blocks, appointments, block);\n  return {\n    ...block,\n    leftLimit,\n  };\n});\n\nconst calculateSingleBlockLeftLimit: CalculateSingleBlockLeftLimitFn = (\n  blocks, appointments, block,\n) => {\n  const { children, items, left } = block as CalculatedBlock;\n  if (children.length === 0) {\n    return left !== undefined\n      ? Math.min(left, appointments[items[0]].data.left)\n      : appointments[items[0]].data.left;\n  }\n  return Math.min(\n    ...children.map(childIndex => calculateSingleBlockLeftLimit(\n      blocks, appointments, blocks[childIndex],\n    )),\n  );\n};\n\nexport const updateBlocksProportions: UpdateBlocksProportionsFn = (blocks) => {\n  const nextBlocks = (blocks as CalculatedBlock[]).map(props => ({ ...props }));\n\n  nextBlocks.forEach((block) => {\n    const { parent: parentIndex, leftLimit, leftOffset, totalSize } = block;\n    if (parentIndex === undefined) {\n      block.right = 1;\n      block.left = (1 - leftLimit) * leftOffset / totalSize + leftLimit;\n      return;\n    }\n\n    const parent = nextBlocks[parentIndex];\n    const { left: parentLeft, totalSize: parentTotalSize } = parent as CalculatedBlock;\n    block.totalSize = parentTotalSize;\n    block.right = parentLeft as number;\n    block.left = (1 - leftLimit) * leftOffset / parentTotalSize + leftLimit;\n  });\n\n  return nextBlocks;\n};\n\nexport const updateBlocksLeft: UpdateBlocksLeftFn = (\n  blocks, appointments,\n) => blocks.map((block) => {\n  const { items, left } = block;\n  const firstItem = appointments[items[0]];\n  const { parent: firstItemParentIndex } = firstItem;\n  if (firstItemParentIndex === undefined) {\n    return block;\n  }\n\n  const firstItemParent = appointments[firstItemParentIndex];\n  const parentBlock = blocks[firstItemParent.blockIndex];\n\n  return {\n    ...block,\n    left: parentBlock.parent === undefined ? left : blocks[parentBlock.parent].left,\n  };\n});\n\nconst createAndAdjustAppointmentForest: CreateAndAdjustAppointmentForestFn = (\n  appointmentGroups, cellDuration,\n) => {\n  const appointmentForest = createAppointmentForest(appointmentGroups, cellDuration);\n  const indirectChildLeftOffset = Math.min(\n    1 / findMaxReduceValue(appointmentForest),\n    INDIRECT_CHILD_LEFT_OFFSET,\n  );\n  const baseCalculated = calculateAppointmentsMetaData(\n    appointmentForest, indirectChildLeftOffset,\n  );\n\n  const preparedToGroupIntoBlocks = prepareToGroupIntoBlocks(baseCalculated);\n  const groupedIntoBlocks = groupAppointmentsIntoBlocks(preparedToGroupIntoBlocks);\n  const blocksWithIncluded = findIncludedBlocks(groupedIntoBlocks);\n  const blocksWithParents = findChildBlocks(blocksWithIncluded);\n  return adjustByBlocks(blocksWithParents, indirectChildLeftOffset);\n};\n\nexport const calculateRectByDateAndGroupIntervals: CalculateRectByDateAndGroupIntervalsFn = (\n  type, intervals, rectByDates, rectByDatesMeta, viewMetaData,\n) => {\n  const { growDirection, multiline } = type;\n  const isHorizontal = growDirection === HORIZONTAL_TYPE;\n\n  const sorted = intervals.map(sortAppointments);\n  const grouped = sorted.reduce(((acc, sortedGroup) => [\n    ...acc,\n    ...findOverlappedAppointments(sortedGroup as AppointmentMoment[], isHorizontal),\n  ]), [] as AppointmentMoment[]);\n\n  const { cellDuration, placeAppointmentsNextToEachOther } = rectByDatesMeta;\n  const rectCalculator = isHorizontal\n    ? horizontalRectCalculator\n    : placeAppointmentsNextToEachOther ? oldVerticalRectCalculator : verticalRectCalculator;\n\n  const groupsCalculated = calculateAppointmentOffsets(\n    grouped as any[], isHorizontal,\n  );\n  const isAppointmentForestNeeded = !isHorizontal && !placeAppointmentsNextToEachOther;\n  let appointmentForest: GroupedIntoBlocksForest[];\n\n  if (isAppointmentForestNeeded) {\n    appointmentForest = createAndAdjustAppointmentForest(\n      groupsCalculated as AppointmentGroup[], cellDuration,\n    ) as GroupedIntoBlocksForest[];\n  }\n\n  const unwrappedAppointments = isAppointmentForestNeeded\n    ? unwrapAppointmentForest(appointmentForest!)\n    : unwrapGroups(groupsCalculated);\n  const rects = unwrappedAppointments.map(appointment => rectCalculator(\n    appointment, viewMetaData,\n    { rectByDates, multiline, rectByDatesMeta },\n  ));\n  return rects.sort((first, second) => first.offset! >= second.offset! ? 1 : -1);\n};\n","import moment from 'moment';\nimport { PureComputed } from '@devexpress/dx-core';\nimport {\n  AppointmentMoment, DayBoundaryPredicateFn,\n  ReduceAppointmentByDayBoundsFn, NormalizeAppointmentDurationFn, ViewCell, SchedulerDateTime,\n} from '../../types';\nimport { checkCellGroupingInfo } from '../common/helpers';\nimport { addDateToKey } from '../../utils';\n\nexport const sliceAppointmentByDay: PureComputed<\n  [AppointmentMoment, number], AppointmentMoment[]\n> = (appointment, cellDuration) => {\n  const { start, end, dataItem, key } = appointment;\n  if (start.isSame(end, 'day')) return [appointment];\n\n  const minDuration = cellDuration / 2;\n  const isShortOnFirstDay = start.clone().endOf('day').diff(start, 'minutes') < minDuration;\n  const isShortOnSecondDay = end.clone().diff(end.clone().startOf('day'), 'minutes') < minDuration;\n  const firstAppointmentKey = addDateToKey(key, start);\n  const secondAppointmentKey = addDateToKey(key, end);\n\n  return [\n    isShortOnFirstDay ? {\n      start: start.clone().endOf('day').add(-minDuration, 'minutes'),\n      end: start.clone().endOf('day'),\n      dataItem,\n      key: firstAppointmentKey,\n    } : {\n      start, end: start.clone().endOf('day'), dataItem,\n      key: firstAppointmentKey,\n    },\n    isShortOnSecondDay ? {\n      start: end.clone().startOf('day'),\n      end: end.clone().startOf('day').add(minDuration, 'minutes'),\n      dataItem,\n      key: secondAppointmentKey,\n    } : {\n      start: end.clone().startOf('day'), end, dataItem,\n      key: secondAppointmentKey,\n    },\n  ];\n};\n\nexport const dayBoundaryPredicate: DayBoundaryPredicateFn = (\n  appointment,\n  leftBound, rightBound,\n  excludedDays = [],\n) => {\n  const dayStart = moment(leftBound as Date);\n  const dayEnd = moment(rightBound as Date);\n  const startDayTime = moment(appointment.start)\n    .hour(dayStart.hour())\n    .minutes(dayStart.minutes());\n  const endDayTime = moment(appointment.start)\n    .hour(dayEnd.hour())\n    .minutes(dayEnd.minutes());\n\n  if (appointment.end.isBefore(dayStart) || appointment.start.isAfter(dayEnd)) return false;\n  if (excludedDays.findIndex(day => day === moment(appointment.start).day()) !== -1) return false;\n  return (appointment.end.isAfter(startDayTime)\n    && appointment.start.isBefore(endDayTime));\n};\n\nexport const reduceAppointmentByDayBounds: ReduceAppointmentByDayBoundsFn = (\n  appointment, leftBound, rightBound, cellDuration,\n) => {\n  const dayStart = moment(leftBound as Date);\n  const dayEnd = moment(rightBound as Date);\n  const startDayTime = moment(appointment.start)\n    .hour(dayStart.hour())\n    .minutes(dayStart.minutes())\n    .seconds(dayStart.seconds());\n  const endDayTime = moment(appointment.start)\n    .hour(dayEnd.hour())\n    .minutes(dayEnd.minutes())\n    .seconds(dayEnd.seconds());\n\n  const minDuration = cellDuration / 2;\n  const isShortOnFirstDay = endDayTime.clone().diff(appointment.start, 'minutes') < minDuration;\n  const isShortOnSecondDay = appointment.end.clone().diff(startDayTime, 'minutes') < minDuration;\n\n  if (isShortOnFirstDay) {\n    return {\n      ...appointment, start: endDayTime.clone().add(-minDuration, 'minutes'), end: endDayTime,\n    };\n  }\n\n  if (isShortOnSecondDay) {\n    return {\n      ...appointment, start: startDayTime, end: startDayTime.clone().add(minDuration, 'minutes'),\n    };\n  }\n\n  return {\n    ...appointment,\n    ...(appointment.start.isSameOrBefore(startDayTime) ? { start: startDayTime } : null),\n    ...(appointment.end.isSameOrAfter(endDayTime) ? { end: endDayTime } : null),\n  };\n};\n\nexport const normalizeAppointmentDuration: NormalizeAppointmentDurationFn = (\n  appointment, cellDuration,\n) => {\n  const minDuration = cellDuration / 2;\n  const start = moment(appointment.start as Date);\n  const end = moment(appointment.end as Date);\n\n  if (end.diff(start, 'minutes') > minDuration) {\n    return { ...appointment, start, end };\n  }\n\n  if (end.isSame(start.clone().add(minDuration, 'minutes'), 'day')) {\n    return { ...appointment, start, end: start.clone().add(minDuration, 'minutes') };\n  }\n\n  return {\n    ...appointment,\n    start: start.clone().endOf('day').add(-minDuration, 'minutes'),\n    end: start.clone().endOf('day'),\n  };\n};\n\nexport const getWeekVerticallyGroupedColumnIndex: PureComputed<\n  [ViewCell[][], SchedulerDateTime], number\n> = (viewCellsData, date) =>  viewCellsData[0].findIndex((\n  timeCell: ViewCell,\n) => moment(date as SchedulerDateTime).isSame(timeCell.startDate, 'date'));\n\nexport const getWeekHorizontallyGroupedColumnIndex: PureComputed<\n  [ViewCell[][], AppointmentMoment, SchedulerDateTime], number\n> = (viewCellsData, appointment, date) => viewCellsData[0].findIndex((timeCell: ViewCell) => {\n  const isCorrectGroup = checkCellGroupingInfo(timeCell, appointment);\n  return moment(date as SchedulerDateTime).isSame(timeCell.startDate, 'date') && isCorrectGroup;\n});\n\nexport const getWeekVerticallyGroupedRowIndex: PureComputed<\n  [ViewCell[][], AppointmentMoment, SchedulerDateTime, number, boolean, number], number\n> = (viewCellsData, appointment, date, columnIndex, takePrev, groupCount) => {\n  const timeTableHeight = viewCellsData.length / groupCount;\n  let timeTableRowIndex = getWeekHorizontallyGroupedRowIndex(\n    viewCellsData, date, columnIndex, takePrev,\n  );\n\n  if (!viewCellsData[0][0].groupingInfo) return timeTableRowIndex;\n\n  let isWrongCell = !checkCellGroupingInfo(\n    viewCellsData[timeTableRowIndex][columnIndex], appointment,\n  );\n  while (isWrongCell) {\n    timeTableRowIndex += timeTableHeight;\n    isWrongCell = !checkCellGroupingInfo(\n      viewCellsData[timeTableRowIndex][columnIndex], appointment,\n    );\n  }\n  return timeTableRowIndex;\n};\n\nexport const getWeekHorizontallyGroupedRowIndex: PureComputed<\n  [ViewCell[][], SchedulerDateTime, number, boolean], number\n> = (viewCellsData, date, columnIndex, takePrev) => viewCellsData.findIndex(\n  timeCell => moment(date as SchedulerDateTime)\n    .isBetween(\n      timeCell[columnIndex].startDate,\n      timeCell[columnIndex].endDate,\n      'seconds',\n      takePrev ? '(]' : '[)'),\n    );\n","import { CalculateWeekDateIntervalsFn, AppointmentMoment } from '../../types';\nimport {\n  sliceAppointmentByDay, dayBoundaryPredicate, reduceAppointmentByDayBounds,\n  normalizeAppointmentDuration,\n} from './helpers';\nimport { filterByViewBoundaries } from '../../utils';\n\nexport const calculateWeekDateIntervals: CalculateWeekDateIntervalsFn = (\n  appointments,\n  leftBound, rightBound, // startViewDate, endViewDate\n  excludedDays,\n  cellDuration,\n) => [\n  appointments\n    .map(appointment => normalizeAppointmentDuration(appointment, cellDuration))\n    .reduce((acc, appointment) =>\n      [...acc, ...filterByViewBoundaries(appointment, leftBound, rightBound, excludedDays, true)],\n      [] as AppointmentMoment[],\n    )\n    .reduce((acc, appointment) => (\n      [...acc, ...sliceAppointmentByDay(appointment, cellDuration)]), [] as AppointmentMoment[],\n    )\n    .filter(appointment => dayBoundaryPredicate(appointment, leftBound, rightBound, excludedDays))\n    .map(appointment => reduceAppointmentByDayBounds(\n      appointment, leftBound, rightBound, cellDuration,\n    )),\n];\n","import moment from 'moment';\nimport {\n  GetCellByAppointmentDataFn, GetVerticalRectByAppointmentDataFn,\n  GetCellRectVerticalFn, SchedulerDateTime,\n} from '../../types';\nimport { VERTICAL_GROUP_ORIENTATION } from '../../constants';\nimport {\n  getWeekHorizontallyGroupedRowIndex, getWeekVerticallyGroupedRowIndex,\n  getWeekHorizontallyGroupedColumnIndex, getWeekVerticallyGroupedColumnIndex,\n} from '../week-view/helpers';\n\nconst CELL_GAP_PX = 10;\nconst CELL_BOUND_HORIZONTAL_OFFSET_PX = 1;\nconst CELL_BOUND_VERTICAL_OFFSET_PX = 4;\n\nexport const getVerticalCellIndexByAppointmentData: GetCellByAppointmentDataFn = (\n  appointment, viewCellsData, viewMetaData, date, takePrev = false,\n) => {\n  const { groupOrientation, groupCount } = viewMetaData;\n\n  const columnIndex = groupOrientation === VERTICAL_GROUP_ORIENTATION\n    ? getWeekVerticallyGroupedColumnIndex(viewCellsData, date)\n    : getWeekHorizontallyGroupedColumnIndex(viewCellsData, appointment, date);\n  const rowIndex = groupOrientation === VERTICAL_GROUP_ORIENTATION\n    ? getWeekVerticallyGroupedRowIndex(\n      viewCellsData, appointment, date, columnIndex, takePrev, groupCount,\n    ) : getWeekHorizontallyGroupedRowIndex(viewCellsData, date, columnIndex, takePrev);\n\n  const cellIndex = (rowIndex * viewCellsData[0].length) + columnIndex;\n  return {\n    index: cellIndex,\n    startDate: viewCellsData[rowIndex][columnIndex].startDate,\n  };\n};\n\nconst getCellRect: GetCellRectVerticalFn = (\n  date, appointment, viewCellsData, cellDuration,\n  cellElementsMeta, takePrev, viewMetaData,\n) => {\n  const {\n    index: cellIndex,\n    startDate: cellStartDate,\n  } = getVerticalCellIndexByAppointmentData(\n    appointment, viewCellsData, viewMetaData, date, takePrev,\n  );\n\n  const {\n    top,\n    left,\n    width,\n    height: cellHeight,\n  } = cellElementsMeta.getCellRects[cellIndex]();\n  const timeOffset = moment(date as SchedulerDateTime).diff(cellStartDate as Date, 'minutes');\n  const topOffset = cellHeight * (timeOffset / cellDuration);\n  const parentRect = cellElementsMeta.parentRect();\n\n  return {\n    top,\n    left,\n    width,\n    topOffset,\n    parentRect,\n  };\n};\n\nexport const getVerticalRectByAppointmentData: GetVerticalRectByAppointmentDataFn = (\n  appointment,\n  viewMetaData,\n  {\n    viewCellsData,\n    cellDuration,\n    cellElementsMeta,\n    placeAppointmentsNextToEachOther,\n  },\n) => {\n  const firstCellRect = getCellRect(\n    appointment.start.toDate(), appointment, viewCellsData,\n    cellDuration, cellElementsMeta, false, viewMetaData,\n  );\n  const lastCellRect = getCellRect(\n    appointment.end.toDate(), appointment, viewCellsData,\n    cellDuration, cellElementsMeta, true, viewMetaData,\n  );\n\n  const top = firstCellRect.top + firstCellRect.topOffset;\n  const height = (lastCellRect.top + lastCellRect.topOffset) - top;\n\n  return {\n    width: firstCellRect.width - CELL_GAP_PX - CELL_BOUND_HORIZONTAL_OFFSET_PX,\n    top: top - firstCellRect.parentRect.top + CELL_BOUND_HORIZONTAL_OFFSET_PX,\n    left: firstCellRect.left - firstCellRect.parentRect.left + CELL_BOUND_HORIZONTAL_OFFSET_PX,\n    parentWidth: firstCellRect.parentRect.width,\n    height: placeAppointmentsNextToEachOther ? height - CELL_BOUND_VERTICAL_OFFSET_PX : height,\n  };\n};\n","import moment from 'moment';\nimport { PureComputed } from '@devexpress/dx-core';\nimport {\n  AppointmentMoment, GetAllDayCellIndexByAppointmentDataFn,\n  SliceAppointmentsByBoundariesFn, SchedulerDateTime, ViewCell,\n} from '../../types';\nimport { HORIZONTAL_GROUP_ORIENTATION } from '../../constants';\nimport { checkCellGroupingInfo } from '../common/helpers';\n\nexport const allDayPredicate: PureComputed<[AppointmentMoment], boolean> = appointment => (\n  appointment.end.diff(appointment.start, 'hours') > 23\n  || !!appointment.allDay\n);\n\nexport const getAllDayCellIndexByAppointmentData: GetAllDayCellIndexByAppointmentDataFn = (\n  viewCellsData, viewMetaData, date, appointment, takePrev,\n) => {\n  const currentDate = moment(date as SchedulerDateTime);\n  const { groupOrientation, groupCount } = viewMetaData;\n\n  const columnIndex = groupOrientation === HORIZONTAL_GROUP_ORIENTATION\n    ? getAllDayHorizontallyGroupedColumnIndex(viewCellsData, currentDate, appointment)\n    : getAllDayVerticallyGroupedColumnIndex(viewCellsData, currentDate);\n  const rowIndex = groupOrientation === HORIZONTAL_GROUP_ORIENTATION\n    ? 0 : getAllDayVerticallyGroupedRowIndex(viewCellsData, appointment, groupCount);\n\n  let cellIndex = rowIndex * viewCellsData[0].length + columnIndex;\n  if (takePrev && currentDate.format() === currentDate.startOf('day').format()) {\n    cellIndex -= 1;\n  }\n  return cellIndex;\n};\n\nexport const getAllDayVerticallyGroupedColumnIndex: PureComputed<\n  [ViewCell[][], moment.Moment], number\n> = (viewCellsData, date) => viewCellsData[0].findIndex((timeCell) => {\n  return date.isSame(timeCell.startDate, 'date');\n});\n\nexport const getAllDayHorizontallyGroupedColumnIndex: PureComputed<\n  [ViewCell[][], moment.Moment, AppointmentMoment], number\n> = (viewCellsData, date, appointment) => viewCellsData[0].findIndex(timeCell => (\n  date.isSame(timeCell.startDate, 'date') && checkCellGroupingInfo(timeCell, appointment)\n));\n\nexport const getAllDayVerticallyGroupedRowIndex: PureComputed<\n  [ViewCell[][], AppointmentMoment, number], number\n> = (viewCellsData, appointment, groupCount) => {\n  const index = viewCellsData.findIndex(viewCellsDataRow => checkCellGroupingInfo(\n    viewCellsDataRow[0], appointment,\n  ));\n  return index * groupCount / viewCellsData.length;\n};\n\nexport const sliceAppointmentsByBoundaries: SliceAppointmentsByBoundariesFn = (\n  appointment, left, right, excludedDays = [],\n) => {\n  const startDate = appointment.start.clone();\n  const endDate = appointment.end.clone();\n  let nextStart = startDate.clone();\n  let nextEnd = endDate.clone();\n\n  if (startDate.isBefore(left as Date)) {\n    nextStart = moment(left as Date);\n    nextStart.startOf('day');\n  }\n  if (endDate.isAfter(right as Date)) {\n    nextEnd = moment(right as Date);\n    nextEnd.endOf('day');\n  }\n  if (excludedDays.findIndex(day => day === startDate.day()) !== -1) {\n    while (excludedDays.findIndex(day => day === nextStart.day()) !== -1\n      && nextStart.isSameOrBefore(endDate, 'day')) {\n      nextStart.add(1, 'days').startOf('day');\n    }\n  }\n  if (excludedDays.findIndex(day => day === endDate.day()) !== -1) {\n    while (excludedDays.findIndex(day => day === nextEnd.day()) !== -1\n      && nextStart.isSameOrAfter(startDate, 'day')) {\n      nextEnd.add(-1, 'days').endOf('day');\n    }\n  }\n  return [{ ...appointment, start: nextStart, end: nextEnd }];\n};\n\nexport const sliceAppointmentsByDays: PureComputed<\n  [AppointmentMoment, number[]], AppointmentMoment[]\n> = (appointment, excludedDays = []) => {\n  const startDate = appointment.start;\n  const endDate = appointment.end;\n  let nextStart = startDate.clone();\n  const appointments = [] as AppointmentMoment[];\n\n  while (nextStart.isBefore(endDate)) {\n    if (excludedDays.findIndex(day => day === nextStart.day()) === - 1) {\n      appointments.push({\n        ...appointment,\n        start: nextStart,\n        end: moment(nextStart).endOf('day'),\n      });\n    }\n    nextStart = moment(nextStart).add(1, 'day');\n  }\n  return appointments;\n};\n","import { RRule } from 'rrule';\n\nexport const DEFAULT_RULE_OBJECT = {\n  interval: 1,\n};\n\nexport const DAYS_OF_WEEK = {\n  MONDAY: 0,\n  TUESDAY: 1,\n  WEDNESDAY: 2,\n  THURSDAY: 3,\n  FRIDAY: 4,\n  SATURDAY: 5,\n  SUNDAY: 6,\n};\n\nexport const RRULE_DAYS_OF_WEEK = [\n  RRule.MO,\n  RRule.TU,\n  RRule.WE,\n  RRule.TH,\n  RRule.FR,\n  RRule.SA,\n  RRule.SU,\n];\n\nexport const DAYS_IN_WEEK = 7;\n\nexport const DAYS_OF_WEEK_ARRAY = [\n  DAYS_OF_WEEK.SUNDAY, DAYS_OF_WEEK.MONDAY, DAYS_OF_WEEK.TUESDAY, DAYS_OF_WEEK.WEDNESDAY,\n  DAYS_OF_WEEK.THURSDAY, DAYS_OF_WEEK.FRIDAY, DAYS_OF_WEEK.SATURDAY,\n];\n\nexport const MONTHS = {\n  JANUARY: 1,\n  FEBRUARY: 2,\n  MARCH: 3,\n  APRIL: 4,\n  MAY: 5,\n  JUNE: 6,\n  JULY: 7,\n  AUGUST: 8,\n  SEPTEMBER: 9,\n  OCTOBER: 10,\n  NOVEMBER: 11,\n  DECEMBER: 12,\n};\n\nexport const RRULE_REPEAT_TYPES = {\n  YEARLY: RRule.YEARLY as number,\n  MONTHLY: RRule.MONTHLY as number,\n  WEEKLY: RRule.WEEKLY as number,\n  DAILY: RRule.DAILY as number,\n  HOURLY: RRule.HOURLY as number,\n  MINUTELY: RRule.MINUTELY as number,\n};\n\nexport const REPEAT_TYPES = {\n  DAILY: 'daily',\n  WEEKLY: 'weekly',\n  MONTHLY: 'monthly',\n  YEARLY: 'yearly',\n  NEVER: 'never',\n};\n\nexport const REPEAT_TYPES_ARRAY = [\n  REPEAT_TYPES.DAILY, REPEAT_TYPES.WEEKLY, REPEAT_TYPES.MONTHLY, REPEAT_TYPES.YEARLY,\n];\n\nexport const WEEK_NUMBER_LABELS = [\n  'firstLabel', 'secondLabel', 'thirdLabel', 'fourthLabel', 'lastLabel',\n];\n\nexport const END_REPEAT_RADIO_GROUP = 'endRepeat';\nexport const MONTHLY_RADIO_GROUP = 'monthlyRadioGroup';\nexport const YEARLY_RADIO_GROUP = 'yearlyRadioGroup';\n\nexport const TITLE_TEXT_EDITOR = 'titleTextEditor';\nexport const MULTILINE_TEXT_EDITOR = 'multilineTextEditor';\nexport const ORDINARY_TEXT_EDITOR = 'ordinaryTextEditor';\nexport const NUMBER_EDITOR = 'numberEditor';\n\nexport const TITLE = 'title';\nexport const ORDINARY_LABEL = 'ordinaryLabel';\n\nexport const SAVE_BUTTON = 'saveButton';\nexport const DELETE_BUTTON = 'deleteButton';\nexport const CANCEL_BUTTON = 'cancelButton';\n\nexport const OUTLINED_SELECT = 'outlinedSelect';\nexport const STANDARD_SELECT = 'standardSelect';\n\nexport const SUNDAY_DATE = new Date(2019, 7, 11);\nexport const MONDAY_DATE = new Date(2019, 7, 12);\nexport const TUESDAY_DATE = new Date(2019, 7, 13);\nexport const WEDNESDAY_DATE = new Date(2019, 7, 14);\nexport const THURSDAY_DATE = new Date(2019, 7, 15);\nexport const FRIDAY_DATE = new Date(2019, 7, 16);\nexport const SATURDAY_DATE = new Date(2019, 7, 17);\n\nexport const DAYS_OF_WEEK_DATES = [\n  SUNDAY_DATE, MONDAY_DATE, TUESDAY_DATE, WEDNESDAY_DATE,\n  THURSDAY_DATE, FRIDAY_DATE, SATURDAY_DATE,\n];\n\nexport const JANUARY_DATE = new Date(2019, 0, 1);\nexport const FEBRUARY_DATE = new Date(2019, 1, 1);\nexport const MARCH_DATE = new Date(2019, 2, 1);\nexport const APRIL_DATE = new Date(2019, 3, 1);\nexport const MAY_DATE = new Date(2019, 4, 1);\nexport const JUNE_DATE = new Date(2019, 5, 1);\nexport const JULY_DATE = new Date(2019, 6, 1);\nexport const AUGUST_DATE = new Date(2019, 7, 1);\nexport const SEPTEMBER_DATE = new Date(2019, 8, 1);\nexport const OCTOBER_DATE = new Date(2019, 9, 1);\nexport const NOVEMBER_DATE = new Date(2019, 10, 1);\nexport const DECEMBER_DATE = new Date(2019, 11, 1);\n\nexport const MONTHS_DATES = [\n  JANUARY_DATE, FEBRUARY_DATE, MARCH_DATE, APRIL_DATE, MAY_DATE, JUNE_DATE,\n  JULY_DATE, AUGUST_DATE, SEPTEMBER_DATE, OCTOBER_DATE, NOVEMBER_DATE, DECEMBER_DATE,\n];\n\nexport const FIRST_WEEK = 0;\nexport const SECOND_WEEK = 1;\nexport const THIRD_WEEK = 2;\nexport const FOURTH_WEEK = 3;\nexport const LAST_WEEK = 4;\n\nexport const BASIC_YEALY_COUNT = 5;\nexport const BASIC_MONTHLY_COUNT = 12;\nexport const BASIC_WEEKLY_COUNT = 13;\nexport const BASIC_DAILY_COUNT = 30;\n","import moment from 'moment';\nimport {\n  SliceAppointmentByWeekFn, GetMonthCellIndexByAppointmentDataFn,\n  SchedulerDateTime, AppointmentMoment, ViewCell,\n} from '../../types';\nimport { DAYS_IN_WEEK } from '../appointment-form/constants';\nimport { PureComputed } from '@devexpress/dx-core';\nimport { HORIZONTAL_GROUP_ORIENTATION } from '../../constants';\nimport { checkCellGroupingInfo } from '../common/helpers';\nimport { addDateToKey } from '../../utils';\n\nexport const sliceAppointmentByWeek: SliceAppointmentByWeekFn = (timeBounds, appointment, step) => {\n  const { left, right } = timeBounds;\n  const pieces: AppointmentMoment[] = [];\n  const { start, end, key, ...restFields } = appointment;\n  let apptStart = start;\n  let apptEnd = end;\n  if (apptStart.isBefore(left)) apptStart = left.clone();\n  if (apptEnd.isAfter(right)) apptEnd = right.clone();\n  let pieceFrom = apptStart.clone();\n  let pieceTo = apptStart.clone();\n  let i = 0;\n  while (pieceTo.isBefore(apptEnd)) {\n    const currentRightBound = left.clone().add(step * i, 'days').subtract(1, 'second');\n    if (currentRightBound.isAfter(apptStart)) {\n      pieceTo = apptStart.clone().add(step * i, 'days');\n      if (pieceTo.isAfter(currentRightBound)) {\n        pieceTo = currentRightBound.clone();\n      }\n      if (pieceTo.isAfter(apptEnd)) {\n        pieceTo = apptEnd.clone();\n      }\n      if (!pieceFrom.isSameOrAfter(pieceTo)) {\n        pieces.push({\n          start: pieceFrom,\n          end: pieceTo,\n          key: addDateToKey(key, pieceFrom),\n          ...restFields,\n        });\n        pieceFrom = pieceTo.clone().add(1, 'second');\n      }\n    }\n    i += 1;\n  }\n  return pieces;\n};\n\nexport const getMonthCellIndexByAppointmentData: GetMonthCellIndexByAppointmentDataFn = (\n  viewCellsData, viewMetaData, date, appointment, takePrev = false,\n) => {\n  const {\n    groupOrientation,\n    groupedByDate,\n    groupCount,\n  } = viewMetaData;\n\n  const startViewDate = moment(viewCellsData[0][0].startDate);\n  const currentDate = moment(date as SchedulerDateTime);\n  let dayNumber = currentDate.diff(startViewDate, 'days');\n  if (takePrev && currentDate.format() === currentDate.startOf('day').format()) {\n    dayNumber -= 1;\n  }\n  const weekNumber = Math.floor(dayNumber / DAYS_IN_WEEK);\n  const dayOfWeek = dayNumber % DAYS_IN_WEEK;\n\n  const columnIndex = groupOrientation === HORIZONTAL_GROUP_ORIENTATION\n    ? getMonthHorizontallyGroupedColumnIndex(\n      viewCellsData, appointment, weekNumber, dayOfWeek, groupCount, groupedByDate,\n    )\n    : dayOfWeek;\n  const rowIndex = groupOrientation === HORIZONTAL_GROUP_ORIENTATION\n    ? weekNumber\n    : getMonthVerticallyGroupedRowIndex(\n      viewCellsData, appointment, weekNumber, dayOfWeek, groupCount,\n    );\n\n  const totalCellIndex = rowIndex * viewCellsData[0].length + columnIndex;\n  return totalCellIndex;\n};\n\nexport const getMonthHorizontallyGroupedColumnIndex: PureComputed<\n  [ViewCell[][], AppointmentMoment, number, number, number, boolean], number\n> = (viewCellsData, appointment, weekNumber, dayOfWeek, groupCount, groupByDate) => {\n  let columnIndex = -1;\n  let currentColumnIndex = groupByDate ? dayOfWeek * groupCount : dayOfWeek;\n  const cellsInGroupRow = groupByDate ? 1 : DAYS_IN_WEEK;\n\n  while (columnIndex === -1) {\n    const isCorrectCell = checkCellGroupingInfo(\n      viewCellsData[weekNumber][currentColumnIndex], appointment,\n    );\n    if (isCorrectCell) {\n      columnIndex = currentColumnIndex;\n    }\n    currentColumnIndex += cellsInGroupRow;\n  }\n  return columnIndex;\n};\n\nexport const getMonthVerticallyGroupedRowIndex: PureComputed<\n  [ViewCell[][], AppointmentMoment, number, number, number], number\n> = (viewCellsData, appointment, weekNumber, dayOfWeek, groupCount) => {\n  const rowsInOneGroup = viewCellsData.length / groupCount;\n  let rowIndex = -1;\n  let currentRowIndex = weekNumber;\n  while (rowIndex === -1) {\n    const isCorrectCell = checkCellGroupingInfo(\n      viewCellsData[currentRowIndex][dayOfWeek], appointment,\n    );\n    if (isCorrectCell) {\n      rowIndex = currentRowIndex;\n    }\n    currentRowIndex += rowsInOneGroup;\n  }\n  return rowIndex;\n};\n","import { GetCellRectHorizontalFn, GetHorizontalRectByAppointmentDataFn } from '../../types';\nimport { getAllDayCellIndexByAppointmentData } from '../all-day-panel/helpers';\nimport { getMonthCellIndexByAppointmentData } from '../month-view/helpers';\n\nconst TOP_CELL_OFFSET = 0.32;\nconst CELL_BOUND_OFFSET_PX = 1;\n\nconst getCellRect: GetCellRectHorizontalFn = (\n  date, appointment, viewCellsData, viewMetaData, cellElementsMeta, takePrev, multiline,\n) => {\n  const cellIndex = multiline\n    ? getMonthCellIndexByAppointmentData(\n      viewCellsData, viewMetaData, date, appointment, takePrev,\n    ) : getAllDayCellIndexByAppointmentData(\n      viewCellsData, viewMetaData, date, appointment, takePrev,\n    );\n\n  const {\n    top,\n    left,\n    width,\n    height,\n  } = cellElementsMeta.getCellRects[cellIndex]();\n  const parentRect = cellElementsMeta.parentRect();\n  return {\n    top,\n    left,\n    width,\n    height,\n    parentRect,\n  };\n};\n\nexport const getHorizontalRectByAppointmentData: GetHorizontalRectByAppointmentDataFn = (\n  appointment,\n  viewMetaData,\n  {\n    multiline,\n    viewCellsData,\n    cellElementsMeta,\n  },\n) => {\n  const firstCellRect = getCellRect(\n    appointment.start.toDate(), appointment, viewCellsData,\n    viewMetaData, cellElementsMeta, false, multiline,\n  );\n  const lastCellRect = getCellRect(\n    appointment.end.toDate(), appointment, viewCellsData,\n    viewMetaData, cellElementsMeta, true, multiline,\n  );\n\n  const top = firstCellRect.top + (firstCellRect.height * TOP_CELL_OFFSET);\n  const height = firstCellRect.height - (firstCellRect.height * TOP_CELL_OFFSET);\n\n  return {\n    top: top - firstCellRect.parentRect.top,\n    left: (firstCellRect.left - firstCellRect.parentRect.left) + CELL_BOUND_OFFSET_PX,\n    width: ((lastCellRect.left - firstCellRect.left) + firstCellRect.width) - CELL_BOUND_OFFSET_PX,\n    height,\n    parentWidth: firstCellRect.parentRect.width,\n  };\n};\n","import moment from 'moment';\nimport {\n  MonthCellsDataComputedFn, MonthCellData,\n  CalculateMonthDateIntervalsFn, AppointmentMoment,\n} from '../../types';\nimport { filterByViewBoundaries } from '../../utils';\nimport { sliceAppointmentByWeek } from './helpers';\n\nconst DAY_COUNT = 7;\nconst MONTH_LENGTH = 31;\n\nexport const monthCellsData: MonthCellsDataComputedFn = (\n  currentDate,\n  firstDayOfWeek,\n  intervalCount = 1,\n  today,\n) => {\n  const targetDate = moment(currentDate as Date);\n  const currentMonths = [targetDate.month()];\n  while (currentMonths.length < intervalCount) {\n    currentMonths.push(targetDate.add(1, 'months').month());\n  }\n  const firstMonthDate = moment(currentDate as Date).date(1);\n  const firstMonthDay = firstMonthDate.day() - firstDayOfWeek;\n  const prevMonthDayCount = firstMonthDate.day(firstMonthDay).day() || DAY_COUNT;\n  const prevMonth = moment(currentDate as Date).subtract(1, 'months');\n  const prevMonthStartDay = prevMonth.daysInMonth() - (prevMonthDayCount - 1);\n  const from = moment()\n    .year(prevMonth.year())\n    .month(prevMonth.month())\n    .date(prevMonthStartDay)\n    .startOf('day');\n\n  const result: MonthCellData[][] = [];\n  while (result.length < (Math.trunc((MONTH_LENGTH * intervalCount) / DAY_COUNT) + 2)) {\n    const week: MonthCellData[] = [];\n    while (week.length < DAY_COUNT) {\n      week.push({\n        startDate: from.toDate(),\n        endDate: from.clone().add(1, 'day').toDate(),\n        otherMonth: currentMonths.findIndex(month => month === from.month()) === -1,\n        today: today ? moment(today as Date).isSame(from, 'date') : false,\n      });\n      from.add(1, 'day');\n    }\n    result.push(week);\n  }\n  return result;\n};\n\nexport const calculateMonthDateIntervals: CalculateMonthDateIntervalsFn = (\n  appointments, leftBound, rightBound,\n) => [\n  appointments\n    .map(({ start, end, ...restArgs }) => ({ start: moment(start), end: moment(end), ...restArgs }))\n    .reduce((acc, appointment) =>\n      [...acc, ...filterByViewBoundaries(appointment, leftBound, rightBound, [], false)],\n      [] as AppointmentMoment[],\n    )\n    .reduce((acc, appointment) => ([\n      ...acc,\n      ...sliceAppointmentByWeek(\n        { left: moment(leftBound as Date), right: moment(rightBound as Date) },\n        appointment,\n        DAY_COUNT,\n      ),\n    ]), [] as AppointmentMoment[]),\n];\n","import moment from 'moment';\nimport {\n  AppointmentMoment, CalculateAllDayDateIntervalsFn,\n} from '../../types';\nimport { allDayPredicate, sliceAppointmentsByBoundaries } from './helpers';\nimport { filterByViewBoundaries } from '../../utils';\n\nexport const calculateAllDayDateIntervals: CalculateAllDayDateIntervalsFn = (\n  appointments,\n  leftBound, rightBound,\n  excludedDays,\n) => [\n  appointments\n    .map(({ start, end, ...restArgs }) => ({ start: moment(start), end: moment(end), ...restArgs }))\n    .reduce((acc, appointment) =>\n      [...acc, ...filterByViewBoundaries(appointment, leftBound, rightBound, excludedDays, false)],\n      [] as AppointmentMoment[],\n    )\n    .filter(appointment => allDayPredicate(appointment))\n    .reduce((acc, appointment) => ([\n      ...acc,\n      ...sliceAppointmentsByBoundaries(appointment, leftBound, rightBound, excludedDays),\n    ]), [] as AppointmentMoment[]),\n];\n","import { PureComputed } from '@devexpress/dx-core';\nimport {\n  ValidResourceInstance, Group, ViewCell, ValidResource,\n  AppointmentMoment, Grouping, GroupOrientation, AppointmentKey,\n} from '../../types';\nimport { HORIZONTAL_GROUP_ORIENTATION } from '../../constants';\n\nexport const getGroupFromResourceInstance: PureComputed<\n  [ValidResourceInstance], Group\n> = resourceInstance => ({\n  id: resourceInstance.id,\n  fieldName: resourceInstance.fieldName,\n  text: resourceInstance.text,\n});\n\nexport const addGroupInfoToCells: PureComputed<\n  [Group, Group[][], ValidResource[],\n  ViewCell[], number, boolean, GroupOrientation], ViewCell[]\n> = (\n  currentGroup, groups, sortedResources, viewCellRow, index, endOfGroup, groupOrientation,\n) => viewCellRow.map((\n    viewCell: ViewCell, cellIndex: number,\n  ) => {\n  const groupedCell = addGroupInfoToCell(\n    currentGroup, groups, sortedResources, viewCell, index, endOfGroup, groupOrientation,\n  ) as ViewCell;\n  return cellIndex === viewCellRow.length - 1 && groupOrientation === HORIZONTAL_GROUP_ORIENTATION\n    ? { ...groupedCell, endOfGroup: true }\n    : groupedCell;\n});\n\nexport const addGroupInfoToCell: PureComputed<\n  [Group, Group[][], ValidResource[],\n  ViewCell, number, boolean, GroupOrientation], ViewCell\n> = (currentGroup, groups, sortedResources, viewCell, index, endOfGroup, groupOrientation) => {\n  let previousIndex = index;\n  const groupingInfo = groups.reduceRight((\n    acc: Group[], group: Group[], currentIndex: number,\n  ) => {\n    if (currentIndex === groups.length - 1) return acc;\n    const previousResourceLength = sortedResources[currentIndex + 1].instances.length;\n    const currentGroupingInstance = group[Math.floor(\n      previousIndex / previousResourceLength,\n    )];\n    previousIndex = currentIndex;\n    return [...acc, currentGroupingInstance];\n  }, [currentGroup]);\n  return { ...viewCell, groupingInfo, endOfGroup, groupOrientation };\n};\n\nconst getCurrentGroup: PureComputed<\n  [Group[][], ValidResource[], number, Group], Group[]\n> = (groups, resources, index, group) => {\n  let currentIndex = index;\n  return groups.reduceRight((groupAcc, groupsRow, rowIndex) => {\n    if (rowIndex === groups!.length - 1) {\n      return groupAcc;\n    }\n    currentIndex = Math.floor(currentIndex / resources[rowIndex + 1].instances.length);\n    const currentInstance = groupsRow[currentIndex];\n    return [\n      ...groupAcc,\n      currentInstance,\n    ];\n  }, [group]);\n};\n\nexport const groupAppointments: PureComputed<\n  [AppointmentMoment[], ValidResource[] | undefined,\n  Group[][] | undefined], AppointmentMoment[][]\n> = (appointments, resources, groups) => {\n  if (!resources || !groups) return [appointments.slice()];\n  const mainResource = resources.find(resource => resource.isMain);\n  return groups![groups!.length - 1].map((group, index) => {\n    const currentGroup = getCurrentGroup(groups, resources, index, group);\n\n    return appointments.reduce((acc, appointment) => {\n      const belongsToGroup = currentGroup.reduce((isBelonging, groupItem) => (\n        isBelonging && groupItem.id === appointment[groupItem.fieldName]\n      ), true);\n      if (!belongsToGroup) return acc;\n      const currentMainResourceId = currentGroup.find(\n        groupItem => groupItem.fieldName === mainResource!.fieldName,\n      )!.id;\n\n      const updatedAppointment = {\n        ...appointment,\n        dataItem: {\n          ...appointment.dataItem,\n          [mainResource!.fieldName]: rearrangeResourceIds(\n            mainResource!, appointment, currentMainResourceId,\n          ),\n        },\n        resources: appointment.resources && rearrangeResources(\n          mainResource!, appointment, currentMainResourceId,\n        ),\n      };\n      return [...acc, updatedAppointment];\n    }, [] as AppointmentMoment[]);\n  });\n};\n\nconst rearrangeResourceIds: PureComputed<\n  [ValidResource, AppointmentMoment, any], any[] | any\n> = (mainResource, appointment, mainResourceId) => {\n  if (!mainResource.allowMultiple) {\n    return mainResourceId;\n  }\n  return [\n    mainResourceId,\n    ...appointment.dataItem[mainResource!.fieldName].filter((id: any) => id !== mainResourceId),\n  ];\n};\n\nexport const rearrangeResources: PureComputed<\n  [ValidResource, AppointmentMoment, any], ValidResourceInstance[]\n> = (mainResource, appointment, currentResourceInstanceId) => {\n  if (!mainResource.allowMultiple) {\n    return appointment.resources;\n  }\n  const resources = appointment.resources.slice();\n  const firstMainResource = resources.findIndex((el: ValidResourceInstance) => el.isMain);\n  const currentResourceIndex = resources.findIndex(\n    (el: ValidResourceInstance) => el.isMain && el.id === currentResourceInstanceId,\n  );\n  [resources[firstMainResource], resources[currentResourceIndex]] =\n    [resources[currentResourceIndex], resources[firstMainResource]];\n  return resources;\n};\n\nexport const expandGroupedAppointment: PureComputed<\n  [AppointmentMoment, Grouping[], ValidResource[]], AppointmentMoment[]\n> = (appointment, grouping, resources) => {\n  if (!resources || !grouping) {\n    return [appointment];\n  }\n  return resources\n    .reduce((acc: AppointmentMoment[], resource: ValidResource) => {\n      const isGroupedByResource = grouping.find(\n        group => group.resourceName === resource.fieldName,\n      ) !== undefined;\n      if (!isGroupedByResource) return acc;\n      const resourceField = resource.fieldName;\n      if (!resource.allowMultiple) {\n        return acc.reduce((accumulatedAppointments, currentAppointment) => [\n          ...accumulatedAppointments,\n          { ...currentAppointment, [resourceField]: currentAppointment.dataItem[resourceField] },\n        ], [] as AppointmentMoment[]);\n      }\n      return acc.reduce((accumulatedAppointments, currentAppointment) => [\n        ...accumulatedAppointments,\n        ...currentAppointment.dataItem[resourceField].map(\n          (resourceValue: number | string) => ({\n            ...currentAppointment,\n            [resourceField]: resourceValue,\n            key: generateMultipleResourceKey(currentAppointment.key, resourceValue),\n          }),\n        ),\n      ], [] as AppointmentMoment[]);\n    }, [appointment] as AppointmentMoment[]);\n};\n\nconst generateMultipleResourceKey: PureComputed<\n  [AppointmentKey, number | string], AppointmentKey\n> = (previousKey, resourceValue) => `${previousKey}_${resourceValue}`;\n\nexport const getGroupingInfoFromGroups: PureComputed<\n  [Group[][], number], Group[]\n> = (groups, groupIndex) => {\n  let previousIndex = groupIndex;\n  return groups.reduceRight((acc, currentGroups, currentIndex) => {\n    if (currentIndex === groups.length - 1) return acc;\n    const previousResourceLength = groups[currentIndex + 1].length / currentGroups.length;\n    const currentGroupingInstance = currentGroups[Math.floor(\n      previousIndex / previousResourceLength,\n    )];\n    previousIndex = currentIndex;\n    return [...acc, currentGroupingInstance];\n  }, [getGroupsLastRow(groups)[groupIndex]]);\n};\n\nexport const getGroupsLastRow: PureComputed<\n  [Group[][]], Group[]\n> = groups => groups[groups.length - 1];\n","import { PureComputed } from '@devexpress/dx-core';\nimport {\n  Grouping, ValidResourceInstance, ViewCell, ValidResource,\n  Group, AppointmentMoment, ExpandGroupingPanelCellFn, GroupOrientation,\n  CellElementsMeta, SchedulerView,\n} from '../../types';\nimport {\n  getGroupFromResourceInstance, addGroupInfoToCells,\n  groupAppointments, expandGroupedAppointment, addGroupInfoToCell, getGroupsLastRow,\n} from './helpers';\nimport { sliceAppointmentsByDays } from '../all-day-panel/helpers';\nimport { HORIZONTAL_GROUP_ORIENTATION, VERTICAL_GROUP_ORIENTATION } from '../../constants';\nimport { containsDSTChange } from '../common/helpers';\n\nexport const filterResourcesByGrouping: PureComputed<\n  [Array<ValidResource>, Array<Grouping>], Array<ValidResource>\n> = (resources, grouping) => resources.filter(\n  resource => grouping.find(resourceId => resource.fieldName === resourceId.resourceName),\n);\n\nexport const sortFilteredResources: PureComputed<\n  [Array<ValidResource>, Array<Grouping>], Array<ValidResource>\n> = (resources, grouping) => grouping.map(({ resourceName }: Grouping) => (\n  resources.find(resource => resource.fieldName === resourceName) as ValidResource\n));\n\nexport const getGroupsFromResources: PureComputed<\n  [Array<ValidResource>], Array<Array<Group>>\n> = sortedAndFilteredResources => sortedAndFilteredResources.reduce((\n    acc: Array<Array<Group>>, resource: ValidResource, index: number,\n  ) => {\n  if (index === 0) {\n    return [resource.instances.map(instance => getGroupFromResourceInstance(instance))];\n  }\n\n  return [\n    ...acc,\n    acc[index - 1].reduce((currentResourceNames: Array<Group>) => [\n      ...currentResourceNames,\n      ...resource.instances.map(\n        (instance: ValidResourceInstance) => getGroupFromResourceInstance(instance),\n      ),\n    ], []),\n  ];\n}, []);\n\nexport const expandViewCellsDataWithGroups: PureComputed<\n  [ViewCell[][], Group[][], ValidResource[], boolean, GroupOrientation], ViewCell[][]\n> = (viewCellsData, groups, sortedResources, groupByDate, groupOrientation) => {\n  if (groups.length === 0) return viewCellsData;\n  if (groupByDate) {\n    return expandCellsWithGroupedByDateData(viewCellsData, groups, sortedResources);\n  }\n  if (groupOrientation === HORIZONTAL_GROUP_ORIENTATION) {\n    return expandHorizontallyGroupedCells(viewCellsData, groups, sortedResources);\n  }\n  return expandVerticallyGroupedCells(viewCellsData, groups, sortedResources);\n};\n\nconst expandCellsWithGroupedByDateData: ExpandGroupingPanelCellFn = (\n  viewCellsData, groups, sortedResources,\n) => viewCellsData.map(\n  (cellsRow: ViewCell[]) => cellsRow.reduce((acc: ViewCell[], viewCell: ViewCell) => {\n    const groupedCells = getGroupsLastRow(groups).map((\n      group: Group, index: number,\n    ) => addGroupInfoToCell(\n      group, groups, sortedResources, viewCell, index,\n      false, HORIZONTAL_GROUP_ORIENTATION,\n    ));\n    groupedCells[groupedCells.length - 1] = {\n      ...groupedCells[groupedCells.length - 1],\n      endOfGroup: true,\n    };\n    return [...acc, ...groupedCells] as ViewCell[];\n  }, [] as ViewCell[]),\n);\n\nconst expandHorizontallyGroupedCells: ExpandGroupingPanelCellFn = (\n  viewCellsData, groups, sortedResources,\n) => getGroupsLastRow(groups).reduce((\n  acc: ViewCell[][], group: Group, index: number,\n) => {\n  if (index === 0) {\n    return viewCellsData.map((viewCellsRow: ViewCell[]) =>\n      addGroupInfoToCells(\n        group, groups, sortedResources, viewCellsRow, index,\n        false, HORIZONTAL_GROUP_ORIENTATION,\n      ) as ViewCell[],\n    );\n  }\n  return acc.map((item: ViewCell[], id: number) => [\n    ...item,\n    ...addGroupInfoToCells(\n      group, groups, sortedResources, viewCellsData[id], index,\n      false, HORIZONTAL_GROUP_ORIENTATION,\n    ),\n  ]);\n}, [[]] as ViewCell[][]);\n\nconst expandVerticallyGroupedCells: ExpandGroupingPanelCellFn = (\n  viewCellsData, groups, sortedResources,\n) => getGroupsLastRow(groups).reduce((\n  acc: ViewCell[][], group: Group, index: number,\n) => {\n  if (index === 0) {\n    return viewCellsData.map((\n      viewCellsRow: ViewCell[], viewRowIndex: number,\n    ) => addGroupInfoToCells(\n        group, groups, sortedResources, viewCellsRow,\n        index, viewRowIndex === viewCellsData.length - 1, VERTICAL_GROUP_ORIENTATION,\n      ) as ViewCell[]);\n  }\n  return [\n    ...acc,\n    ...viewCellsData.map((viewCellsRow: ViewCell[], viewRowIndex: number) =>\n      addGroupInfoToCells(\n        group, groups, sortedResources, viewCellsRow,\n        index, viewRowIndex === viewCellsData.length - 1, VERTICAL_GROUP_ORIENTATION,\n      ) as ViewCell[],\n    ),\n  ];\n}, [[]] as ViewCell[][]);\n\nexport const updateGroupingWithMainResource: PureComputed<\n  [Grouping[] | undefined, ValidResource[]], Grouping[]\n> = (grouping, resources) => grouping\n  || [{ resourceName: resources.find(resource => resource.isMain)!.fieldName }];\n\nexport const expandGroups: PureComputed<\n  [AppointmentMoment[][], Grouping[], ValidResource[],\n  Group[][], number[], boolean], AppointmentMoment[][]\n> = (appointments, grouping, resources, groups, excludedDays, sliceByDay = false) => {\n  const slicedAppointments = sliceByDay ?\n    appointments[0].reduce((acc: AppointmentMoment[], appointment: AppointmentMoment) => ([\n      ...acc,\n      ...sliceAppointmentsByDays(appointment, excludedDays),\n    ]), [] as AppointmentMoment[]) : appointments[0];\n\n  const expandedAppointments = (slicedAppointments as AppointmentMoment[])\n    .reduce((acc: AppointmentMoment[], appointment: AppointmentMoment) => [\n      ...acc,\n      ...expandGroupedAppointment(appointment, grouping, resources),\n    ], [] as AppointmentMoment[]);\n  return groupAppointments(expandedAppointments, resources, groups);\n};\n\nexport const updateTimeTableCellElementsMeta: PureComputed<\n  [CellElementsMeta, (viewName: string) => GroupOrientation, Group[][],\n  boolean, ViewCell[][], SchedulerView], CellElementsMeta\n> = (\n  timeTableElementsMeta, groupOrientation, groups, allDayPanelExists, viewCellsData, currentView,\n) => {\n  if (checkCellElementsMeta(\n    timeTableElementsMeta, groupOrientation, currentView, allDayPanelExists,\n  )) {\n    return timeTableElementsMeta;\n  }\n\n  const {\n    groupCount, timeTableWidth, groupSize, validGetCellRects,\n  } = initializeCellElementsData(timeTableElementsMeta, viewCellsData, groups);\n  let allDayPanelsLeft = groupCount;\n\n  while (allDayPanelsLeft > 0) {\n    allDayPanelsLeft -= 1;\n    validGetCellRects.splice(allDayPanelsLeft * (timeTableWidth + groupSize), timeTableWidth);\n  }\n\n  return {\n    parentRect: timeTableElementsMeta.parentRect,\n    getCellRects: validGetCellRects,\n  };\n};\n\nexport const updateAllDayCellElementsMeta: PureComputed<\n  [CellElementsMeta, CellElementsMeta, (viewName: string) => GroupOrientation, Group[][],\n  boolean, ViewCell[][], SchedulerView], CellElementsMeta\n> = (\n  allDayElementsMeta, timeTableElementsMeta, groupOrientation, groups,\n  allDayPanelExists, viewCellsData, currentView,\n) => {\n  if (checkCellElementsMeta(\n    timeTableElementsMeta, groupOrientation, currentView, allDayPanelExists,\n  )) {\n    return allDayElementsMeta;\n  }\n\n  const {\n    groupCount, timeTableWidth, groupSize, validGetCellRects,\n  } = initializeCellElementsData(timeTableElementsMeta, viewCellsData, groups);\n  let allDayPanelsLeft = groupCount;\n\n  while (allDayPanelsLeft > 0) {\n    allDayPanelsLeft -= 1;\n    validGetCellRects.splice(\n      groupSize * allDayPanelsLeft + timeTableWidth * (allDayPanelsLeft + 1), groupSize,\n    );\n  }\n\n  return {\n    parentRect: timeTableElementsMeta.parentRect,\n    getCellRects: validGetCellRects,\n  };\n};\n\nconst checkCellElementsMeta: PureComputed<\n  [CellElementsMeta, (viewName: string) => GroupOrientation, SchedulerView, boolean], boolean\n> = (\n  cellElementsMeta, groupOrientation, currentView, allDayPanelExists,\n) => groupOrientation(currentView.name) === HORIZONTAL_GROUP_ORIENTATION\n  || !allDayPanelExists || !cellElementsMeta.getCellRects;\n\nconst initializeCellElementsData: PureComputed<\n  [CellElementsMeta, ViewCell[][], Group[][]], any\n> = (cellElementsMeta, viewCellsData, groups) => {\n  const timeTableWidth = viewCellsData[0].length;\n  const groupCount = getGroupsLastRow(groups).length;\n  const groupHeight = viewCellsData.length / groupCount;\n  return {\n    groupCount,\n    timeTableWidth,\n    groupSize: timeTableWidth * groupHeight,\n    validGetCellRects: cellElementsMeta.getCellRects.slice(),\n  };\n};\n\nexport const updateTimeCellsData: PureComputed<\n  [ViewCell[][], ViewCell[][], Group[][], ValidResource[], GroupOrientation], ViewCell[][]\n> = (viewCellsData, timeCellsData, groups, sortedResources, groupOrientation) => {\n  const { startDate: firstViewDate } = viewCellsData[0][0];\n  if (!containsDSTChange(firstViewDate)) {\n    return viewCellsData;\n  }\n\n  if (groupOrientation !== VERTICAL_GROUP_ORIENTATION) {\n    return timeCellsData;\n  }\n\n  return expandVerticallyGroupedCells(timeCellsData, groups, sortedResources);\n};\n","import {\n  AllDayRects, VerticalRects, HorizontalRects,\n} from '../../types';\nimport {\n  VERTICAL_TYPE, HORIZONTAL_TYPE,\n} from '../../constants';\nimport { calculateRectByDateAndGroupIntervals } from '../appointments/helpers';\nimport { calculateWeekDateIntervals } from '../week-view/computeds';\nimport { getVerticalRectByAppointmentData } from '../vertical-rect/helpers';\nimport { getHorizontalRectByAppointmentData } from '../horizontal-rect/helpers';\nimport { calculateMonthDateIntervals } from '../month-view/computeds';\nimport { calculateAllDayDateIntervals } from '../all-day-panel/computeds';\nimport { expandGroups } from '../integrated-grouping/computeds';\nimport { getGroupsLastRow } from '../integrated-grouping/helpers';\n\nexport const allDayRects: AllDayRects = (\n  appointments, startViewDate, endViewDate,\n  excludedDays, viewCellsData, cellElementsMeta,\n  grouping, resources, groups, groupOrientation, sliceAppointments,\n) => {\n  const intervals = calculateAllDayDateIntervals(\n    appointments, startViewDate, endViewDate, excludedDays,\n  );\n  const groupedIntervals = expandGroups(\n    intervals, grouping, resources, groups, excludedDays, sliceAppointments,\n  );\n\n  return calculateRectByDateAndGroupIntervals(\n    {\n      growDirection: HORIZONTAL_TYPE,\n      multiline: false,\n    },\n    groupedIntervals,\n    getHorizontalRectByAppointmentData,\n    {\n      startViewDate,\n      endViewDate,\n      viewCellsData,\n      cellElementsMeta,\n      excludedDays,\n    },\n    {\n      groupOrientation,\n      groupedByDate: sliceAppointments,\n      groupCount: groups ? getGroupsLastRow(groups).length : 1,\n    },\n  );\n};\n\nexport const verticalTimeTableRects: VerticalRects = (\n  appointments, startViewDate, endViewDate, excludedDays, viewCellsData,\n  cellDuration, cellElementsMeta, grouping, resources, groups,  groupOrientation, groupByDate,\n) => {\n  const intervals = calculateWeekDateIntervals(\n    appointments, startViewDate, endViewDate, excludedDays, cellDuration,\n  );\n  const groupedIntervals = expandGroups(\n    intervals, grouping, resources, groups, excludedDays, false,\n  );\n\n  return calculateRectByDateAndGroupIntervals(\n    {\n      growDirection: VERTICAL_TYPE,\n      multiline: false,\n    },\n    groupedIntervals,\n    getVerticalRectByAppointmentData,\n    {\n      startViewDate,\n      endViewDate,\n      viewCellsData,\n      cellDuration,\n      cellElementsMeta,\n    },\n    {\n      groupOrientation,\n      groupedByDate: groupByDate,\n      groupCount: groups ? getGroupsLastRow(groups).length : 1,\n    },\n  );\n};\n\nexport const horizontalTimeTableRects: HorizontalRects = (\n  appointments, startViewDate, endViewDate, viewCellsData,\n  cellElementsMeta, grouping, resources, groups, groupOrientation, sliceAppointments,\n) => {\n  const intervals = calculateMonthDateIntervals(\n    appointments, startViewDate, endViewDate,\n  );\n  const groupedIntervals = expandGroups(\n    intervals, grouping, resources, groups, [], sliceAppointments,\n  );\n\n  return calculateRectByDateAndGroupIntervals(\n    {\n      growDirection: HORIZONTAL_TYPE,\n      multiline: true,\n    },\n    groupedIntervals,\n    getHorizontalRectByAppointmentData,\n    {\n      startViewDate,\n      endViewDate,\n      viewCellsData,\n      cellElementsMeta,\n    },\n    {\n      groupOrientation,\n      groupedByDate: sliceAppointments,\n      groupCount: groups ? getGroupsLastRow(groups).length : 1,\n    },\n  );\n};\n","import { DateTimeFormatInstanceFn } from '../../types';\n\nexport const dateTimeFormatInstance: DateTimeFormatInstanceFn = (\n  locale, formatOptions,\n) => new Intl.DateTimeFormat(locale, formatOptions);\n","import { PureComputed } from '@devexpress/dx-core';\nimport { AppointmentModel, Appointment, FormatDateTimeGetterFn, FormatterFn } from '../../types';\nimport { convertToMoment } from '../common/helpers';\nimport { dateTimeFormatInstance } from './helpers';\n\nexport const appointments: PureComputed<\n  [AppointmentModel[]], Appointment[]\n> = data => data.map((appointment, index) => ({\n  dataItem: appointment,\n  start: appointment.startDate,\n  ...appointment.endDate !== undefined ? {\n    end: appointment.endDate,\n  } : {\n    end: appointment.startDate,\n    dataItem: { ...appointment, endDate: appointment.startDate },\n  },\n  ...appointment.allDay !== undefined && {\n    allDay: appointment.allDay,\n  },\n  ...appointment.rRule !== undefined && {\n    rRule: appointment.rRule,\n  },\n  ...appointment.exDate !== undefined && {\n    exDate: appointment.exDate,\n  },\n  key: appointment.id || index,\n}));\n\nexport const formatDateTimeGetter: FormatDateTimeGetterFn = (locale) => {\n  const cache = new Map<Intl.DateTimeFormatOptions, Intl.DateTimeFormat>(); // any -> type\n\n  const formatter: FormatterFn = (nextDate, nextOptions) => {\n    if (nextDate === undefined) return '';\n    const date = convertToMoment(nextDate).toDate();\n    let formatInstance = cache.get(nextOptions);\n\n    if (!formatInstance) {\n      formatInstance = dateTimeFormatInstance(locale, nextOptions);\n      cache.set(nextOptions, formatInstance);\n    }\n\n    return formatInstance.format(date);\n  };\n  return formatter;\n};\n","import { PureComputed } from '@devexpress/dx-core';\nimport { Group, HorizontalGroupingCellData, VerticalGroupingCellData } from '../../types';\nimport { getGroupsLastRow } from '../integrated-grouping/helpers';\n\nexport const getCellKey: PureComputed<\n  [Group[][], number, number], string\n> = (groups, groupIndex, rowNumber) => {\n  let currentIndex = groupIndex;\n  return groups.reduceRight((acc: string, groupRow: Group[], rowIndex: number) => {\n    if (rowNumber < rowIndex) return acc;\n    const currentKey = groupRow[currentIndex].id;\n    if (rowIndex > 0) {\n      const currentRowLength = groups[rowIndex].length / groups[rowIndex - 1].length;\n      currentIndex = Math.floor(currentIndex / currentRowLength);\n    }\n    return acc + currentKey;\n  }, '' as string);\n};\n\nexport const getRowFromGroups: PureComputed<\n  [number, Group[], any, Group[][], number], HorizontalGroupingCellData[]\n> = (width, groupRow, cellStyle, groups, rowIndex) => {\n  let row = [] as any[];\n  const currentRowLength = groupRow.length;\n  const standardWidth = width / getGroupsLastRow(groups).length;\n  const colSpan = getGroupsLastRow(groups).length / currentRowLength;\n  for (let i = 0; i < standardWidth; i += 1) {\n    row = [...row, ...groupRow.reduce((acc, group, index) => [\n      ...acc,\n      {\n        group,\n        colSpan,\n        key: getCellKey(groups, index, rowIndex) + i,\n        left: cellStyle.left,\n        endOfGroup: index === currentRowLength - 1,\n      },\n    ], [] as any[])];\n  }\n  return row;\n};\n\nexport const getVerticalRowFromGroups: PureComputed<\n  [Group[][], number, number, number, boolean, number], VerticalGroupingCellData[]\n> = (\n  groups, groupIndex, groupingPanelRowSpan,\n  timeTableCellHeight, addAllDayHeight, allDayCellHeight,\n) => groups.reduce((\n  acc, groupColumn, columnIndex,\n) => {\n  const groupSpan = getGroupsLastRow(groups).length / groupColumn.length;\n  const cellIndex = groupIndex / groupSpan;\n  const baseHeight = (groupingPanelRowSpan * groupSpan * timeTableCellHeight)\n    / getGroupsLastRow(groups).length;\n  const allDayHeight = groupSpan * allDayCellHeight;\n\n  return groupIndex % groupSpan !== 0 ? acc : [\n    ...acc,\n    {\n      group: groupColumn[cellIndex],\n      rowSpan: groupSpan,\n      height: addAllDayHeight ? baseHeight + allDayHeight : baseHeight,\n      key: getCellKey(groups, cellIndex, columnIndex),\n    },\n  ];\n}, [] as VerticalGroupingCellData[]);\n","import { PureComputed } from '@devexpress/dx-core';\nimport { HORIZONTAL_GROUP_ORIENTATION } from '../../constants';\nimport { ViewCell, Group, GroupOrientation, TimeScaleLabelData, AllDayCell } from '../../types';\nimport { getCellKey } from '../grouping-panel/utils';\nimport { getGroupsLastRow } from '../integrated-grouping/helpers';\n\nconst getLabelsForSingleGroup: PureComputed<\n  [Group[][], ViewCell[][], number, number], TimeScaleLabelData[]\n> = (groups, cellsData, groupIndex, groupHeight) => {\n  const currentGroupIndex = groupIndex * groupHeight;\n  const nextGroupIndex = currentGroupIndex + groupHeight;\n\n  return cellsData.slice(currentGroupIndex, nextGroupIndex - 1).reduce((\n    acc: TimeScaleLabelData[], days: ViewCell[],\n  ) => (([\n    ...acc,\n    {\n      startDate: days[0].startDate,\n      endDate: days[0].endDate,\n      key: days[0].endDate + getCellKey(groups, groupIndex, groups.length - 1),\n      groupingInfo: days[0].groupingInfo,\n    },\n  ])), [] as TimeScaleLabelData[]);\n};\n\nexport const getLabelsForAllGroups: PureComputed<\n  [ViewCell[][], Group[][], GroupOrientation], TimeScaleLabelData[][]\n> = (cellsData, groups, groupOrientation) => {\n  if (groupOrientation === HORIZONTAL_GROUP_ORIENTATION) {\n    return [cellsData.map(cellsRow => ({\n      startDate: cellsRow[0].startDate,\n      endDate: cellsRow[0].endDate,\n      groupingInfo: cellsRow[0].groupingInfo,\n      key: cellsRow[0].endDate,\n    }))];\n  }\n\n  const groupCount = getGroupsLastRow(groups).length;\n  const singleGroupHeight = cellsData.length / groupCount;\n\n  return getGroupsLastRow(groups).reduce((\n    acc: TimeScaleLabelData[][], group: Group, groupIndex: number,\n  ) => [\n    ...acc,\n    getLabelsForSingleGroup(\n      groups, cellsData, groupIndex, singleGroupHeight,\n    ) as TimeScaleLabelData[],\n  ], [] as TimeScaleLabelData[][]);\n};\n\nexport const prepareVerticalViewCellsData: PureComputed<\n  [ViewCell[][], AllDayCell[][]], ViewCell[][][]\n> = (cellsData, allDayCellsData) => {\n  const groupCount = allDayCellsData?.length || 1;\n  const validCellsData = [] as ViewCell[][][];\n  const groupHeight = cellsData.length / groupCount;\n  for (let i = 0; i < groupCount; i += 1) {\n    validCellsData.push(cellsData.slice(i * groupHeight, (i + 1) * groupHeight));\n  }\n  return validCellsData;\n};\n","import moment from 'moment';\nimport { PureReducer } from '@devexpress/dx-core';\nimport { ChangeCurrentDatePayload } from '../../types';\n\nexport const changeCurrentDate: PureReducer<Date, ChangeCurrentDatePayload> = (\n  currentDate, {\n  nextDate, step, amount, direction,\n}) => (\n  nextDate\n  || moment(currentDate as Date)[direction === 'back' ? 'subtract' : 'add'](amount, step)\n    .toDate()\n  || moment().subtract(amount, step)\n);\n\nexport const setCurrentViewName: PureReducer<\n  string, string, string\n> = (currentViewName, nextViewName) => nextViewName;\n","import { PureReducer } from '@devexpress/dx-core';\nimport { AppointmentMeta } from '../../types';\n\nexport const setAppointmentMeta: PureReducer<AppointmentMeta, AppointmentMeta> = (\n  prevAppointmentMeta,\n  { target, data },\n) => ({ target, data });\n","export const OPEN_COMMAND_BUTTON = 'open';\nexport const CLOSE_COMMAND_BUTTON = 'close';\nexport const DELETE_COMMAND_BUTTON = 'delete';\nexport const CANCEL_COMMAND_BUTTON = 'cancel';\nexport const COMMIT_COMMAND_BUTTON = 'commit';\n","import { PureReducer } from '@devexpress/dx-core';\nimport { AppointmentModel, AppointmentDataPayload } from '../../types';\n\nexport const setAppointmentData: PureReducer<\n  AppointmentModel, AppointmentDataPayload\n> = (prevAppointmentData, { appointmentData }) => appointmentData;\n","import {\n  LONG_WEEK_DAY_OPTIONS, DAY_LONG_MONTH_OPTIONS,\n  LONG_MONTH_OPTIONS,\n} from '@devexpress/dx-scheduler-core';\nimport { PureComputed } from '@devexpress/dx-core';\nimport {\n  SelectOption, OptionsFormatterFn, DateFormatterFn, RecurrenceFrequency,\n} from '../../types';\nimport {\n  MONTHS_DATES, REPEAT_TYPES_ARRAY, WEEK_NUMBER_LABELS, DAYS_IN_WEEK, RRULE_REPEAT_TYPES,\n  BASIC_YEALY_COUNT, BASIC_MONTHLY_COUNT, BASIC_WEEKLY_COUNT, BASIC_DAILY_COUNT,\n} from './constants';\nimport { getDaysOfWeekDates, getDaysOfWeekArray } from './helpers';\n\nexport const getWeekNumberLabels: OptionsFormatterFn = getMessage =>\n  WEEK_NUMBER_LABELS.map((weekNumberLabel, index) => ({\n    text: getMessage(weekNumberLabel),\n    id: index,\n  }));\n\nexport const getDaysOfWeek: PureComputed<\n  [(date: Date, formatOptions: object) => string, number], Array<SelectOption>\n> = (formatDate, firstDayOfWeek) => {\n  const daysOfWeekArray = getDaysOfWeekArray(firstDayOfWeek);\n  const daysOfWeekDates = getDaysOfWeekDates(firstDayOfWeek);\n  return daysOfWeekDates.map(\n    (day, index) => ({\n      text: getDayOfWeek(day, formatDate),\n      id: index + 1 < DAYS_IN_WEEK ? daysOfWeekArray[index + 1] : daysOfWeekArray[0],\n    }),\n  );\n};\n\nexport const getMonths: DateFormatterFn = formatDate => MONTHS_DATES.map((month, index) => ({\n  text: getMonth(month, formatDate),\n  id: getMonthId(index),\n}));\n\nexport const getMonthsWithOf: PureComputed<\n  [(messageKey: string) => string, (date: Date, formatOptions: object) => string],\n    Array<SelectOption>\n> = (getMessage, formatDate) => MONTHS_DATES.map((month, index) => ({\n  text: getMonthWithOf(month, getMessage, formatDate),\n  id: getMonthId(index),\n}));\n\nconst getMonthWithOf = (\n  date: Date,\n  getMessage: (messageKey: string) => string,\n  formatDate: (date: Date, formatOptions: object) => string,\n) => getMessage('ofLabel')\n  + formatDate(date, DAY_LONG_MONTH_OPTIONS).replace(/[\\d.,]/g, '').toString();\n\nconst getMonth = (\n  date: Date,\n  formatDate: (date: Date, formatOptions: object) => string,\n) => formatDate(date, LONG_MONTH_OPTIONS);\n\nconst getDayOfWeek = (\n  date: Date,\n  formatDate: (date: Date, formatOptions: object) => string,\n) => formatDate(date, LONG_WEEK_DAY_OPTIONS);\n\nconst getMonthId: PureComputed<\n  [number], number\n> = index => index + 1;\n\nexport const getAvailableRecurrenceOptions: OptionsFormatterFn = getMessage =>\n  REPEAT_TYPES_ARRAY.map(type => ({\n    text: getMessage(type),\n    id: type,\n  }));\n\nexport const getCountDependingOnRecurrenceType = (frequency: RecurrenceFrequency) => {\n  let count;\n  switch (frequency) {\n    case RRULE_REPEAT_TYPES.YEARLY:\n      count = BASIC_YEALY_COUNT;\n      break;\n    case RRULE_REPEAT_TYPES.MONTHLY:\n      count = BASIC_MONTHLY_COUNT;\n      break;\n    case RRULE_REPEAT_TYPES.WEEKLY:\n      count = BASIC_WEEKLY_COUNT;\n      break;\n    case RRULE_REPEAT_TYPES.DAILY:\n      count = BASIC_DAILY_COUNT;\n      break;\n  }\n  return count;\n};\n\nexport const checkIsNaturalNumber: PureComputed<\n  [number], boolean\n> = number => number > 0 && number <= Number.MAX_SAFE_INTEGER;\n","import moment from 'moment';\nimport { PureComputed } from '@devexpress/dx-core';\nimport { RRule, Options, Weekday } from 'rrule';\nimport {\n  Action,\n  StartDate,\n  EndDate,\n  RadioGroupDisplayData,\n  ValidResource,\n} from '../../types';\nimport {\n  DEFAULT_RULE_OBJECT, RRULE_REPEAT_TYPES, REPEAT_TYPES, LAST_WEEK,\n  DAYS_OF_WEEK_ARRAY, DAYS_IN_WEEK, DAYS_OF_WEEK_DATES, RRULE_DAYS_OF_WEEK,\n} from './constants';\nimport { getCountDependingOnRecurrenceType } from './utils';\n\nexport const callActionIfExists: PureComputed<[Action, object], void> = (action, payload) => {\n  if (action) {\n    action(payload);\n  }\n};\n\nexport const isAllDayCell: PureComputed<\n  [StartDate, EndDate], boolean\n> = (\n  startDate, endDate,\n) => moment(endDate as EndDate).diff(moment(startDate as StartDate), 'days') >= 1;\n\nexport const changeRecurrenceFrequency: PureComputed<\n  [string, number, Date], string\n> = (\n  rule, freq, startDate,\n) => {\n  if (!rule) {\n    if (freq === RRULE_REPEAT_TYPES.MONTHLY) {\n      return (new RRule({\n        ...DEFAULT_RULE_OBJECT,\n        freq,\n        bymonthday: [startDate.getDate()],\n        count: getCountDependingOnRecurrenceType(freq),\n      })).toString();\n    }\n    if (freq === RRULE_REPEAT_TYPES.YEARLY) {\n      return (new RRule({\n        ...DEFAULT_RULE_OBJECT,\n        freq,\n        bymonthday: [startDate.getDate()],\n        bymonth: startDate.getMonth() + 1,\n        count: getCountDependingOnRecurrenceType(freq),\n      })).toString();\n    }\n    return (new RRule({\n      ...DEFAULT_RULE_OBJECT, freq, count: getCountDependingOnRecurrenceType(freq),\n    })).toString();\n  }\n\n  const options = RRule.parseString(rule);\n  if (options.freq === freq) return rule;\n\n  options.freq = freq;\n  options.count = getCountDependingOnRecurrenceType(freq);\n  if (freq === RRULE_REPEAT_TYPES.MONTHLY || freq === RRULE_REPEAT_TYPES.YEARLY) {\n    options.bymonthday = startDate.getDate();\n  }\n  if (freq === RRULE_REPEAT_TYPES.YEARLY) {\n    options.bymonth = startDate.getMonth() + 1;\n  }\n  if (freq === RRULE_REPEAT_TYPES.DAILY || freq === RRULE_REPEAT_TYPES.WEEKLY) {\n    options.bymonthday = undefined;\n  }\n  options.byweekday = undefined;\n  const nextRule = new RRule(options);\n  return nextRule.toString();\n};\n\nexport const getRecurrenceOptions: PureComputed<\n  [string | undefined], Partial<Options> | null\n> = rule => !rule ? null : RRule.parseString(rule);\n\nexport const changeRecurrenceOptions = (options: Partial<Options>) => {\n  return options ? (new RRule({ ...options })).toString() : undefined;\n};\n\nexport const handleStartDateChange = (nextStartDay: number, options: Partial<Options>) => {\n  if (nextStartDay <= 31) {\n    const nextOptions = { ...options, bymonthday: nextStartDay };\n    return changeRecurrenceOptions(nextOptions);\n  }\n  return changeRecurrenceOptions(options);\n};\n\nexport const handleToDayOfWeekChange = (\n  weekNumber: number, dayOfWeek: number, options: Partial<Options>,\n) => {\n  const validDayOfWeek = dayOfWeek > 0 ? dayOfWeek - 1 : 6;\n  const validWeekNumber = weekNumber === 4 ? -1 : weekNumber + 1;\n  const rruleDayOfWeek = RRULE_DAYS_OF_WEEK[validDayOfWeek];\n\n  const nextOptions = {\n    ...options,\n    byweekday: [rruleDayOfWeek.nth(validWeekNumber)],\n    bymonthday: undefined,\n  };\n\n  return changeRecurrenceOptions(nextOptions);\n};\n\nexport const getRRuleFrequency: PureComputed<\n  [string], number\n> = repeatType => RRULE_REPEAT_TYPES[repeatType.toUpperCase()];\n\nexport const getFrequencyString: PureComputed<\n  [number], string\n> = (rRuleFrequency) => {\n  if (rRuleFrequency === RRULE_REPEAT_TYPES.DAILY) return REPEAT_TYPES.DAILY;\n  if (rRuleFrequency === RRULE_REPEAT_TYPES.WEEKLY) return REPEAT_TYPES.WEEKLY;\n  if (rRuleFrequency === RRULE_REPEAT_TYPES.MONTHLY) return REPEAT_TYPES.MONTHLY;\n  if (rRuleFrequency === RRULE_REPEAT_TYPES.YEARLY) return REPEAT_TYPES.YEARLY;\n  return REPEAT_TYPES.NEVER;\n};\n\nexport const getRadioGroupDisplayData: PureComputed<\n  [Partial<Options>, number, number, number, string, string], RadioGroupDisplayData\n> = (\n  recurrenceOptions, stateDayOfWeek, stateWeekNumber, stateDayNumber, firstOption, secondOption,\n) => {\n  if (recurrenceOptions.bymonthday && !Array.isArray(recurrenceOptions.bymonthday)) {\n    return {\n      dayNumberTextField: (recurrenceOptions.bymonthday as number),\n      weekNumber: stateWeekNumber,\n      dayOfWeek: stateDayOfWeek,\n      radioGroupValue: firstOption,\n    };\n  }\n  if (!recurrenceOptions.byweekday) {\n    return {\n      dayOfWeek: stateDayOfWeek,\n      weekNumber: stateWeekNumber,\n      radioGroupValue: secondOption,\n      dayNumberTextField: stateDayNumber,\n    };\n  }\n  const dayOfWeek = recurrenceOptions.byweekday[0].weekday < 6\n    ? recurrenceOptions.byweekday[0].weekday + 1 : 0;\n  const weekNumber = recurrenceOptions.byweekday[0].n === -1\n    ? LAST_WEEK\n    : recurrenceOptions.byweekday[0].n - 1;\n\n  return {\n    dayOfWeek,\n    weekNumber,\n    radioGroupValue: secondOption,\n    dayNumberTextField: stateDayNumber,\n  };\n};\n\nexport const handleChangeFrequency: PureComputed<\n  [string, string, Date, Action], void\n> = (repeatType, rRule, startDate, action) => {\n  const rruleRepeatType = getRRuleFrequency(repeatType);\n  let nextRRule;\n  if (rruleRepeatType !== undefined) {\n    nextRRule = changeRecurrenceFrequency(\n      rRule,\n      rruleRepeatType,\n      startDate,\n    );\n  }\n  action({ rRule: nextRRule });\n};\n\nexport const handleWeekDaysChange: PureComputed<\n[Partial<Options>, number], void\n> = (options, currentWeekDay) => {\n  const byWeekDay = options.byweekday || [];\n  const index = (byWeekDay as Weekday[]).findIndex(({ weekday }) => weekday === currentWeekDay);\n\n  const isAdded = index === -1;\n\n  if (isAdded) {\n    (byWeekDay as Weekday[]).push(RRULE_DAYS_OF_WEEK[currentWeekDay]);\n  } else if (index > -1) {\n    (byWeekDay as Weekday[]).splice(index, 1);\n  }\n  if (byWeekDay === 0) return { ...options, byweekday: undefined };\n  return { ...options, byweekday: byWeekDay };\n};\n\nexport const getDaysOfWeekArray: PureComputed<[number], Array<number>> = (firstDayOfWeek) => {\n  const firstPart = DAYS_OF_WEEK_ARRAY.filter(\n    dayOfWeek => dayOfWeek >= firstDayOfWeek - 1 && dayOfWeek < DAYS_IN_WEEK - 1,\n  );\n  const secondPart = DAYS_OF_WEEK_ARRAY.filter(\n    dayOfWeek => dayOfWeek < firstDayOfWeek - 1 || dayOfWeek >= DAYS_IN_WEEK - 1,\n  );\n  return firstDayOfWeek !== 0 ? [...firstPart, ...secondPart] : [...secondPart, ...firstPart];\n};\n\nexport const getDaysOfWeekDates: PureComputed<[number], Array<Date>> = (firstDayOfWeek) => {\n  const firstPart = DAYS_OF_WEEK_DATES.slice(firstDayOfWeek, DAYS_OF_WEEK_DATES.length);\n  const secondPart = DAYS_OF_WEEK_DATES.slice(0, firstDayOfWeek);\n  return [...firstPart, ...secondPart];\n};\n\nexport const checkMultipleResourceFields: PureComputed<\n  [object, ValidResource[]], object\n> = (resourceFields, resources) => resources.reduce((acc, resource) => {\n  if (!resource.allowMultiple) {\n    return acc;\n  }\n\n  const fieldName = resource.fieldName;\n  const field = resourceFields[fieldName];\n  return {\n    ...acc,\n    [fieldName]: Array.isArray(field) ? field : [field],\n  };\n}, resourceFields);\n","import { PureReducer } from '@devexpress/dx-core';\nimport {\n  AddedAppointmentDataPayload, AppointmentModel, Changes, EditAppointmentPayload,\n} from '../../types';\n\nexport const addAppointment: PureReducer<\n  AppointmentModel, AddedAppointmentDataPayload, AppointmentModel | {}\n> = (\n  addedAppointmentData, { appointmentData } = { appointmentData:  {} },\n) => appointmentData;\n\nexport const cancelAddedAppointment = () => ({});\n\nexport const startEditAppointment: PureReducer<\n  Partial<AppointmentModel>, EditAppointmentPayload\n> = (prevEditingAppointment, appointmentData) => appointmentData;\n\nexport const stopEditAppointment = () => null;\n\nexport const changeAppointment: PureReducer<\nAppointmentModel, Changes\n> = (\n  appointment, { change },\n) => ({ ...appointment, ...change });\n\nexport const cancelChanges = () => ({});\n","import { PureComputed } from '@devexpress/dx-core';\nimport { AppointmentId, AppointmentChanges, Changes } from '../../types';\n\nexport const changedAppointmentById: PureComputed<\n  [Changes, AppointmentId], AppointmentChanges\n> = (changes, appointmentId) => (\n  { [appointmentId]: changes }\n);\n","import moment from 'moment';\nimport { RRule, RRuleSet } from 'rrule';\nimport {\n  AppointmentModel, PreCommitChangesFn, Changes, MakeDateSequenceFn, EditFn, DeleteFn, ChangeFn,\n} from '../../types';\nimport { RECURRENCE_EDIT_SCOPE } from '../../constants';\nimport { getUTCDate, getRRuleSetWithExDates, formatDateToString } from '../../utils';\n\nconst mergeNewChanges = (\n  appointmentData: Partial<AppointmentModel>, changes: Changes,\n) => {\n  const appointment = {\n    ...appointmentData,\n  };\n  delete appointment.id;\n  delete appointment.rRule;\n  delete appointment.exDate;\n  delete appointment.parentData;\n  return { ...appointment, ...changes };\n};\n\nconst reduceExDate = (prevExDate: string, boundDate: Date) => {\n  if (prevExDate.length > 0) {\n    return prevExDate.split(',').reduce((acc: string[], date: string) => {\n      const momentDate = moment.utc(date);\n      if (momentDate.isBefore(boundDate)) {\n        return [...acc, date];\n      }\n      return acc;\n    }, []).join(',');\n  }\n  return undefined;\n};\n\nconst configureExDate = (exDate: string | undefined, date: Date) => {\n  const currentExDate = `${moment.utc(date).format('YYYYMMDDTHHmmss')}Z`;\n  return exDate\n    ? `${exDate},${currentExDate}`\n    : currentExDate;\n};\n\nconst configureDateSequence: MakeDateSequenceFn = (rRule, exDate, prevStartDate, nextStartDate) => {\n  const rruleSet = getRRuleSetWithExDates(exDate);\n\n  const currentOptions = RRule.parseString(rRule as string);\n  const correctedOptions = currentOptions.until\n    ? { ...currentOptions, until: moment(getUTCDate(currentOptions.until)).toDate() }\n    : currentOptions;\n  const prevStartDateUTC = moment(getUTCDate(prevStartDate!)).toDate();\n  rruleSet.rrule(new RRule({\n    ...correctedOptions,\n    dtstart: prevStartDateUTC,\n  }));\n  if (currentOptions.count || currentOptions.until) {\n    return {\n      options: currentOptions,\n      dates: rruleSet.all()\n      // we shouldn't use `new Date(string)` because this function has different results in Safari\n      .map(nextDate => moment(formatDateToString(nextDate)).toDate()),\n    };\n  }\n  const leftBound = prevStartDateUTC;\n  const rightBound = moment(getUTCDate(nextStartDate!)).toDate();\n  return {\n    options: currentOptions,\n    dates: rruleSet.between(leftBound, rightBound, true)\n    .map(nextDate => moment(formatDateToString(nextDate)).toDate()),\n  };\n};\n\nconst configureICalendarRules = (rRule: string | undefined, options: object) => {\n  const rruleSet = new RRuleSet();\n  rruleSet.rrule(new RRule({\n    ...RRule.parseString(rRule as string),\n    ...options,\n  }));\n  return rruleSet.valueOf();\n};\n\nconst changeCurrentAndFollowing: ChangeFn = (appointmentData, changes, changeAllAction) => {\n  const { rRule, startDate, parentData, exDate: prevExDate = '', id } = appointmentData;\n\n  const { initialSequence, currentChildIndex } = getAppointmentSequenceData(\n    parentData.startDate, moment.utc(startDate as Date).toDate(), prevExDate, rRule,\n  );\n\n  if (currentChildIndex === 0) return changeAllAction(appointmentData, changes);\n\n  const changedRules = configureICalendarRules(rRule as string, {\n    dtstart: moment.utc(parentData.startDate).toDate(),\n    until: moment.utc(initialSequence[currentChildIndex - 1]).toDate(),\n    count: null,\n  });\n\n  const nextExDate = reduceExDate(prevExDate, startDate as Date);\n  return {\n    changed: {\n      [id!]: {\n        rRule: changedRules[1].slice(6),\n        ...nextExDate && prevExDate !== nextExDate ? { exDate: nextExDate } : {},\n      },\n    },\n  };\n};\n\nconst getAppointmentSequenceData = (\n  prevStartDate: Date, startDate: Date, exDate: string, rRule: string | undefined,\n) => {\n  const initialSequence = configureDateSequence(rRule, exDate,\n    moment.utc(prevStartDate).toDate(), moment.utc(startDate).toDate(),\n  ).dates;\n  const currentChildIndex = initialSequence\n    .findIndex(date => moment(date).isSame(startDate as Date));\n  return { initialSequence, currentChildIndex };\n};\n\nexport const deleteCurrent: DeleteFn = (appointmentData) => {\n  const { options, dates } = configureDateSequence(\n    appointmentData.rRule, appointmentData.exDate,\n    moment.utc(appointmentData.parentData.startDate).toDate(),\n    moment.utc(appointmentData.startDate).toDate(),\n  );\n\n  if ((options.count || options.until) && dates.length === 1) {\n    return deleteAll(appointmentData);\n  }\n\n  const nextExDate = configureExDate(appointmentData.exDate, appointmentData.startDate as Date);\n  return { changed: { [appointmentData.id!]: { exDate: nextExDate } } };\n};\n\nexport const deleteAll: DeleteFn = (appointmentData) => {\n  return { deleted: appointmentData.id };\n};\n\nexport const deleteCurrentAndFollowing: DeleteFn = appointmentData => changeCurrentAndFollowing(\n  appointmentData, {}, deleteAll,\n);\n\nexport const editAll: EditFn = (appointmentData, changes) => {\n  const { rRule, id } = appointmentData;\n\n  const initialRule = new RRule(RRule.parseString(rRule as string));\n  if (changes.startDate\n    && moment.utc(changes.startDate as Date).isAfter(initialRule.options.until!)) {\n    return {\n      changed: {\n        [id!]: {\n          ...changes,\n          rRule: 'FREQ=DAILY;COUNT=1',\n          exDate: '',\n        },\n      },\n    };\n  }\n\n  return  { changed: {  [appointmentData.id!]: changes } };\n};\n\nexport const editCurrent: EditFn = (appointmentData, changes) => ({\n  changed: {\n    [appointmentData.id!]: {\n      exDate: configureExDate(appointmentData.exDate, appointmentData.startDate as Date),\n    },\n  },\n  added: mergeNewChanges(appointmentData as Partial<AppointmentModel>, changes as Changes),\n});\n\nexport const editCurrentAndFollowing: EditFn = (appointmentData, changes) => {\n  const { rRule, startDate, exDate: prevExDate = '', parentData } = appointmentData;\n  const initialRule = new RRule(RRule.parseString(rRule as string));\n\n  const { initialSequence, currentChildIndex } = getAppointmentSequenceData(\n    parentData.startDate, moment.utc(startDate as Date).toDate(),  prevExDate, rRule,\n  );\n  if (currentChildIndex === 0) return editAll(appointmentData, changes);\n\n  const addedOptions = initialRule.options.count || initialRule.options.until\n    ? { count: initialSequence.length - currentChildIndex }\n    : {};\n  const addedRules = configureICalendarRules(appointmentData.rRule as string, {\n    dtstart: moment.utc(startDate as Date).toDate(),\n    ...addedOptions,\n  });\n\n  const addedAppointment = moment.utc(changes.startDate as Date).isAfter(initialRule.options.until!)\n    ? { rRule: 'FREQ=DAILY;COUNT=1', exDate: '' } : { rRule: addedRules[1].slice(6) };\n\n  return {\n    changed: changeCurrentAndFollowing(appointmentData, changes, editAll).changed,\n    added: {\n      ...addedAppointment, ...mergeNewChanges(appointmentData, changes),\n    },\n  };\n};\n\nexport const preCommitChanges: PreCommitChangesFn = (\n  changes, appointmentData, editType,\n) => {\n  if (changes === null) {\n    switch (editType) {\n      case RECURRENCE_EDIT_SCOPE.ALL: {\n        return deleteAll(appointmentData);\n      }\n      case RECURRENCE_EDIT_SCOPE.CURRENT: {\n        return deleteCurrent(appointmentData);\n      }\n      case RECURRENCE_EDIT_SCOPE.CURRENT_AND_FOLLOWING: {\n        return deleteCurrentAndFollowing(appointmentData);\n      }\n    }\n  } else {\n    switch (editType) {\n      case RECURRENCE_EDIT_SCOPE.ALL: {\n        return editAll(appointmentData, changes);\n      }\n      case RECURRENCE_EDIT_SCOPE.CURRENT: {\n        return editCurrent(appointmentData, changes);\n      }\n      case RECURRENCE_EDIT_SCOPE.CURRENT_AND_FOLLOWING: {\n        return editCurrentAndFollowing(appointmentData, changes);\n      }\n    }\n  }\n  return {};\n};\n","import moment from 'moment';\nimport { PureComputed } from '@devexpress/dx-core';\nimport {\n  ViewCell, ClientOffset, TimeType, ScrollingStrategy,\n  AllDayCell, CalculateAppointmentTimeBoundaries,\n  TimeBoundariesByDrag, TimeBoundariesByResize, AppointmentModel,\n  CellElementsMeta, Grouping, ValidResource, Group, SchedulerDateTime, GroupOrientation,\n} from '../../types';\nimport {\n  VERTICAL_TYPE, HORIZONTAL_TYPE, SCROLL_OFFSET, MINUTES,\n  SECONDS, RESIZE_TOP, RESIZE_BOTTOM, HOURS,\n} from '../../constants';\nimport {\n  allDayRects, horizontalTimeTableRects, verticalTimeTableRects,\n} from '../common/calculate-rects';\n\nconst clamp: PureComputed<\n  [number, number, number]\n> = (value, min, max) => Math.max(Math.min(value, max), min);\n\nconst calculateInsideOffset: PureComputed<\n  [string, number, number], number\n> = (targetType, insidePart, cellDurationMinutes) => targetType === VERTICAL_TYPE\n  ? insidePart * cellDurationMinutes * 60 / 2 : 0;\n\nexport const cellType: PureComputed<\n  [ViewCell | AllDayCell], string\n> = data => moment(data.startDate as Date)\n  .isSame(data.endDate as Date, 'day') ? VERTICAL_TYPE : HORIZONTAL_TYPE;\n\nexport const intervalDuration: PureComputed<\n  [ViewCell | AllDayCell, TimeType], number\n> = (data, type) => moment(data.endDate as Date).diff(data.startDate as Date, type);\n\nexport const cellIndex: PureComputed<\n  [Array<() => ClientRect>, ClientOffset], number\n> = (getCellRects, clientOffset) => getCellRects.findIndex((getCellRect) => {\n  const { left, top, right, bottom } = getCellRect();\n  const isOver = clientOffset\n      && clamp(clientOffset.x, left, right) === clientOffset.x\n      && clamp(clientOffset.y, top, bottom) === clientOffset.y;\n  return isOver;\n});\n\nexport const cellData: PureComputed<\n  [number, number, ViewCell[][], ViewCell[][]], ViewCell | AllDayCell\n> = (timeTableIndex, allDayIndex, viewCellsData, allDayCellsData) => {\n  const cellsData = allDayIndex !== -1 ? allDayCellsData : viewCellsData;\n  const currentIndex = allDayIndex !== -1 ? allDayIndex : timeTableIndex;\n  const tableWidth = cellsData[0].length;\n\n  const rowIndex = Math.floor(currentIndex / tableWidth);\n  const columnIndex = currentIndex % tableWidth;\n  return cellsData[rowIndex][columnIndex];\n};\n\nexport const autoScroll: PureComputed<\n  [ClientOffset, ScrollingStrategy, number], void\n> = (clientOffset, scrollingStrategy, scrollSpeed) => {\n  scroll(\n    clientOffset.y, scrollingStrategy.topBoundary, scrollingStrategy.bottomBoundary,\n    scrollingStrategy.changeVerticalScroll, scrollSpeed,\n  );\n  scroll(\n    clientOffset.x, scrollingStrategy.leftBoundary, scrollingStrategy.rightBoundary,\n    scrollingStrategy.changeHorizontalScroll, scrollSpeed,\n  );\n};\n\nconst scroll: PureComputed<\n  [number, number, number, (value: number) => void, number], void\n> = (offset, firstBoundary, secondBoundary, changeScroll, scrollSpeed) => {\n  if ((offset < firstBoundary + SCROLL_OFFSET) && (offset > firstBoundary)) {\n    changeScroll(-scrollSpeed);\n  }\n  if (secondBoundary - SCROLL_OFFSET < offset) {\n    changeScroll(+scrollSpeed);\n  }\n};\n\nexport const timeBoundariesByResize: TimeBoundariesByResize = (\n  payload, targetData, targetType, cellDurationMinutes, insidePart,\n) => {\n  if (targetType !== payload.appointmentType) {\n    return { appointmentStartTime: undefined, appointmentEndTime: undefined };\n  }\n\n  let appointmentStartTime;\n  let appointmentEndTime;\n  const sourceType = payload.type;\n\n  if (sourceType === RESIZE_TOP) {\n    const insideTopOffset = calculateInsideOffset(targetType, insidePart, cellDurationMinutes);\n    appointmentStartTime = moment(targetData.startDate as Date)\n      .add(insideTopOffset, SECONDS).toDate();\n    appointmentEndTime = moment(payload.endDate as Date).toDate();\n  }\n  if (sourceType === RESIZE_BOTTOM) {\n    const insideBottomOffset = insidePart === 0 && targetType === VERTICAL_TYPE\n      ? cellDurationMinutes * 60 / 2 : 0;\n    appointmentEndTime = moment(targetData.endDate as Date)\n      .add(-insideBottomOffset, SECONDS).toDate();\n    appointmentStartTime = moment(payload.startDate as Date).toDate();\n  }\n  // keep origin appointment duration if coordinates are wrong\n  if (moment(appointmentEndTime).diff(appointmentStartTime, MINUTES) < 1) {\n    appointmentStartTime = moment(payload.startDate as Date).toDate();\n    appointmentEndTime = moment(payload.endDate as Date).toDate();\n  }\n  return { appointmentStartTime, appointmentEndTime };\n};\n\nexport const timeBoundariesByDrag: TimeBoundariesByDrag = (\n  payload, targetData, targetType,\n  cellDurationMinutes, insidePart, offsetTimeTopBase,\n) => {\n  if (targetType === HORIZONTAL_TYPE\n    && intervalDuration(payload, SECONDS) < intervalDuration(targetData, SECONDS)) {\n    return {\n      appointmentStartTime: targetData.startDate as Date,\n      appointmentEndTime: targetData.endDate as Date,\n      offsetTimeTop: 0,\n    };\n  }\n  let offsetTimeTop;\n  let appointmentStartTime;\n  let appointmentEndTime;\n\n  const insideOffset = calculateInsideOffset(targetType, insidePart, cellDurationMinutes);\n  const start = moment(targetData.startDate as Date).add(insideOffset, SECONDS);\n\n  if (offsetTimeTopBase === null) {\n    offsetTimeTop = moment(targetData.startDate as Date)\n      .diff(payload.startDate as Date, SECONDS) + insideOffset;\n  } else {\n    offsetTimeTop = offsetTimeTopBase;\n  }\n\n  if (payload.type === targetType) {\n    const appointmentDurationSeconds = intervalDuration(payload, SECONDS);\n    appointmentStartTime = moment(start).add((offsetTimeTop) * (-1), SECONDS).toDate();\n    appointmentEndTime = moment(start)\n      .add((appointmentDurationSeconds - offsetTimeTop), SECONDS).toDate();\n  } else {\n    appointmentStartTime = moment(targetData.startDate as Date)\n      .add(insideOffset, SECONDS).toDate();\n    appointmentEndTime = moment(targetData.endDate as Date).add(insideOffset, SECONDS).toDate();\n  }\n\n  return { appointmentStartTime, appointmentEndTime, offsetTimeTop };\n};\n\nexport const calculateAppointmentTimeBoundaries: CalculateAppointmentTimeBoundaries = (\n  payload, targetData, targetType,\n  cellDurationMinutes, insidePart, offsetTimeTopBase,\n) => {\n  const isDragging = (payload.type === VERTICAL_TYPE || payload.type === HORIZONTAL_TYPE);\n\n  return(isDragging\n    ? timeBoundariesByDrag(\n        payload, targetData as AppointmentModel, targetType,\n        cellDurationMinutes, insidePart, offsetTimeTopBase,\n      )\n    : timeBoundariesByResize(\n        payload, targetData as AppointmentModel, targetType, cellDurationMinutes, insidePart,\n      )\n  );\n};\n\nexport const calculateInsidePart: PureComputed<\n  [number, Array<() => ClientRect>, number]\n> = (top, timeTableCellsRects, timeTableIndex) => {\n  if (timeTableIndex !== undefined && timeTableIndex !== -1) {\n    const cellRect = timeTableCellsRects[timeTableIndex]();\n    return top > cellRect.top + cellRect.height / 2 ? 1 : 0;\n  }\n  return 0;\n};\n\nexport const calculateDraftAppointments = (\n  allDayIndex: number, draftAppointments: any, startViewDate: Date,\n  endViewDate: Date, excludedDays: number[], viewCellsData: any,\n  getAllDayCellsElementRects: CellElementsMeta,\n  targetType: string, cellDurationMinutes: number,\n  getTableCellElementRects: CellElementsMeta,\n  grouping: Grouping[], resources: ValidResource[], groups: Group[][],\n  groupOrientation: GroupOrientation, groupedByDate: boolean,\n) => {\n  if (allDayIndex !== -1 || (targetType === VERTICAL_TYPE\n    && getAllDayCellsElementRects.getCellRects.length\n    && intervalDuration(draftAppointments[0].dataItem, HOURS) > 23)) {\n    const allDayDrafts = draftAppointments.map((draftAppt: any) => ({\n      ...draftAppt,\n      allDay: true,\n    }));\n\n    return {\n      allDayDraftAppointments: allDayRects(\n        allDayDrafts, startViewDate, endViewDate,\n        excludedDays, viewCellsData, getAllDayCellsElementRects,\n        grouping, resources, groups, groupOrientation, groupedByDate,\n      ),\n      timeTableDraftAppointments: [],\n    };\n  }\n\n  if (targetType === VERTICAL_TYPE || allDayIndex !== -1) {\n    return {\n      allDayDraftAppointments: [],\n      timeTableDraftAppointments: verticalTimeTableRects(\n        draftAppointments, startViewDate, endViewDate,\n        excludedDays, viewCellsData, cellDurationMinutes, getTableCellElementRects,\n        grouping, resources, groups, groupOrientation, groupedByDate,\n      ),\n    };\n  }\n  return {\n    allDayDraftAppointments: [],\n    timeTableDraftAppointments: horizontalTimeTableRects(\n      draftAppointments, startViewDate, endViewDate,\n      viewCellsData, getTableCellElementRects,\n      grouping, resources, groups, groupOrientation, groupedByDate,\n    ),\n  };\n};\n\nexport const calculateAppointmentGroups: PureComputed<\n  [Array<Group> | undefined, Array<ValidResource>, AppointmentModel], any\n> = (cellGroupingInfo, resources, appointmentData) => {\n  if (!cellGroupingInfo) return {};\n  return cellGroupingInfo.reduce((acc, group: Group) => {\n    const isMultipleResource = resources.find(\n      resource => (resource.fieldName === group.fieldName),\n    )!.allowMultiple;\n    return {\n      ...acc,\n      [group.fieldName]: isMultipleResource\n        ? updateMultipleResourceInfo(group, appointmentData) : group.id,\n    };\n  }, {});\n};\n\nconst updateMultipleResourceInfo: PureComputed<\n  [Group, AppointmentModel], any\n> = (cellResource, appointmentData) => {\n  const appointmentGroupItems = appointmentData[cellResource.fieldName];\n  if (appointmentGroupItems.findIndex((groupItem: any) => groupItem === cellResource.id) !== -1) {\n    return appointmentGroupItems;\n  }\n  return [cellResource.id];\n};\n\nexport const appointmentDragged: PureComputed<\n  [SchedulerDateTime, SchedulerDateTime, SchedulerDateTime, SchedulerDateTime, any, any], boolean\n> = (start, startPrev, end, endPrev, groupingInfo, groupingInfoPrev) => {\n  if (moment(start as Date).isSame(startPrev as Date)\n      && moment(end as Date).isSame(endPrev as Date)\n      && groupingInfoNotChanged(groupingInfo, groupingInfoPrev)) {\n    return false;\n  }\n  return true;\n};\n\nconst groupingInfoNotChanged: PureComputed<\n  [any, any], boolean\n> = (groupingInfo, groupingInfoPrev) => {\n  const fields = Object.getOwnPropertyNames(groupingInfo);\n  return fields.every((field) => {\n    if (Array.isArray(groupingInfo[field]) && Array.isArray(groupingInfoPrev[field])) {\n      return groupingInfo[field].every((item: any, index: number) => (\n        item === groupingInfoPrev[field][index]\n      ));\n    }\n    return groupingInfo[field] === groupingInfoPrev[field];\n  });\n};\n","import { PureComputed } from '@devexpress/dx-core';\nimport moment from 'moment';\nimport {\n  IsCellShadedFn, IsShadedAppointment,\n  GetCurrentTimeIndicatorTopFn,\n} from '../../types';\n\nexport const isMonthCell: PureComputed<\n  [boolean | undefined], boolean\n> = otherMonth => otherMonth !== undefined;\n\nexport const isShadedAppointment: IsShadedAppointment = (\n  { data: appointmentData }, currentTime, shadePreviousAppointments,\n) => {\n  const momentCurrentDate = moment(currentTime);\n  if (appointmentData.allDay) {\n    return momentCurrentDate.isAfter(appointmentData.endDate as Date, 'day')\n    && shadePreviousAppointments;\n  }\n  if (momentCurrentDate.isAfter(appointmentData.endDate as Date)) {\n    return shadePreviousAppointments;\n  }\n  return false;\n};\n\nexport const getCurrentTimeIndicatorTop: GetCurrentTimeIndicatorTopFn = (\n  cellData, currentTime,\n) => {\n  const top = ((currentTime - cellData.startDate.getTime()) * 100)\n  / (cellData.endDate.getTime() - cellData.startDate.getTime());\n  return (top < 0 || top > 100) ? undefined : `${top}%`;\n};\n\nexport const isCellShaded: IsCellShadedFn = (\n  { startDate, endDate, otherMonth }, currentTime, shadePreviousCells,\n) => {\n  const monthCell = isMonthCell(otherMonth);\n  return ((startDate.getTime() < currentTime && !monthCell)\n    || endDate.getTime() < currentTime && monthCell) && shadePreviousCells;\n};\n","import { GetAppointmentResources, ValidResourceInstance, ValidResource } from '../../types';\nimport { PureComputed } from '@devexpress/dx-core';\n\nexport const getAppointmentResources: GetAppointmentResources = (\n  appointment, resources, plainResources,\n) => {\n  if (\n    !resources || resources.length === 0\n    || !plainResources || plainResources.length === 0\n  ) return [];\n\n  return resources.reduce((acc, resource) => {\n    const appointmentResourceId = appointment[resource.fieldName];\n    if (appointmentResourceId === undefined) return acc;\n\n    if (resource.allowMultiple && !Array.isArray(appointmentResourceId)\n    || !resource.allowMultiple && Array.isArray(appointmentResourceId)) {\n      // throw error\n      return acc;\n    }\n\n    if (resource.allowMultiple) {\n      return [\n        ...acc,\n        ...(appointmentResourceId as Array<number | string>)\n        .reduce((prevResources, itemId) => addResourceToAppointmentResources(\n          plainResources, prevResources, resource, itemId,\n        ) as Array<ValidResourceInstance>, [] as Array<ValidResourceInstance>),\n      ];\n    }\n\n    return addResourceToAppointmentResources(\n      plainResources, acc, resource, appointmentResourceId,\n    ) as Array<ValidResourceInstance>;\n  }, [] as Array<ValidResourceInstance>);\n};\n\nconst addResourceToAppointmentResources: PureComputed<\n  [Array<ValidResourceInstance>, Array<ValidResourceInstance>, ValidResource,\n  number | string], Array<ValidResourceInstance>\n> = (plainResources, appointmentResources, resource, resourceId) => {\n  const currentResource = plainResources.find(\n    plainItem => resource.fieldName === plainItem.fieldName && plainItem.id === resourceId,\n  );\n\n  return currentResource ? [\n    ...appointmentResources,\n    currentResource!,\n  ] : appointmentResources;\n};\n","import {\n  ConvertResourcesToPlain, ValidateResources, ValidResourceInstance, AddResourcesToAppointments,\n} from '../../types';\nimport { getAppointmentResources } from './helpers';\n\nexport const convertResourcesToPlain: ConvertResourcesToPlain = (validResources) => {\n  return validResources.reduce((acc, resource) => [\n    ...acc,\n    ...resource.instances.map(item => item),\n  ], [] as Array<ValidResourceInstance>);\n};\n\nexport const validateResources: ValidateResources = (resources, mainResourceName, palette) => {\n  const isMainResourceDefined = !!mainResourceName;\n  let currentPaletteIndex = 0;\n  return resources.map((resource, groupIndex) => {\n    const fieldName = resource.fieldName;\n    const isMain = isMainResourceDefined && mainResourceName === fieldName\n      || groupIndex === 0 && !isMainResourceDefined;\n    const title = resource.title || fieldName;\n    const allowMultiple = !!resource.allowMultiple;\n    return {\n      fieldName,\n      isMain,\n      title,\n      allowMultiple,\n      instances: resource.instances.map((resourceItem) => {\n        const color = resourceItem.color || palette[currentPaletteIndex % palette.length];\n        if (!resourceItem.color) currentPaletteIndex += 1;\n\n        return ({\n          id: resourceItem.id,\n          color,\n          fieldName,\n          text: resourceItem.text || title || fieldName,\n          title,\n          allowMultiple,\n          isMain,\n        });\n      }),\n    };\n  });\n};\n\nexport const addResourcesToAppointments: AddResourcesToAppointments = (\n  appointments, resources, plainResources,\n) => [\n  appointments.map(appointment => ({\n    ...appointment,\n    resources: getAppointmentResources(appointment.dataItem, resources, plainResources),\n  })),\n];\n","import { PureReducer, slice } from '@devexpress/dx-core';\nimport {\n  ResourceGroupingState, ToggleGroupPayload,\n} from '../../types';\n\nexport const toggleExpandedGroups: PureReducer<ResourceGroupingState, ToggleGroupPayload> = (\n  state, { groupKey },\n) => {\n  const expandedGroups = slice(state.expandedGroups);\n  const groupKeyIndex = expandedGroups.indexOf(groupKey);\n\n  if (groupKeyIndex > -1) {\n    expandedGroups.splice(groupKeyIndex, 1);\n  } else {\n    expandedGroups.push(groupKey);\n  }\n\n  return { expandedGroups };\n};\n","import moment, { Moment } from 'moment';\nimport { ViewCell } from '../../types';\nimport { PureComputed } from '@devexpress/dx-core';\n\nexport const getDayScaleCellColSpan: PureComputed<\n  [ViewCell[][]], number\n> = (cellsData) => {\n  const firstDate = cellsData[0][0].startDate;\n  let count = 1;\n  while (cellsData[0][count] && moment(cellsData[0][count].startDate).isSame(firstDate, 'day')) {\n    count += 1;\n  }\n  return count;\n};\n\nexport const getDayScaleCells: PureComputed<\n[ViewCell[][], boolean], ViewCell[]\n> = (cellsData, groupedByDate) => {\n  if (!groupedByDate) {\n    return cellsData[0].map(({\n      startDate, endDate, today, endOfGroup, groupingInfo,\n    }, index) => ({\n      key: index.toString(),\n      startDate, endDate, today, endOfGroup, groupingInfo,\n    }));\n  }\n  let prevDate: Moment;\n  const colSpan = getDayScaleCellColSpan(cellsData);\n  return cellsData[0].reduce((acc, { startDate, endDate, today }, index) => {\n    const currentDate = moment(startDate);\n    if (currentDate.isSame(prevDate)) {\n      return acc;\n    }\n    prevDate = currentDate;\n    return [\n      ...acc, {\n        key: index.toString(),\n        startDate, endDate, today, colSpan,\n        endOfGroup: true,\n      },\n    ];\n  }, [] as ViewCell[]);\n};\n","import { PureComputed } from '@devexpress/dx-core';\nimport { SchedulerDateTime } from '../../types';\nimport moment from 'moment';\n\nexport const navigateByOneMonth: PureComputed<\n  [SchedulerDateTime, boolean], Date\n> = (currentDate, isBackward) => moment(currentDate as SchedulerDateTime)\n  [isBackward ? 'subtract' : 'add'](1, 'month').toDate();\n","import { AppointmentModel, SchedulerDateTime } from './scheduler-core.types';\nimport { PureComputed } from '@devexpress/dx-core';\nimport { RRULE_REPEAT_TYPES } from '../plugins/appointment-form/constants';\n\n/** @internal */\nexport type Action = ([fieldName]?: any) => void;\n/** @internal */\nexport type StartDate = SchedulerDateTime;\n/** @internal */\nexport type EndDate = SchedulerDateTime;\n/** @internal */\nexport type AppointmentDataPayload = {\n  appointmentData: AppointmentModel;\n};\n/** @internal */\nexport type AddedAppointmentDataPayload = {\n  appointmentData: AppointmentModel | {};\n};\n/** @internal */\nexport type RadioGroupDisplayData = {\n  weekNumber: number;\n  dayNumberTextField: number;\n  dayOfWeek: number;\n  radioGroupValue: string;\n};\n/** An option in the Select editor. */\nexport type SelectOption = {\n  /** The option's text. */\n  text: string;\n  /** The option's id. */\n  id: number | string;\n};\n/** @internal */\nexport type OptionsFormatterFn = PureComputed<\n  [(messageKey: string) => string], Array<SelectOption>\n>;\n/** @internal */\nexport type DateFormatterFn = PureComputed<\n  [(date: Date, formatOptions: object) => string], Array<SelectOption>\n>;\n/** @internal */\nexport enum RecurrenceFrequency {\n  Daily = RRULE_REPEAT_TYPES.DAILY,\n  Weekly = RRULE_REPEAT_TYPES.WEEKLY,\n  Monthly = RRULE_REPEAT_TYPES.MONTHLY,\n  Yearly = RRULE_REPEAT_TYPES.YEARLY,\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}