{"ast":null,"code":"import * as React from 'react';\nimport { SafeAreaProvider, SafeAreaConsumer, initialWindowSafeAreaInsets } from 'react-native-safe-area-context';\nimport { getStatusBarHeight, getBottomSpace } from 'react-native-iphone-x-helper'; // The provider component for safe area initializes asynchornously\n// Until the insets are available, there'll be blank screen\n// To avoid the blank screen, we specify some initial values\n\nconst initialSafeAreaInsets = {\n  // Approximate values which are good enough for most cases\n  top: getStatusBarHeight(true),\n  bottom: getBottomSpace(),\n  right: 0,\n  left: 0,\n  // If we are on a newer version of the library, we can get the correct window insets\n  // The component might not be filling the window, but this is good enough for most cases\n  ...initialWindowSafeAreaInsets\n};\nexport default function SafeAreaProviderCompat(_ref) {\n  let {\n    children\n  } = _ref;\n  return /*#__PURE__*/React.createElement(SafeAreaConsumer, null, insets => {\n    if (insets) {\n      // If we already have insets, don't wrap the stack in another safe area provider\n      // This avoids an issue with updates at the cost of potentially incorrect values\n      // https://github.com/react-navigation/react-navigation/issues/174\n      return children;\n    }\n    return /*#__PURE__*/React.createElement(SafeAreaProvider, {\n      initialSafeAreaInsets: initialSafeAreaInsets\n    }, children);\n  });\n}","map":{"version":3,"names":["React","SafeAreaProvider","SafeAreaConsumer","initialWindowSafeAreaInsets","getStatusBarHeight","getBottomSpace","initialSafeAreaInsets","top","bottom","right","left","SafeAreaProviderCompat","_ref","children","createElement","insets"],"sources":["/Users/solomon-moulang-lewis/Documents/University/Year 2/Term 2/User interface design/soen357Project/client/node_modules/react-navigation-stack/lib/module/vendor/views/SafeAreaProviderCompat.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  SafeAreaProvider,\n  SafeAreaConsumer,\n  initialWindowSafeAreaInsets,\n} from 'react-native-safe-area-context';\nimport {\n  getStatusBarHeight,\n  getBottomSpace,\n} from 'react-native-iphone-x-helper';\n\n// The provider component for safe area initializes asynchornously\n// Until the insets are available, there'll be blank screen\n// To avoid the blank screen, we specify some initial values\nconst initialSafeAreaInsets = {\n  // Approximate values which are good enough for most cases\n  top: getStatusBarHeight(true),\n  bottom: getBottomSpace(),\n  right: 0,\n  left: 0,\n  // If we are on a newer version of the library, we can get the correct window insets\n  // The component might not be filling the window, but this is good enough for most cases\n  ...initialWindowSafeAreaInsets,\n};\n\ntype Props = {\n  children: React.ReactNode;\n};\n\nexport default function SafeAreaProviderCompat({ children }: Props) {\n  return (\n    <SafeAreaConsumer>\n      {(insets) => {\n        if (insets) {\n          // If we already have insets, don't wrap the stack in another safe area provider\n          // This avoids an issue with updates at the cost of potentially incorrect values\n          // https://github.com/react-navigation/react-navigation/issues/174\n          return children;\n        }\n\n        return (\n          <SafeAreaProvider initialSafeAreaInsets={initialSafeAreaInsets}>\n            {children}\n          </SafeAreaProvider>\n        );\n      }}\n    </SafeAreaConsumer>\n  );\n}\n"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SACEC,gBADF,EAEEC,gBAFF,EAGEC,2BAHF,QAIO,gCAJP;AAKA,SACEC,kBADF,EAEEC,cAFF,QAGO,8BAHP,C,CAKA;AACA;AACA;;AACA,MAAMC,qBAAqB,GAAG;EAC5B;EACAC,GAAG,EAAEH,kBAAkB,CAAC,IAAD,CAFK;EAG5BI,MAAM,EAAEH,cAAc,EAHM;EAI5BI,KAAK,EAAE,CAJqB;EAK5BC,IAAI,EAAE,CALsB;EAM5B;EACA;EACA,GAAGP;AARyB,CAA9B;AAeA,eAAe,SAASQ,sBAATA,CAAAC,IAAA,EAAqD;EAAA,IAArB;IAAEC;EAAF,CAAhC,GAAAD,IAAA;EACb,oBACEZ,KAAA,CAAAc,aAAA,CAACZ,gBAAD,QACIa,MAAD,IAAY;IACX,IAAIA,MAAJ,EAAY;MACV;MACA;MACA;MACA,OAAOF,QAAP;IACD;IAED,oBACEb,KAAA,CAAAc,aAAA,CAACb,gBAAD;MAAkBK,qBAAqB,EAAEA;IAAzC,GACGO,QADH,CADF;EAKD,CAdH,CADF;AAkBD"},"metadata":{},"sourceType":"module","externalDependencies":[]}