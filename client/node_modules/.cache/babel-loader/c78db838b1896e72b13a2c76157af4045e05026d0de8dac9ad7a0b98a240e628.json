{"ast":null,"code":"import * as NavigationActions from '../NavigationActions';\nimport * as StackActions from './StackActions';\nimport createConfigGetter from './createConfigGetter';\nimport getScreenForRouteName from './getScreenForRouteName';\nimport StateUtils from '../StateUtils';\nimport validateRouteConfigMap from './validateRouteConfigMap';\nimport invariant from '../utils/invariant';\nimport { generateKey } from './KeyGenerator';\nimport { createPathParser } from './pathUtils';\nfunction behavesLikePushAction(action) {\n  return action.type === NavigationActions.NAVIGATE || action.type === StackActions.PUSH;\n}\nconst defaultActionCreators = () => ({});\nfunction isResetToRootStack(action) {\n  return action.type === StackActions.RESET && action.key === null;\n}\nexport default (function (routeConfigs) {\n  let stackConfig = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  // Fail fast on invalid route definitions\n  validateRouteConfigMap(routeConfigs);\n  const childRouters = {};\n  const routeNames = Object.keys(routeConfigs); // Loop through routes and find child routers\n\n  routeNames.forEach(routeName => {\n    // We're not using `getScreenForRouteName` here to preserve the lazy loading\n    // behaviour of routes. This means that routes with child routers must be\n    // defined using a component directly or with an object with a screen prop.\n    const routeConfig = routeConfigs[routeName];\n    const screen = routeConfig && routeConfig.screen ? routeConfig.screen : routeConfig;\n    if (screen && screen.router) {\n      // If it has a router it's a navigator.\n      childRouters[routeName] = screen.router;\n    } else {\n      // If it doesn't have router it's an ordinary React component.\n      childRouters[routeName] = null;\n    }\n  });\n  const {\n    initialRouteParams\n  } = stackConfig;\n  const getCustomActionCreators = stackConfig.getCustomActionCreators || defaultActionCreators;\n  const initialRouteName = stackConfig.initialRouteName || routeNames[0];\n  const initialChildRouter = childRouters[initialRouteName];\n  function getInitialState(action) {\n    let route = {};\n    const childRouter = childRouters[action.routeName]; // This is a push-like action, and childRouter will be a router or null if we are responsible for this routeName\n\n    if (behavesLikePushAction(action) && childRouter !== undefined) {\n      let childState = {}; // The router is null for normal leaf routes\n\n      if (childRouter !== null) {\n        const childAction = action.action || NavigationActions.init({\n          params: action.params\n        });\n        childState = childRouter.getStateForAction(childAction);\n      }\n      return {\n        key: 'StackRouterRoot',\n        isTransitioning: false,\n        index: 0,\n        routes: [{\n          params: action.params,\n          ...childState,\n          key: action.key || generateKey(),\n          routeName: action.routeName\n        }]\n      };\n    }\n    if (initialChildRouter) {\n      route = initialChildRouter.getStateForAction(NavigationActions.navigate({\n        routeName: initialRouteName,\n        params: initialRouteParams\n      }));\n    }\n    const params = (routeConfigs[initialRouteName].params || route.params || action.params || initialRouteParams) && {\n      ...(routeConfigs[initialRouteName].params || {}),\n      ...(route.params || {}),\n      ...(action.params || {}),\n      ...(initialRouteParams || {})\n    };\n    const {\n      initialRouteKey\n    } = stackConfig;\n    route = {\n      ...route,\n      ...(params ? {\n        params\n      } : {}),\n      routeName: initialRouteName,\n      key: action.key || initialRouteKey || generateKey()\n    };\n    return {\n      key: 'StackRouterRoot',\n      isTransitioning: false,\n      index: 0,\n      routes: [route]\n    };\n  }\n  function getParamsForRouteAndAction(routeName, action) {\n    let routeConfig = routeConfigs[routeName];\n    if (routeConfig && routeConfig.params) {\n      return {\n        ...routeConfig.params,\n        ...action.params\n      };\n    } else {\n      return action.params;\n    }\n  }\n  const {\n    getPathAndParamsForRoute,\n    getActionForPathAndParams\n  } = createPathParser(childRouters, routeConfigs, stackConfig);\n  return {\n    childRouters,\n    getComponentForState(state) {\n      const activeChildRoute = state.routes[state.index];\n      const {\n        routeName\n      } = activeChildRoute;\n      if (childRouters[routeName]) {\n        return childRouters[routeName].getComponentForState(activeChildRoute);\n      }\n      return getScreenForRouteName(routeConfigs, routeName);\n    },\n    getComponentForRouteName(routeName) {\n      return getScreenForRouteName(routeConfigs, routeName);\n    },\n    getActionCreators(route, navStateKey) {\n      return {\n        ...getCustomActionCreators(route, navStateKey),\n        pop: (n, params) => StackActions.pop({\n          n,\n          ...params\n        }),\n        popToTop: params => StackActions.popToTop(params),\n        push: (routeName, params, action) => StackActions.push({\n          routeName,\n          params,\n          action\n        }),\n        replace: (replaceWith, params, action, newKey) => {\n          if (typeof replaceWith === 'string') {\n            return StackActions.replace({\n              routeName: replaceWith,\n              params,\n              action,\n              key: route.key,\n              newKey\n            });\n          }\n          invariant(typeof replaceWith === 'object', 'Must replaceWith an object or a string');\n          invariant(params == null, 'Params must not be provided to .replace() when specifying an object');\n          invariant(action == null, 'Child action must not be provided to .replace() when specifying an object');\n          invariant(newKey == null, 'Child action must not be provided to .replace() when specifying an object');\n          return StackActions.replace(replaceWith);\n        },\n        reset: (actions, index) => StackActions.reset({\n          actions,\n          index: index == null ? actions.length - 1 : index,\n          key: navStateKey\n        }),\n        dismiss: () => NavigationActions.back({\n          key: navStateKey\n        })\n      };\n    },\n    getStateForAction(action, state) {\n      // Set up the initial state if needed\n      if (!state) {\n        return getInitialState(action);\n      }\n      const activeChildRoute = state.routes[state.index];\n      if (!isResetToRootStack(action) && action.type !== NavigationActions.NAVIGATE) {\n        // Let the active child router handle the action\n        const activeChildRouter = childRouters[activeChildRoute.routeName];\n        if (activeChildRouter) {\n          const route = activeChildRouter.getStateForAction(action, activeChildRoute);\n          if (route !== null && route !== activeChildRoute) {\n            return StateUtils.replaceAt(state, activeChildRoute.key, route,\n            // the following tells replaceAt to NOT change the index to this route for the setParam action, because people don't expect param-setting actions to switch the active route\n            action.type === NavigationActions.SET_PARAMS);\n          }\n        }\n      } else if (action.type === NavigationActions.NAVIGATE) {\n        // Traverse routes from the top of the stack to the bottom, so the\n        // active route has the first opportunity, then the one before it, etc.\n        for (let childRoute of state.routes.slice().reverse()) {\n          let childRouter = childRouters[childRoute.routeName];\n          let childAction = action.routeName === childRoute.routeName && action.action ? action.action : action;\n          if (childRouter) {\n            const nextRouteState = childRouter.getStateForAction(childAction, childRoute);\n            if (nextRouteState === null || nextRouteState !== childRoute) {\n              const newState = StateUtils.replaceAndPrune(state, nextRouteState ? nextRouteState.key : childRoute.key, nextRouteState ? nextRouteState : childRoute);\n              return {\n                ...newState,\n                isTransitioning: state.index !== newState.index ? action.immediate !== true : state.isTransitioning\n              };\n            }\n          }\n        }\n      } // Handle push and navigate actions. This must happen after the focused\n      // child router has had a chance to handle the action.\n\n      if (behavesLikePushAction(action) && childRouters[action.routeName] !== undefined // undefined means it's not a childRouter or a screen\n      ) {\n        const childRouter = childRouters[action.routeName];\n        let route;\n        invariant(action.type !== StackActions.PUSH || action.key == null, 'StackRouter does not support key on the push action'); // Before pushing a new route we first try to find one in the existing route stack\n        // More information on this: https://github.com/react-navigation/rfcs/blob/master/text/0004-less-pushy-navigate.md\n\n        const lastRouteIndex = state.routes.findIndex(r => {\n          if (action.key) {\n            return r.key === action.key;\n          } else {\n            return r.routeName === action.routeName;\n          }\n        }); // An instance of this route exists already and we're dealing with a navigate action\n\n        if (action.type !== StackActions.PUSH && lastRouteIndex !== -1) {\n          // If index is unchanged and params are not being set, leave state identity intact\n          if (state.index === lastRouteIndex && !action.params) {\n            return null;\n          } // Remove the now unused routes at the tail of the routes array\n\n          const routes = state.routes.slice(0, lastRouteIndex + 1); // Apply params if provided, otherwise leave route identity intact\n\n          if (action.params) {\n            const route = state.routes[lastRouteIndex];\n            routes[lastRouteIndex] = {\n              ...route,\n              params: {\n                ...route.params,\n                ...action.params\n              }\n            };\n          } // Return state with new index. Change isTransitioning only if index has changed\n\n          return {\n            ...state,\n            isTransitioning: state.index !== lastRouteIndex ? action.immediate !== true : state.isTransitioning,\n            index: lastRouteIndex,\n            routes\n          };\n        }\n        if (childRouter) {\n          // Delegate to the child router with the given action, or init it\n          const childAction = action.action || NavigationActions.init({\n            params: getParamsForRouteAndAction(action.routeName, action)\n          });\n          route = {\n            params: getParamsForRouteAndAction(action.routeName, action),\n            // note(brentvatne): does it make sense to wipe out the params\n            // here? or even to add params at all? need more info about what\n            // this solves\n            ...childRouter.getStateForAction(childAction),\n            routeName: action.routeName,\n            key: action.key || generateKey()\n          };\n        } else {\n          // Create the route from scratch\n          route = {\n            params: getParamsForRouteAndAction(action.routeName, action),\n            routeName: action.routeName,\n            key: action.key || generateKey()\n          };\n        }\n        return {\n          ...StateUtils.push(state, route),\n          isTransitioning: action.immediate !== true\n        };\n      } else if (action.type === StackActions.PUSH && childRouters[action.routeName] === undefined) {\n        // Return the state identity to bubble the action up\n        return state;\n      } // Handle navigation to other child routers that are not yet pushed\n\n      if (behavesLikePushAction(action)) {\n        const childRouterNames = Object.keys(childRouters);\n        for (let i = 0; i < childRouterNames.length; i++) {\n          const childRouterName = childRouterNames[i];\n          const childRouter = childRouters[childRouterName];\n          if (childRouter) {\n            // For each child router, start with a blank state\n            const initChildRoute = childRouter.getStateForAction(NavigationActions.init()); // Then check to see if the router handles our navigate action\n\n            const navigatedChildRoute = childRouter.getStateForAction(action, initChildRoute);\n            let routeToPush = null;\n            if (navigatedChildRoute === null) {\n              // Push the route if the router has 'handled' the action and returned null\n              routeToPush = initChildRoute;\n            } else if (navigatedChildRoute !== initChildRoute) {\n              // Push the route if the state has changed in response to this navigation\n              routeToPush = navigatedChildRoute;\n            }\n            if (routeToPush) {\n              const route = {\n                ...routeToPush,\n                routeName: childRouterName,\n                key: action.key || generateKey()\n              };\n              return {\n                ...StateUtils.push(state, route),\n                isTransitioning: action.immediate !== true\n              };\n            }\n          }\n        }\n      } // Handle pop-to-top behavior. Make sure this happens after children have had a chance to handle the action, so that the inner stack pops to top first.\n\n      if (action.type === StackActions.POP_TO_TOP) {\n        // Refuse to handle pop to top if a key is given that doesn't correspond\n        // to this router\n        if (action.key && state.key !== action.key) {\n          return state;\n        } // If we're already at the top, then we return the state with a new\n        // identity so that the action is handled by this router.\n\n        if (state.index > 0) {\n          return {\n            ...state,\n            isTransitioning: action.immediate !== true,\n            index: 0,\n            routes: [state.routes[0]]\n          };\n        }\n        return state;\n      } // Handle replace action\n\n      if (action.type === StackActions.REPLACE) {\n        let routeIndex; // If the key param is undefined, set the index to the last route in the stack\n\n        if (action.key === undefined && state.routes.length) {\n          routeIndex = state.routes.length - 1;\n        } else {\n          routeIndex = state.routes.findIndex(r => r.key === action.key);\n        } // Only replace if the key matches one of our routes\n\n        if (routeIndex !== -1) {\n          const childRouter = childRouters[action.routeName];\n          let childState = {};\n          if (childRouter) {\n            const childAction = action.action || NavigationActions.init({\n              params: getParamsForRouteAndAction(action.routeName, action)\n            });\n            childState = childRouter.getStateForAction(childAction);\n          }\n          const routes = [...state.routes];\n          routes[routeIndex] = {\n            params: getParamsForRouteAndAction(action.routeName, action),\n            // merge the child state in this order to allow params override\n            ...childState,\n            routeName: action.routeName,\n            key: action.newKey || generateKey()\n          };\n          return {\n            ...state,\n            routes\n          };\n        }\n      } // Update transitioning state\n\n      if (action.type === StackActions.COMPLETE_TRANSITION && (action.key == null || action.key === state.key) && action.toChildKey === state.routes[state.index].key && state.isTransitioning) {\n        return {\n          ...state,\n          isTransitioning: false\n        };\n      }\n      if (action.type === NavigationActions.SET_PARAMS) {\n        const key = action.key;\n        const lastRoute = state.routes.find(route => route.key === key);\n        if (lastRoute) {\n          const params = {\n            ...lastRoute.params,\n            ...action.params\n          };\n          const routes = [...state.routes];\n          routes[state.routes.indexOf(lastRoute)] = {\n            ...lastRoute,\n            params\n          };\n          return {\n            ...state,\n            routes\n          };\n        }\n      }\n      if (action.type === StackActions.RESET) {\n        // Only handle reset actions that are unspecified or match this state key\n        if (action.key != null && action.key !== state.key) {\n          // Deliberately use != instead of !== so we can match null with\n          // undefined on either the state or the action\n          return state;\n        }\n        const newStackActions = action.actions;\n        return {\n          ...state,\n          routes: newStackActions.map(newStackAction => {\n            const router = childRouters[newStackAction.routeName];\n            let childState = {};\n            if (router) {\n              const childAction = newStackAction.action || NavigationActions.init({\n                params: getParamsForRouteAndAction(newStackAction.routeName, newStackAction)\n              });\n              childState = router.getStateForAction(childAction);\n            }\n            return {\n              params: getParamsForRouteAndAction(newStackAction.routeName, newStackAction),\n              ...childState,\n              routeName: newStackAction.routeName,\n              key: newStackAction.key || generateKey()\n            };\n          }),\n          index: action.index\n        };\n      }\n      if (action.type === NavigationActions.BACK || action.type === StackActions.POP) {\n        const {\n          key,\n          n,\n          immediate,\n          prune\n        } = action;\n        if (action.type === StackActions.POP && prune === false && key) {\n          const index = state.routes.findIndex(r => r.key === key);\n          if (index > 0) {\n            const count = Math.max(index - (n !== null && n !== void 0 ? n : 1) + 1, 1);\n            const routes = state.routes.slice(0, count).concat(state.routes.slice(index + 1));\n            if (routes.length) {\n              return {\n                ...state,\n                routes,\n                index: routes.length - 1,\n                isTransitioning: immediate !== true\n              };\n            }\n          }\n        } else {\n          let backRouteIndex = state.index;\n          if (action.type === StackActions.POP && n != null) {\n            // determine the index to go back *from*. In this case, n=1 means to go\n            // back from state.index, as if it were a normal \"BACK\" action\n            backRouteIndex = Math.max(1, state.index - n + 1);\n          } else if (key) {\n            const backRoute = state.routes.find(route => route.key === key);\n            backRouteIndex = state.routes.indexOf(backRoute);\n          }\n          if (backRouteIndex > 0) {\n            return {\n              ...state,\n              routes: state.routes.slice(0, backRouteIndex),\n              index: backRouteIndex - 1,\n              isTransitioning: immediate !== true\n            };\n          }\n        }\n      } // By this point in the router's state handling logic, we have handled the behavior of the active route, and handled any stack actions.\n      // If we haven't returned by now, we should allow non-active child routers to handle this action, and switch to that index if the child state (route) does change..\n\n      const keyIndex = action.key ? StateUtils.indexOf(state, action.key) : -1; // Traverse routes from the top of the stack to the bottom, so the\n      // active route has the first opportunity, then the one before it, etc.\n\n      for (let childRoute of state.routes.slice().reverse()) {\n        if (childRoute.key === activeChildRoute.key) {\n          // skip over the active child because we let it attempt to handle the action earlier\n          continue;\n        } // If a key is provided and in routes state then let's use that\n        // knowledge to skip extra getStateForAction calls on other child\n        // routers\n\n        if (keyIndex >= 0 && childRoute.key !== action.key) {\n          continue;\n        }\n        let childRouter = childRouters[childRoute.routeName];\n        if (childRouter) {\n          const route = childRouter.getStateForAction(action, childRoute);\n          if (route === null) {\n            return state;\n          } else if (route && route !== childRoute) {\n            return StateUtils.replaceAt(state, childRoute.key, route,\n            // People don't expect these actions to switch the active route\n            // TODO: We should switch to action.preserveFocus: true for drawer in future\n            action.preserveFocus || action.type.includes('DRAWER'));\n          }\n        }\n      }\n      return state;\n    },\n    getPathAndParamsForState(state) {\n      const route = state.routes[state.index];\n      return getPathAndParamsForRoute(route);\n    },\n    getActionForPathAndParams(path, params) {\n      return getActionForPathAndParams(path, params);\n    },\n    getScreenOptions: createConfigGetter(routeConfigs, stackConfig.defaultNavigationOptions)\n  };\n});","map":{"version":3,"names":["NavigationActions","StackActions","createConfigGetter","getScreenForRouteName","StateUtils","validateRouteConfigMap","invariant","generateKey","createPathParser","behavesLikePushAction","action","type","NAVIGATE","PUSH","defaultActionCreators","isResetToRootStack","RESET","key","routeConfigs","stackConfig","arguments","length","undefined","childRouters","routeNames","Object","keys","forEach","routeName","routeConfig","screen","router","initialRouteParams","getCustomActionCreators","initialRouteName","initialChildRouter","getInitialState","route","childRouter","childState","childAction","init","params","getStateForAction","isTransitioning","index","routes","navigate","initialRouteKey","getParamsForRouteAndAction","getPathAndParamsForRoute","getActionForPathAndParams","getComponentForState","state","activeChildRoute","getComponentForRouteName","getActionCreators","navStateKey","pop","n","popToTop","push","replace","replaceWith","newKey","reset","actions","dismiss","back","activeChildRouter","replaceAt","SET_PARAMS","childRoute","slice","reverse","nextRouteState","newState","replaceAndPrune","immediate","lastRouteIndex","findIndex","r","childRouterNames","i","childRouterName","initChildRoute","navigatedChildRoute","routeToPush","POP_TO_TOP","REPLACE","routeIndex","COMPLETE_TRANSITION","toChildKey","lastRoute","find","indexOf","newStackActions","map","newStackAction","BACK","POP","prune","count","Math","max","concat","backRouteIndex","backRoute","keyIndex","preserveFocus","includes","getPathAndParamsForState","path","getScreenOptions","defaultNavigationOptions"],"sources":["/Users/solomon-moulang-lewis/Documents/University/Year 2/Term 2/User interface design/soen357Project/client/node_modules/@react-navigation/core/lib/module/routers/StackRouter.js"],"sourcesContent":["import * as NavigationActions from '../NavigationActions';\nimport * as StackActions from './StackActions';\nimport createConfigGetter from './createConfigGetter';\nimport getScreenForRouteName from './getScreenForRouteName';\nimport StateUtils from '../StateUtils';\nimport validateRouteConfigMap from './validateRouteConfigMap';\nimport invariant from '../utils/invariant';\nimport { generateKey } from './KeyGenerator';\nimport { createPathParser } from './pathUtils';\n\nfunction behavesLikePushAction(action) {\n  return (\n    action.type === NavigationActions.NAVIGATE ||\n    action.type === StackActions.PUSH\n  );\n}\n\nconst defaultActionCreators = () => ({});\n\nfunction isResetToRootStack(action) {\n  return action.type === StackActions.RESET && action.key === null;\n}\n\nexport default (routeConfigs, stackConfig = {}) => {\n  // Fail fast on invalid route definitions\n  validateRouteConfigMap(routeConfigs);\n\n  const childRouters = {};\n  const routeNames = Object.keys(routeConfigs);\n\n  // Loop through routes and find child routers\n  routeNames.forEach((routeName) => {\n    // We're not using `getScreenForRouteName` here to preserve the lazy loading\n    // behaviour of routes. This means that routes with child routers must be\n    // defined using a component directly or with an object with a screen prop.\n    const routeConfig = routeConfigs[routeName];\n    const screen =\n      routeConfig && routeConfig.screen ? routeConfig.screen : routeConfig;\n    if (screen && screen.router) {\n      // If it has a router it's a navigator.\n      childRouters[routeName] = screen.router;\n    } else {\n      // If it doesn't have router it's an ordinary React component.\n      childRouters[routeName] = null;\n    }\n  });\n\n  const { initialRouteParams } = stackConfig;\n  const getCustomActionCreators =\n    stackConfig.getCustomActionCreators || defaultActionCreators;\n\n  const initialRouteName = stackConfig.initialRouteName || routeNames[0];\n\n  const initialChildRouter = childRouters[initialRouteName];\n\n  function getInitialState(action) {\n    let route = {};\n    const childRouter = childRouters[action.routeName];\n\n    // This is a push-like action, and childRouter will be a router or null if we are responsible for this routeName\n    if (behavesLikePushAction(action) && childRouter !== undefined) {\n      let childState = {};\n      // The router is null for normal leaf routes\n      if (childRouter !== null) {\n        const childAction =\n          action.action || NavigationActions.init({ params: action.params });\n        childState = childRouter.getStateForAction(childAction);\n      }\n\n      return {\n        key: 'StackRouterRoot',\n        isTransitioning: false,\n        index: 0,\n        routes: [\n          {\n            params: action.params,\n            ...childState,\n            key: action.key || generateKey(),\n            routeName: action.routeName,\n          },\n        ],\n      };\n    }\n\n    if (initialChildRouter) {\n      route = initialChildRouter.getStateForAction(\n        NavigationActions.navigate({\n          routeName: initialRouteName,\n          params: initialRouteParams,\n        })\n      );\n    }\n    const params = (routeConfigs[initialRouteName].params ||\n      route.params ||\n      action.params ||\n      initialRouteParams) && {\n      ...(routeConfigs[initialRouteName].params || {}),\n      ...(route.params || {}),\n      ...(action.params || {}),\n      ...(initialRouteParams || {}),\n    };\n    const { initialRouteKey } = stackConfig;\n    route = {\n      ...route,\n      ...(params ? { params } : {}),\n      routeName: initialRouteName,\n      key: action.key || initialRouteKey || generateKey(),\n    };\n    return {\n      key: 'StackRouterRoot',\n      isTransitioning: false,\n      index: 0,\n      routes: [route],\n    };\n  }\n\n  function getParamsForRouteAndAction(routeName, action) {\n    let routeConfig = routeConfigs[routeName];\n    if (routeConfig && routeConfig.params) {\n      return { ...routeConfig.params, ...action.params };\n    } else {\n      return action.params;\n    }\n  }\n\n  const {\n    getPathAndParamsForRoute,\n    getActionForPathAndParams,\n  } = createPathParser(childRouters, routeConfigs, stackConfig);\n\n  return {\n    childRouters,\n\n    getComponentForState(state) {\n      const activeChildRoute = state.routes[state.index];\n      const { routeName } = activeChildRoute;\n      if (childRouters[routeName]) {\n        return childRouters[routeName].getComponentForState(activeChildRoute);\n      }\n      return getScreenForRouteName(routeConfigs, routeName);\n    },\n\n    getComponentForRouteName(routeName) {\n      return getScreenForRouteName(routeConfigs, routeName);\n    },\n\n    getActionCreators(route, navStateKey) {\n      return {\n        ...getCustomActionCreators(route, navStateKey),\n        pop: (n, params) =>\n          StackActions.pop({\n            n,\n            ...params,\n          }),\n        popToTop: (params) => StackActions.popToTop(params),\n        push: (routeName, params, action) =>\n          StackActions.push({\n            routeName,\n            params,\n            action,\n          }),\n        replace: (replaceWith, params, action, newKey) => {\n          if (typeof replaceWith === 'string') {\n            return StackActions.replace({\n              routeName: replaceWith,\n              params,\n              action,\n              key: route.key,\n              newKey,\n            });\n          }\n          invariant(\n            typeof replaceWith === 'object',\n            'Must replaceWith an object or a string'\n          );\n          invariant(\n            params == null,\n            'Params must not be provided to .replace() when specifying an object'\n          );\n          invariant(\n            action == null,\n            'Child action must not be provided to .replace() when specifying an object'\n          );\n          invariant(\n            newKey == null,\n            'Child action must not be provided to .replace() when specifying an object'\n          );\n          return StackActions.replace(replaceWith);\n        },\n        reset: (actions, index) =>\n          StackActions.reset({\n            actions,\n            index: index == null ? actions.length - 1 : index,\n            key: navStateKey,\n          }),\n        dismiss: () =>\n          NavigationActions.back({\n            key: navStateKey,\n          }),\n      };\n    },\n\n    getStateForAction(action, state) {\n      // Set up the initial state if needed\n      if (!state) {\n        return getInitialState(action);\n      }\n\n      const activeChildRoute = state.routes[state.index];\n\n      if (\n        !isResetToRootStack(action) &&\n        action.type !== NavigationActions.NAVIGATE\n      ) {\n        // Let the active child router handle the action\n        const activeChildRouter = childRouters[activeChildRoute.routeName];\n        if (activeChildRouter) {\n          const route = activeChildRouter.getStateForAction(\n            action,\n            activeChildRoute\n          );\n          if (route !== null && route !== activeChildRoute) {\n            return StateUtils.replaceAt(\n              state,\n              activeChildRoute.key,\n              route,\n              // the following tells replaceAt to NOT change the index to this route for the setParam action, because people don't expect param-setting actions to switch the active route\n              action.type === NavigationActions.SET_PARAMS\n            );\n          }\n        }\n      } else if (action.type === NavigationActions.NAVIGATE) {\n        // Traverse routes from the top of the stack to the bottom, so the\n        // active route has the first opportunity, then the one before it, etc.\n\n        for (let childRoute of state.routes.slice().reverse()) {\n          let childRouter = childRouters[childRoute.routeName];\n          let childAction =\n            action.routeName === childRoute.routeName && action.action\n              ? action.action\n              : action;\n\n          if (childRouter) {\n            const nextRouteState = childRouter.getStateForAction(\n              childAction,\n              childRoute\n            );\n\n            if (nextRouteState === null || nextRouteState !== childRoute) {\n              const newState = StateUtils.replaceAndPrune(\n                state,\n                nextRouteState ? nextRouteState.key : childRoute.key,\n                nextRouteState ? nextRouteState : childRoute\n              );\n              return {\n                ...newState,\n                isTransitioning:\n                  state.index !== newState.index\n                    ? action.immediate !== true\n                    : state.isTransitioning,\n              };\n            }\n          }\n        }\n      }\n\n      // Handle push and navigate actions. This must happen after the focused\n      // child router has had a chance to handle the action.\n      if (\n        behavesLikePushAction(action) &&\n        childRouters[action.routeName] !== undefined // undefined means it's not a childRouter or a screen\n      ) {\n        const childRouter = childRouters[action.routeName];\n        let route;\n\n        invariant(\n          action.type !== StackActions.PUSH || action.key == null,\n          'StackRouter does not support key on the push action'\n        );\n\n        // Before pushing a new route we first try to find one in the existing route stack\n        // More information on this: https://github.com/react-navigation/rfcs/blob/master/text/0004-less-pushy-navigate.md\n        const lastRouteIndex = state.routes.findIndex((r) => {\n          if (action.key) {\n            return r.key === action.key;\n          } else {\n            return r.routeName === action.routeName;\n          }\n        });\n\n        // An instance of this route exists already and we're dealing with a navigate action\n        if (action.type !== StackActions.PUSH && lastRouteIndex !== -1) {\n          // If index is unchanged and params are not being set, leave state identity intact\n          if (state.index === lastRouteIndex && !action.params) {\n            return null;\n          }\n\n          // Remove the now unused routes at the tail of the routes array\n          const routes = state.routes.slice(0, lastRouteIndex + 1);\n\n          // Apply params if provided, otherwise leave route identity intact\n          if (action.params) {\n            const route = state.routes[lastRouteIndex];\n            routes[lastRouteIndex] = {\n              ...route,\n              params: {\n                ...route.params,\n                ...action.params,\n              },\n            };\n          }\n          // Return state with new index. Change isTransitioning only if index has changed\n          return {\n            ...state,\n            isTransitioning:\n              state.index !== lastRouteIndex\n                ? action.immediate !== true\n                : state.isTransitioning,\n            index: lastRouteIndex,\n            routes,\n          };\n        }\n\n        if (childRouter) {\n          // Delegate to the child router with the given action, or init it\n          const childAction =\n            action.action ||\n            NavigationActions.init({\n              params: getParamsForRouteAndAction(action.routeName, action),\n            });\n          route = {\n            params: getParamsForRouteAndAction(action.routeName, action),\n            // note(brentvatne): does it make sense to wipe out the params\n            // here? or even to add params at all? need more info about what\n            // this solves\n            ...childRouter.getStateForAction(childAction),\n            routeName: action.routeName,\n            key: action.key || generateKey(),\n          };\n        } else {\n          // Create the route from scratch\n          route = {\n            params: getParamsForRouteAndAction(action.routeName, action),\n            routeName: action.routeName,\n            key: action.key || generateKey(),\n          };\n        }\n        return {\n          ...StateUtils.push(state, route),\n          isTransitioning: action.immediate !== true,\n        };\n      } else if (\n        action.type === StackActions.PUSH &&\n        childRouters[action.routeName] === undefined\n      ) {\n        // Return the state identity to bubble the action up\n        return state;\n      }\n\n      // Handle navigation to other child routers that are not yet pushed\n      if (behavesLikePushAction(action)) {\n        const childRouterNames = Object.keys(childRouters);\n        for (let i = 0; i < childRouterNames.length; i++) {\n          const childRouterName = childRouterNames[i];\n          const childRouter = childRouters[childRouterName];\n          if (childRouter) {\n            // For each child router, start with a blank state\n            const initChildRoute = childRouter.getStateForAction(\n              NavigationActions.init()\n            );\n            // Then check to see if the router handles our navigate action\n            const navigatedChildRoute = childRouter.getStateForAction(\n              action,\n              initChildRoute\n            );\n            let routeToPush = null;\n            if (navigatedChildRoute === null) {\n              // Push the route if the router has 'handled' the action and returned null\n              routeToPush = initChildRoute;\n            } else if (navigatedChildRoute !== initChildRoute) {\n              // Push the route if the state has changed in response to this navigation\n              routeToPush = navigatedChildRoute;\n            }\n            if (routeToPush) {\n              const route = {\n                ...routeToPush,\n                routeName: childRouterName,\n                key: action.key || generateKey(),\n              };\n              return {\n                ...StateUtils.push(state, route),\n                isTransitioning: action.immediate !== true,\n              };\n            }\n          }\n        }\n      }\n\n      // Handle pop-to-top behavior. Make sure this happens after children have had a chance to handle the action, so that the inner stack pops to top first.\n      if (action.type === StackActions.POP_TO_TOP) {\n        // Refuse to handle pop to top if a key is given that doesn't correspond\n        // to this router\n        if (action.key && state.key !== action.key) {\n          return state;\n        }\n\n        // If we're already at the top, then we return the state with a new\n        // identity so that the action is handled by this router.\n        if (state.index > 0) {\n          return {\n            ...state,\n            isTransitioning: action.immediate !== true,\n            index: 0,\n            routes: [state.routes[0]],\n          };\n        }\n        return state;\n      }\n\n      // Handle replace action\n      if (action.type === StackActions.REPLACE) {\n        let routeIndex;\n\n        // If the key param is undefined, set the index to the last route in the stack\n        if (action.key === undefined && state.routes.length) {\n          routeIndex = state.routes.length - 1;\n        } else {\n          routeIndex = state.routes.findIndex((r) => r.key === action.key);\n        }\n\n        // Only replace if the key matches one of our routes\n        if (routeIndex !== -1) {\n          const childRouter = childRouters[action.routeName];\n          let childState = {};\n          if (childRouter) {\n            const childAction =\n              action.action ||\n              NavigationActions.init({\n                params: getParamsForRouteAndAction(action.routeName, action),\n              });\n            childState = childRouter.getStateForAction(childAction);\n          }\n          const routes = [...state.routes];\n          routes[routeIndex] = {\n            params: getParamsForRouteAndAction(action.routeName, action),\n            // merge the child state in this order to allow params override\n            ...childState,\n            routeName: action.routeName,\n            key: action.newKey || generateKey(),\n          };\n          return { ...state, routes };\n        }\n      }\n\n      // Update transitioning state\n      if (\n        action.type === StackActions.COMPLETE_TRANSITION &&\n        (action.key == null || action.key === state.key) &&\n        action.toChildKey === state.routes[state.index].key &&\n        state.isTransitioning\n      ) {\n        return {\n          ...state,\n          isTransitioning: false,\n        };\n      }\n\n      if (action.type === NavigationActions.SET_PARAMS) {\n        const key = action.key;\n        const lastRoute = state.routes.find((route) => route.key === key);\n        if (lastRoute) {\n          const params = {\n            ...lastRoute.params,\n            ...action.params,\n          };\n          const routes = [...state.routes];\n          routes[state.routes.indexOf(lastRoute)] = {\n            ...lastRoute,\n            params,\n          };\n          return {\n            ...state,\n            routes,\n          };\n        }\n      }\n\n      if (action.type === StackActions.RESET) {\n        // Only handle reset actions that are unspecified or match this state key\n        if (action.key != null && action.key !== state.key) {\n          // Deliberately use != instead of !== so we can match null with\n          // undefined on either the state or the action\n          return state;\n        }\n        const newStackActions = action.actions;\n\n        return {\n          ...state,\n          routes: newStackActions.map((newStackAction) => {\n            const router = childRouters[newStackAction.routeName];\n\n            let childState = {};\n\n            if (router) {\n              const childAction =\n                newStackAction.action ||\n                NavigationActions.init({\n                  params: getParamsForRouteAndAction(\n                    newStackAction.routeName,\n                    newStackAction\n                  ),\n                });\n\n              childState = router.getStateForAction(childAction);\n            }\n\n            return {\n              params: getParamsForRouteAndAction(\n                newStackAction.routeName,\n                newStackAction\n              ),\n              ...childState,\n              routeName: newStackAction.routeName,\n              key: newStackAction.key || generateKey(),\n            };\n          }),\n          index: action.index,\n        };\n      }\n\n      if (\n        action.type === NavigationActions.BACK ||\n        action.type === StackActions.POP\n      ) {\n        const { key, n, immediate, prune } = action;\n\n        if (action.type === StackActions.POP && prune === false && key) {\n          const index = state.routes.findIndex((r) => r.key === key);\n\n          if (index > 0) {\n            const count = Math.max(index - (n ?? 1) + 1, 1);\n            const routes = state.routes\n              .slice(0, count)\n              .concat(state.routes.slice(index + 1));\n\n            if (routes.length) {\n              return {\n                ...state,\n                routes,\n                index: routes.length - 1,\n                isTransitioning: immediate !== true,\n              };\n            }\n          }\n        } else {\n          let backRouteIndex = state.index;\n\n          if (action.type === StackActions.POP && n != null) {\n            // determine the index to go back *from*. In this case, n=1 means to go\n            // back from state.index, as if it were a normal \"BACK\" action\n            backRouteIndex = Math.max(1, state.index - n + 1);\n          } else if (key) {\n            const backRoute = state.routes.find((route) => route.key === key);\n            backRouteIndex = state.routes.indexOf(backRoute);\n          }\n\n          if (backRouteIndex > 0) {\n            return {\n              ...state,\n              routes: state.routes.slice(0, backRouteIndex),\n              index: backRouteIndex - 1,\n              isTransitioning: immediate !== true,\n            };\n          }\n        }\n      }\n\n      // By this point in the router's state handling logic, we have handled the behavior of the active route, and handled any stack actions.\n      // If we haven't returned by now, we should allow non-active child routers to handle this action, and switch to that index if the child state (route) does change..\n\n      const keyIndex = action.key ? StateUtils.indexOf(state, action.key) : -1;\n\n      // Traverse routes from the top of the stack to the bottom, so the\n      // active route has the first opportunity, then the one before it, etc.\n      for (let childRoute of state.routes.slice().reverse()) {\n        if (childRoute.key === activeChildRoute.key) {\n          // skip over the active child because we let it attempt to handle the action earlier\n          continue;\n        }\n        // If a key is provided and in routes state then let's use that\n        // knowledge to skip extra getStateForAction calls on other child\n        // routers\n        if (keyIndex >= 0 && childRoute.key !== action.key) {\n          continue;\n        }\n        let childRouter = childRouters[childRoute.routeName];\n        if (childRouter) {\n          const route = childRouter.getStateForAction(action, childRoute);\n\n          if (route === null) {\n            return state;\n          } else if (route && route !== childRoute) {\n            return StateUtils.replaceAt(\n              state,\n              childRoute.key,\n              route,\n              // People don't expect these actions to switch the active route\n              // TODO: We should switch to action.preserveFocus: true for drawer in future\n              action.preserveFocus || action.type.includes('DRAWER')\n            );\n          }\n        }\n      }\n\n      return state;\n    },\n\n    getPathAndParamsForState(state) {\n      const route = state.routes[state.index];\n      return getPathAndParamsForRoute(route);\n    },\n\n    getActionForPathAndParams(path, params) {\n      return getActionForPathAndParams(path, params);\n    },\n\n    getScreenOptions: createConfigGetter(\n      routeConfigs,\n      stackConfig.defaultNavigationOptions\n    ),\n  };\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}