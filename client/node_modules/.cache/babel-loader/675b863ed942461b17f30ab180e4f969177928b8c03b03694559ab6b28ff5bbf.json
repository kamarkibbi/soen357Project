{"ast":null,"code":"function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nimport { BaseGesture, Gesture } from './gesture';\nfunction extendRelation(currentRelation, extendWith) {\n  if (currentRelation === undefined) {\n    return [...extendWith];\n  } else {\n    return [...currentRelation, ...extendWith];\n  }\n}\nexport class ComposedGesture extends Gesture {\n  constructor() {\n    super();\n    _defineProperty(this, \"gestures\", []);\n    _defineProperty(this, \"simultaneousGestures\", []);\n    _defineProperty(this, \"requireGesturesToFail\", []);\n    for (var _len = arguments.length, gestures = new Array(_len), _key = 0; _key < _len; _key++) {\n      gestures[_key] = arguments[_key];\n    }\n    this.gestures = gestures;\n  }\n  prepareSingleGesture(gesture, simultaneousGestures, requireGesturesToFail) {\n    if (gesture instanceof BaseGesture) {\n      const newConfig = {\n        ...gesture.config\n      };\n      newConfig.simultaneousWith = extendRelation(newConfig.simultaneousWith, simultaneousGestures);\n      newConfig.requireToFail = extendRelation(newConfig.requireToFail, requireGesturesToFail);\n      gesture.config = newConfig;\n    } else if (gesture instanceof ComposedGesture) {\n      gesture.simultaneousGestures = simultaneousGestures;\n      gesture.requireGesturesToFail = requireGesturesToFail;\n      gesture.prepare();\n    }\n  }\n  prepare() {\n    for (const gesture of this.gestures) {\n      this.prepareSingleGesture(gesture, this.simultaneousGestures, this.requireGesturesToFail);\n    }\n  }\n  initialize() {\n    for (const gesture of this.gestures) {\n      gesture.initialize();\n    }\n  }\n  toGestureArray() {\n    return this.gestures.flatMap(gesture => gesture.toGestureArray());\n  }\n}\nexport class SimultaneousGesture extends ComposedGesture {\n  prepare() {\n    // this piece of magic works something like this:\n    // for every gesture in the array\n    const simultaneousArrays = this.gestures.map(gesture =>\n    // we take the array it's in\n    this.gestures // and make a copy without it\n    .filter(x => x !== gesture) // then we flatmap the result to get list of raw (not composed) gestures\n    // this way we don't make the gestures simultaneous with themselves, which is\n    // important when the gesture is `ExclusiveGesture` - we don't want to make\n    // exclusive gestures simultaneous\n    .flatMap(x => x.toGestureArray()));\n    for (let i = 0; i < this.gestures.length; i++) {\n      this.prepareSingleGesture(this.gestures[i], simultaneousArrays[i], this.requireGesturesToFail);\n    }\n  }\n}\nexport class ExclusiveGesture extends ComposedGesture {\n  prepare() {\n    // transforms the array of gestures into array of grouped raw (not composed) gestures\n    // i.e. [gesture1, gesture2, ComposedGesture(gesture3, gesture4)] -> [[gesture1], [gesture2], [gesture3, gesture4]]\n    const gestureArrays = this.gestures.map(gesture => gesture.toGestureArray());\n    let requireToFail = [];\n    for (let i = 0; i < this.gestures.length; i++) {\n      this.prepareSingleGesture(this.gestures[i], this.simultaneousGestures, this.requireGesturesToFail.concat(requireToFail)); // every group gets to wait for all groups before it\n\n      requireToFail = requireToFail.concat(gestureArrays[i]);\n    }\n  }\n}","map":{"version":3,"names":["BaseGesture","Gesture","extendRelation","currentRelation","extendWith","undefined","ComposedGesture","constructor","_defineProperty","_len","arguments","length","gestures","Array","_key","prepareSingleGesture","gesture","simultaneousGestures","requireGesturesToFail","newConfig","config","simultaneousWith","requireToFail","prepare","initialize","toGestureArray","flatMap","SimultaneousGesture","simultaneousArrays","map","filter","x","i","ExclusiveGesture","gestureArrays","concat"],"sources":["/Users/solomon-moulang-lewis/Documents/University/Year 2/Term 2/User interface design/soen357Project/client/node_modules/react-native-gesture-handler/lib/module/handlers/gestures/gestureComposition.ts"],"sourcesContent":["import { BaseGesture, Gesture, GestureRef, GestureType } from './gesture';\n\nfunction extendRelation(\n  currentRelation: GestureRef[] | undefined,\n  extendWith: GestureType[]\n) {\n  if (currentRelation === undefined) {\n    return [...extendWith];\n  } else {\n    return [...currentRelation, ...extendWith];\n  }\n}\n\nexport class ComposedGesture extends Gesture {\n  protected gestures: Gesture[] = [];\n  protected simultaneousGestures: GestureType[] = [];\n  protected requireGesturesToFail: GestureType[] = [];\n\n  constructor(...gestures: Gesture[]) {\n    super();\n    this.gestures = gestures;\n  }\n\n  protected prepareSingleGesture(\n    gesture: Gesture,\n    simultaneousGestures: GestureType[],\n    requireGesturesToFail: GestureType[]\n  ) {\n    if (gesture instanceof BaseGesture) {\n      const newConfig = { ...gesture.config };\n\n      newConfig.simultaneousWith = extendRelation(\n        newConfig.simultaneousWith,\n        simultaneousGestures\n      );\n      newConfig.requireToFail = extendRelation(\n        newConfig.requireToFail,\n        requireGesturesToFail\n      );\n\n      gesture.config = newConfig;\n    } else if (gesture instanceof ComposedGesture) {\n      gesture.simultaneousGestures = simultaneousGestures;\n      gesture.requireGesturesToFail = requireGesturesToFail;\n      gesture.prepare();\n    }\n  }\n\n  prepare() {\n    for (const gesture of this.gestures) {\n      this.prepareSingleGesture(\n        gesture,\n        this.simultaneousGestures,\n        this.requireGesturesToFail\n      );\n    }\n  }\n\n  initialize() {\n    for (const gesture of this.gestures) {\n      gesture.initialize();\n    }\n  }\n\n  toGestureArray(): GestureType[] {\n    return this.gestures.flatMap((gesture) => gesture.toGestureArray());\n  }\n}\n\nexport class SimultaneousGesture extends ComposedGesture {\n  prepare() {\n    // this piece of magic works something like this:\n    // for every gesture in the array\n    const simultaneousArrays = this.gestures.map((gesture) =>\n      // we take the array it's in\n      this.gestures\n        // and make a copy without it\n        .filter((x) => x !== gesture)\n        // then we flatmap the result to get list of raw (not composed) gestures\n        // this way we don't make the gestures simultaneous with themselves, which is\n        // important when the gesture is `ExclusiveGesture` - we don't want to make\n        // exclusive gestures simultaneous\n        .flatMap((x) => x.toGestureArray())\n    );\n\n    for (let i = 0; i < this.gestures.length; i++) {\n      this.prepareSingleGesture(\n        this.gestures[i],\n        simultaneousArrays[i],\n        this.requireGesturesToFail\n      );\n    }\n  }\n}\n\nexport class ExclusiveGesture extends ComposedGesture {\n  prepare() {\n    // transforms the array of gestures into array of grouped raw (not composed) gestures\n    // i.e. [gesture1, gesture2, ComposedGesture(gesture3, gesture4)] -> [[gesture1], [gesture2], [gesture3, gesture4]]\n    const gestureArrays = this.gestures.map((gesture) =>\n      gesture.toGestureArray()\n    );\n\n    let requireToFail: GestureType[] = [];\n\n    for (let i = 0; i < this.gestures.length; i++) {\n      this.prepareSingleGesture(\n        this.gestures[i],\n        this.simultaneousGestures,\n        this.requireGesturesToFail.concat(requireToFail)\n      );\n\n      // every group gets to wait for all groups before it\n      requireToFail = requireToFail.concat(gestureArrays[i]);\n    }\n  }\n}\n\nexport type ComposedGestureType = InstanceType<typeof ComposedGesture>;\nexport type RaceGestureType = ComposedGestureType;\nexport type SimultaneousGestureType = InstanceType<typeof SimultaneousGesture>;\nexport type ExclusiveGestureType = InstanceType<typeof ExclusiveGesture>;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}