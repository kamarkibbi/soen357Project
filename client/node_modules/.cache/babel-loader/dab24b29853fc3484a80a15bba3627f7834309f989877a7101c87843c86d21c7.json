{"ast":null,"code":"import invariant from '../utils/invariant';\nimport getScreenForRouteName from './getScreenForRouteName';\nimport createConfigGetter from './createConfigGetter';\nimport * as NavigationActions from '../NavigationActions';\nimport * as SwitchActions from './SwitchActions';\nimport * as StackActions from './StackActions';\nimport validateRouteConfigMap from './validateRouteConfigMap';\nimport { createPathParser } from './pathUtils';\nconst defaultActionCreators = () => ({});\nexport default (function (routeConfigs) {\n  let config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  // Fail fast on invalid route definitions\n  validateRouteConfigMap(routeConfigs);\n  const order = config.order || Object.keys(routeConfigs);\n  const getCustomActionCreators = config.getCustomActionCreators || defaultActionCreators;\n  const {\n    initialRouteParams\n  } = config;\n  const initialRouteName = config.initialRouteName || order[0];\n  const backBehavior = config.backBehavior || 'none';\n  const resetOnBlur = config.hasOwnProperty('resetOnBlur') ? config.resetOnBlur : true;\n  const initialRouteIndex = order.indexOf(initialRouteName);\n  if (initialRouteIndex === -1) {\n    throw new Error(\"Invalid initialRouteName '\".concat(initialRouteName, \"'.\") + \"Should be one of \".concat(order.map(n => \"\\\"\".concat(n, \"\\\"\")).join(', ')));\n  }\n  const childRouters = {};\n  order.forEach(routeName => {\n    childRouters[routeName] = null;\n    const screen = getScreenForRouteName(routeConfigs, routeName);\n    if (screen.router) {\n      childRouters[routeName] = screen.router;\n    }\n  });\n  function getParamsForRoute(routeName, params) {\n    let routeConfig = routeConfigs[routeName];\n    if (routeConfig && routeConfig.params) {\n      return {\n        ...routeConfig.params,\n        ...params\n      };\n    } else {\n      return params;\n    }\n  }\n  const {\n    getPathAndParamsForRoute,\n    getActionForPathAndParams\n  } = createPathParser(childRouters, routeConfigs, config);\n  function resetChildRoute(routeName) {\n    let initialParams = routeName === initialRouteName ? initialRouteParams : null; // note(brentvatne): merging initialRouteParams *on top* of default params\n    // on the route seems incorrect but it's consistent with existing behavior\n    // in stackrouter\n\n    let params = getParamsForRoute(routeName, initialParams);\n    const childRouter = childRouters[routeName];\n    if (childRouter) {\n      const childAction = NavigationActions.init();\n      return {\n        ...childRouter.getStateForAction(childAction),\n        key: routeName,\n        routeName,\n        ...(params ? {\n          params\n        } : {})\n      };\n    }\n    return {\n      key: routeName,\n      routeName,\n      ...(params ? {\n        params\n      } : {})\n    };\n  }\n  function getNextState(action, prevState, possibleNextState) {\n    function updateNextStateHistory(prevState, nextState) {\n      if (backBehavior !== 'history' || prevState && nextState && nextState.index === prevState.index) {\n        return nextState;\n      }\n      let nextRouteKeyHistory = prevState ? prevState.routeKeyHistory : [];\n      if (action.type === NavigationActions.NAVIGATE) {\n        nextRouteKeyHistory = [...nextRouteKeyHistory]; // copy\n\n        const keyToAdd = nextState.routes[nextState.index].key;\n        nextRouteKeyHistory = nextRouteKeyHistory.filter(k => k !== keyToAdd); // dedup\n\n        nextRouteKeyHistory.push(keyToAdd);\n      } else if (action.type === NavigationActions.BACK) {\n        nextRouteKeyHistory = [...nextRouteKeyHistory]; // copy\n\n        nextRouteKeyHistory.pop();\n      }\n      return {\n        ...nextState,\n        routeKeyHistory: nextRouteKeyHistory\n      };\n    }\n    let nextState = possibleNextState;\n    if (prevState && possibleNextState && prevState.index !== possibleNextState.index && resetOnBlur) {\n      const prevRouteName = prevState.routes[prevState.index].routeName;\n      const nextRoutes = [...possibleNextState.routes];\n      nextRoutes[prevState.index] = resetChildRoute(prevRouteName);\n      nextState = {\n        ...possibleNextState,\n        routes: nextRoutes\n      };\n    }\n    return updateNextStateHistory(prevState, nextState);\n  }\n  function getInitialState() {\n    const routes = order.map(resetChildRoute);\n    const initialState = {\n      routes,\n      index: initialRouteIndex\n    };\n    if (backBehavior === 'history') {\n      const initialKey = routes[initialRouteIndex].key;\n      initialState['routeKeyHistory'] = [initialKey];\n    }\n    return initialState;\n  }\n  return {\n    childRouters,\n    getActionCreators(route, stateKey) {\n      return getCustomActionCreators(route, stateKey);\n    },\n    getStateForAction(action, inputState) {\n      let prevState = inputState ? {\n        ...inputState\n      } : inputState;\n      let state = inputState || getInitialState();\n      let activeChildIndex = state.index;\n      if (action.type === NavigationActions.INIT) {\n        // NOTE(brentvatne): this seems weird... why are we merging these\n        // params into child routes?\n        // ---------------------------------------------------------------\n        // Merge any params from the action into all the child routes\n        const {\n          params\n        } = action;\n        if (params) {\n          state.routes = state.routes.map(route => ({\n            ...route,\n            params: {\n              ...route.params,\n              ...params,\n              ...(route.routeName === initialRouteName ? initialRouteParams : null)\n            }\n          }));\n        }\n      }\n      if (action.type === SwitchActions.JUMP_TO && (action.key == null || action.key === state.key)) {\n        const {\n          params\n        } = action;\n        const index = state.routes.findIndex(route => route.routeName === action.routeName);\n        if (index === -1) {\n          throw new Error(\"There is no route named '\".concat(action.routeName, \"' in the navigator with the key '\").concat(action.key, \"'.\\n\") + \"Must be one of: \".concat(state.routes.map(route => \"'\".concat(route.routeName, \"'\")).join(',')));\n        }\n        return getNextState(action, prevState, {\n          ...state,\n          routes: params ? state.routes.map((route, i) => i === index ? {\n            ...route,\n            params: {\n              ...route.params,\n              ...params\n            }\n          } : route) : state.routes,\n          index\n        });\n      } // Let the current child handle it\n\n      const activeChildLastState = state.routes[state.index];\n      const activeChildRouter = childRouters[order[state.index]];\n      if (activeChildRouter) {\n        const activeChildState = activeChildRouter.getStateForAction(action, activeChildLastState);\n        if (!activeChildState && inputState) {\n          return null;\n        }\n        if (activeChildState && activeChildState !== activeChildLastState) {\n          const routes = [...state.routes];\n          routes[state.index] = activeChildState;\n          return getNextState(action, prevState, {\n            ...state,\n            routes\n          });\n        }\n      } // Handle tab changing. Do this after letting the current tab try to\n      // handle the action, to allow inner children to change first\n\n      const isBackEligible = action.key == null || action.key === activeChildLastState.key;\n      if (action.type === NavigationActions.BACK) {\n        if (isBackEligible && backBehavior === 'initialRoute') {\n          activeChildIndex = initialRouteIndex;\n        } else if (isBackEligible && backBehavior === 'order') {\n          activeChildIndex = Math.max(0, activeChildIndex - 1);\n        } // The history contains current route, so we can only go back\n        // if there is more than one item in the history\n        else if (isBackEligible && backBehavior === 'history' && state.routeKeyHistory.length > 1) {\n          const routeKey = state.routeKeyHistory[state.routeKeyHistory.length - 2];\n          activeChildIndex = order.indexOf(routeKey);\n        }\n      }\n      let didNavigate = false;\n      if (action.type === NavigationActions.NAVIGATE) {\n        didNavigate = !!order.find((childId, i) => {\n          if (childId === action.routeName) {\n            activeChildIndex = i;\n            return true;\n          }\n          return false;\n        });\n        if (didNavigate) {\n          const childState = state.routes[activeChildIndex];\n          const childRouter = childRouters[action.routeName];\n          let newChildState = childState;\n          if (action.action && childRouter) {\n            const childStateUpdate = childRouter.getStateForAction(action.action, childState);\n            if (childStateUpdate) {\n              newChildState = childStateUpdate;\n            }\n          }\n          if (action.params) {\n            newChildState = {\n              ...newChildState,\n              params: {\n                ...(newChildState.params || {}),\n                ...action.params\n              }\n            };\n          }\n          if (newChildState !== childState) {\n            const routes = [...state.routes];\n            routes[activeChildIndex] = newChildState;\n            const nextState = {\n              ...state,\n              routes,\n              index: activeChildIndex\n            };\n            return getNextState(action, prevState, nextState);\n          } else if (newChildState === childState && state.index === activeChildIndex && prevState) {\n            return null;\n          }\n        }\n      }\n      if (action.type === NavigationActions.SET_PARAMS) {\n        const key = action.key;\n        const lastRoute = state.routes.find(route => route.key === key);\n        if (lastRoute) {\n          const params = {\n            ...lastRoute.params,\n            ...action.params\n          };\n          const routes = [...state.routes];\n          routes[state.routes.indexOf(lastRoute)] = {\n            ...lastRoute,\n            params\n          };\n          return getNextState(action, prevState, {\n            ...state,\n            routes\n          });\n        }\n      }\n      if (activeChildIndex !== state.index) {\n        return getNextState(action, prevState, {\n          ...state,\n          index: activeChildIndex\n        });\n      } else if (didNavigate && !inputState) {\n        return state;\n      } else if (didNavigate) {\n        return {\n          ...state\n        };\n      }\n      const isActionBackOrPop = action.type === NavigationActions.BACK || action.type === StackActions.POP || action.type === StackActions.POP_TO_TOP;\n      const sendActionToInactiveChildren = !isActionBackOrPop || action.type === NavigationActions.BACK && action.key != null; // Let other children handle it and switch to the first child that returns a new state\n      // Do not do this for StackActions.POP or NavigationActions.BACK actions without a key:\n      // it would be unintuitive for these actions to switch to another tab just because that tab had a Stack that could accept a back action\n\n      if (sendActionToInactiveChildren) {\n        let index = state.index;\n        let routes = state.routes;\n        order.find((childId, i) => {\n          const childRouter = childRouters[childId];\n          if (i === index) {\n            return false;\n          }\n          let childState = routes[i];\n          if (childRouter) {\n            childState = childRouter.getStateForAction(action, childState);\n          }\n          if (!childState) {\n            index = i;\n            return true;\n          }\n          if (childState !== routes[i]) {\n            routes = [...routes];\n            routes[i] = childState;\n            index = i;\n            return true;\n          }\n          return false;\n        }); // Nested routers can be updated after switching children with actions such as SET_PARAMS\n        // and COMPLETE_TRANSITION.\n\n        if (action.preserveFocus) {\n          index = state.index;\n        }\n        if (index !== state.index || routes !== state.routes) {\n          return getNextState(action, prevState, {\n            ...state,\n            index,\n            routes\n          });\n        }\n      }\n      return state;\n    },\n    getComponentForState(state) {\n      const routeName = state.routes[state.index].routeName;\n      invariant(routeName, \"There is no route defined for index \".concat(state.index, \". Check that\\n        that you passed in a navigation state with a valid tab/screen index.\"));\n      const childRouter = childRouters[routeName];\n      if (childRouter) {\n        return childRouter.getComponentForState(state.routes[state.index]);\n      }\n      return getScreenForRouteName(routeConfigs, routeName);\n    },\n    getComponentForRouteName(routeName) {\n      return getScreenForRouteName(routeConfigs, routeName);\n    },\n    getPathAndParamsForState(state) {\n      const route = state.routes[state.index];\n      return getPathAndParamsForRoute(route);\n    },\n    getActionForPathAndParams(path, params) {\n      return getActionForPathAndParams(path, params);\n    },\n    getScreenOptions: createConfigGetter(routeConfigs, config.defaultNavigationOptions)\n  };\n});","map":{"version":3,"names":["invariant","getScreenForRouteName","createConfigGetter","NavigationActions","SwitchActions","StackActions","validateRouteConfigMap","createPathParser","defaultActionCreators","routeConfigs","config","arguments","length","undefined","order","Object","keys","getCustomActionCreators","initialRouteParams","initialRouteName","backBehavior","resetOnBlur","hasOwnProperty","initialRouteIndex","indexOf","Error","concat","map","n","join","childRouters","forEach","routeName","screen","router","getParamsForRoute","params","routeConfig","getPathAndParamsForRoute","getActionForPathAndParams","resetChildRoute","initialParams","childRouter","childAction","init","getStateForAction","key","getNextState","action","prevState","possibleNextState","updateNextStateHistory","nextState","index","nextRouteKeyHistory","routeKeyHistory","type","NAVIGATE","keyToAdd","routes","filter","k","push","BACK","pop","prevRouteName","nextRoutes","getInitialState","initialState","initialKey","getActionCreators","route","stateKey","inputState","state","activeChildIndex","INIT","JUMP_TO","findIndex","i","activeChildLastState","activeChildRouter","activeChildState","isBackEligible","Math","max","routeKey","didNavigate","find","childId","childState","newChildState","childStateUpdate","SET_PARAMS","lastRoute","isActionBackOrPop","POP","POP_TO_TOP","sendActionToInactiveChildren","preserveFocus","getComponentForState","getComponentForRouteName","getPathAndParamsForState","path","getScreenOptions","defaultNavigationOptions"],"sources":["/Users/solomon-moulang-lewis/Documents/University/Year 2/Term 2/User interface design/soen357Project/client/node_modules/@react-navigation/core/lib/module/routers/SwitchRouter.js"],"sourcesContent":["import invariant from '../utils/invariant';\nimport getScreenForRouteName from './getScreenForRouteName';\nimport createConfigGetter from './createConfigGetter';\n\nimport * as NavigationActions from '../NavigationActions';\nimport * as SwitchActions from './SwitchActions';\nimport * as StackActions from './StackActions';\nimport validateRouteConfigMap from './validateRouteConfigMap';\nimport { createPathParser } from './pathUtils';\n\nconst defaultActionCreators = () => ({});\n\nexport default (routeConfigs, config = {}) => {\n  // Fail fast on invalid route definitions\n  validateRouteConfigMap(routeConfigs);\n\n  const order = config.order || Object.keys(routeConfigs);\n\n  const getCustomActionCreators =\n    config.getCustomActionCreators || defaultActionCreators;\n\n  const { initialRouteParams } = config;\n  const initialRouteName = config.initialRouteName || order[0];\n  const backBehavior = config.backBehavior || 'none';\n  const resetOnBlur = config.hasOwnProperty('resetOnBlur')\n    ? config.resetOnBlur\n    : true;\n\n  const initialRouteIndex = order.indexOf(initialRouteName);\n  if (initialRouteIndex === -1) {\n    throw new Error(\n      `Invalid initialRouteName '${initialRouteName}'.` +\n        `Should be one of ${order.map((n) => `\"${n}\"`).join(', ')}`\n    );\n  }\n\n  const childRouters = {};\n  order.forEach((routeName) => {\n    childRouters[routeName] = null;\n    const screen = getScreenForRouteName(routeConfigs, routeName);\n    if (screen.router) {\n      childRouters[routeName] = screen.router;\n    }\n  });\n\n  function getParamsForRoute(routeName, params) {\n    let routeConfig = routeConfigs[routeName];\n    if (routeConfig && routeConfig.params) {\n      return { ...routeConfig.params, ...params };\n    } else {\n      return params;\n    }\n  }\n\n  const {\n    getPathAndParamsForRoute,\n    getActionForPathAndParams,\n  } = createPathParser(childRouters, routeConfigs, config);\n\n  function resetChildRoute(routeName) {\n    let initialParams =\n      routeName === initialRouteName ? initialRouteParams : null;\n    // note(brentvatne): merging initialRouteParams *on top* of default params\n    // on the route seems incorrect but it's consistent with existing behavior\n    // in stackrouter\n    let params = getParamsForRoute(routeName, initialParams);\n    const childRouter = childRouters[routeName];\n    if (childRouter) {\n      const childAction = NavigationActions.init();\n      return {\n        ...childRouter.getStateForAction(childAction),\n        key: routeName,\n        routeName,\n        ...(params ? { params } : {}),\n      };\n    }\n    return {\n      key: routeName,\n      routeName,\n      ...(params ? { params } : {}),\n    };\n  }\n\n  function getNextState(action, prevState, possibleNextState) {\n    function updateNextStateHistory(prevState, nextState) {\n      if (\n        backBehavior !== 'history' ||\n        (prevState && nextState && nextState.index === prevState.index)\n      ) {\n        return nextState;\n      }\n      let nextRouteKeyHistory = prevState ? prevState.routeKeyHistory : [];\n      if (action.type === NavigationActions.NAVIGATE) {\n        nextRouteKeyHistory = [...nextRouteKeyHistory]; // copy\n        const keyToAdd = nextState.routes[nextState.index].key;\n        nextRouteKeyHistory = nextRouteKeyHistory.filter((k) => k !== keyToAdd); // dedup\n        nextRouteKeyHistory.push(keyToAdd);\n      } else if (action.type === NavigationActions.BACK) {\n        nextRouteKeyHistory = [...nextRouteKeyHistory]; // copy\n        nextRouteKeyHistory.pop();\n      }\n      return {\n        ...nextState,\n        routeKeyHistory: nextRouteKeyHistory,\n      };\n    }\n\n    let nextState = possibleNextState;\n    if (\n      prevState &&\n      possibleNextState &&\n      prevState.index !== possibleNextState.index &&\n      resetOnBlur\n    ) {\n      const prevRouteName = prevState.routes[prevState.index].routeName;\n      const nextRoutes = [...possibleNextState.routes];\n      nextRoutes[prevState.index] = resetChildRoute(prevRouteName);\n      nextState = {\n        ...possibleNextState,\n        routes: nextRoutes,\n      };\n    }\n    return updateNextStateHistory(prevState, nextState);\n  }\n\n  function getInitialState() {\n    const routes = order.map(resetChildRoute);\n    const initialState = {\n      routes,\n      index: initialRouteIndex,\n    };\n\n    if (backBehavior === 'history') {\n      const initialKey = routes[initialRouteIndex].key;\n      initialState['routeKeyHistory'] = [initialKey];\n    }\n    return initialState;\n  }\n\n  return {\n    childRouters,\n\n    getActionCreators(route, stateKey) {\n      return getCustomActionCreators(route, stateKey);\n    },\n\n    getStateForAction(action, inputState) {\n      let prevState = inputState ? { ...inputState } : inputState;\n      let state = inputState || getInitialState();\n      let activeChildIndex = state.index;\n\n      if (action.type === NavigationActions.INIT) {\n        // NOTE(brentvatne): this seems weird... why are we merging these\n        // params into child routes?\n        // ---------------------------------------------------------------\n        // Merge any params from the action into all the child routes\n        const { params } = action;\n        if (params) {\n          state.routes = state.routes.map((route) => ({\n            ...route,\n            params: {\n              ...route.params,\n              ...params,\n              ...(route.routeName === initialRouteName\n                ? initialRouteParams\n                : null),\n            },\n          }));\n        }\n      }\n\n      if (\n        action.type === SwitchActions.JUMP_TO &&\n        (action.key == null || action.key === state.key)\n      ) {\n        const { params } = action;\n        const index = state.routes.findIndex(\n          (route) => route.routeName === action.routeName\n        );\n\n        if (index === -1) {\n          throw new Error(\n            `There is no route named '${action.routeName}' in the navigator with the key '${action.key}'.\\n` +\n              `Must be one of: ${state.routes\n                .map((route) => `'${route.routeName}'`)\n                .join(',')}`\n          );\n        }\n\n        return getNextState(action, prevState, {\n          ...state,\n          routes: params\n            ? state.routes.map((route, i) =>\n                i === index\n                  ? {\n                      ...route,\n                      params: {\n                        ...route.params,\n                        ...params,\n                      },\n                    }\n                  : route\n              )\n            : state.routes,\n          index,\n        });\n      }\n\n      // Let the current child handle it\n      const activeChildLastState = state.routes[state.index];\n      const activeChildRouter = childRouters[order[state.index]];\n      if (activeChildRouter) {\n        const activeChildState = activeChildRouter.getStateForAction(\n          action,\n          activeChildLastState\n        );\n        if (!activeChildState && inputState) {\n          return null;\n        }\n        if (activeChildState && activeChildState !== activeChildLastState) {\n          const routes = [...state.routes];\n          routes[state.index] = activeChildState;\n          return getNextState(action, prevState, {\n            ...state,\n            routes,\n          });\n        }\n      }\n\n      // Handle tab changing. Do this after letting the current tab try to\n      // handle the action, to allow inner children to change first\n      const isBackEligible =\n        action.key == null || action.key === activeChildLastState.key;\n      if (action.type === NavigationActions.BACK) {\n        if (isBackEligible && backBehavior === 'initialRoute') {\n          activeChildIndex = initialRouteIndex;\n        } else if (isBackEligible && backBehavior === 'order') {\n          activeChildIndex = Math.max(0, activeChildIndex - 1);\n        }\n        // The history contains current route, so we can only go back\n        // if there is more than one item in the history\n        else if (\n          isBackEligible &&\n          backBehavior === 'history' &&\n          state.routeKeyHistory.length > 1\n        ) {\n          const routeKey =\n            state.routeKeyHistory[state.routeKeyHistory.length - 2];\n          activeChildIndex = order.indexOf(routeKey);\n        }\n      }\n\n      let didNavigate = false;\n      if (action.type === NavigationActions.NAVIGATE) {\n        didNavigate = !!order.find((childId, i) => {\n          if (childId === action.routeName) {\n            activeChildIndex = i;\n            return true;\n          }\n          return false;\n        });\n        if (didNavigate) {\n          const childState = state.routes[activeChildIndex];\n          const childRouter = childRouters[action.routeName];\n          let newChildState = childState;\n\n          if (action.action && childRouter) {\n            const childStateUpdate = childRouter.getStateForAction(\n              action.action,\n              childState\n            );\n            if (childStateUpdate) {\n              newChildState = childStateUpdate;\n            }\n          }\n\n          if (action.params) {\n            newChildState = {\n              ...newChildState,\n              params: {\n                ...(newChildState.params || {}),\n                ...action.params,\n              },\n            };\n          }\n\n          if (newChildState !== childState) {\n            const routes = [...state.routes];\n            routes[activeChildIndex] = newChildState;\n            const nextState = {\n              ...state,\n              routes,\n              index: activeChildIndex,\n            };\n            return getNextState(action, prevState, nextState);\n          } else if (\n            newChildState === childState &&\n            state.index === activeChildIndex &&\n            prevState\n          ) {\n            return null;\n          }\n        }\n      }\n\n      if (action.type === NavigationActions.SET_PARAMS) {\n        const key = action.key;\n        const lastRoute = state.routes.find((route) => route.key === key);\n        if (lastRoute) {\n          const params = {\n            ...lastRoute.params,\n            ...action.params,\n          };\n          const routes = [...state.routes];\n          routes[state.routes.indexOf(lastRoute)] = {\n            ...lastRoute,\n            params,\n          };\n          return getNextState(action, prevState, {\n            ...state,\n            routes,\n          });\n        }\n      }\n\n      if (activeChildIndex !== state.index) {\n        return getNextState(action, prevState, {\n          ...state,\n          index: activeChildIndex,\n        });\n      } else if (didNavigate && !inputState) {\n        return state;\n      } else if (didNavigate) {\n        return { ...state };\n      }\n\n      const isActionBackOrPop =\n        action.type === NavigationActions.BACK ||\n        action.type === StackActions.POP ||\n        action.type === StackActions.POP_TO_TOP;\n      const sendActionToInactiveChildren =\n        !isActionBackOrPop ||\n        (action.type === NavigationActions.BACK && action.key != null);\n\n      // Let other children handle it and switch to the first child that returns a new state\n      // Do not do this for StackActions.POP or NavigationActions.BACK actions without a key:\n      // it would be unintuitive for these actions to switch to another tab just because that tab had a Stack that could accept a back action\n      if (sendActionToInactiveChildren) {\n        let index = state.index;\n        let routes = state.routes;\n        order.find((childId, i) => {\n          const childRouter = childRouters[childId];\n          if (i === index) {\n            return false;\n          }\n          let childState = routes[i];\n          if (childRouter) {\n            childState = childRouter.getStateForAction(action, childState);\n          }\n          if (!childState) {\n            index = i;\n            return true;\n          }\n          if (childState !== routes[i]) {\n            routes = [...routes];\n            routes[i] = childState;\n            index = i;\n            return true;\n          }\n          return false;\n        });\n\n        // Nested routers can be updated after switching children with actions such as SET_PARAMS\n        // and COMPLETE_TRANSITION.\n        if (action.preserveFocus) {\n          index = state.index;\n        }\n\n        if (index !== state.index || routes !== state.routes) {\n          return getNextState(action, prevState, {\n            ...state,\n            index,\n            routes,\n          });\n        }\n      }\n\n      return state;\n    },\n\n    getComponentForState(state) {\n      const routeName = state.routes[state.index].routeName;\n      invariant(\n        routeName,\n        `There is no route defined for index ${state.index}. Check that\n        that you passed in a navigation state with a valid tab/screen index.`\n      );\n      const childRouter = childRouters[routeName];\n      if (childRouter) {\n        return childRouter.getComponentForState(state.routes[state.index]);\n      }\n      return getScreenForRouteName(routeConfigs, routeName);\n    },\n\n    getComponentForRouteName(routeName) {\n      return getScreenForRouteName(routeConfigs, routeName);\n    },\n\n    getPathAndParamsForState(state) {\n      const route = state.routes[state.index];\n      return getPathAndParamsForRoute(route);\n    },\n\n    getActionForPathAndParams(path, params) {\n      return getActionForPathAndParams(path, params);\n    },\n\n    getScreenOptions: createConfigGetter(\n      routeConfigs,\n      config.defaultNavigationOptions\n    ),\n  };\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}