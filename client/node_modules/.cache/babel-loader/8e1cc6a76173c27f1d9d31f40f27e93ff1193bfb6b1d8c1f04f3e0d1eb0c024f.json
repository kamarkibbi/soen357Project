{"ast":null,"code":"import { EventTypes, MouseButtons, PointerType } from '../interfaces';\nimport EventManager from './EventManager';\nimport { isPointerInBounds } from '../utils';\nexport default class PointerEventManager extends EventManager {\n  setListeners() {\n    this.view.addEventListener('pointerdown', event => {\n      if (event.pointerType === PointerType.TOUCH) {\n        return;\n      }\n      if (!isPointerInBounds(this.view, {\n        x: event.clientX,\n        y: event.clientY\n      })) {\n        return;\n      }\n      const adaptedEvent = this.mapEvent(event, EventTypes.DOWN);\n      const target = event.target;\n      target.setPointerCapture(adaptedEvent.pointerId);\n      this.markAsInBounds(adaptedEvent.pointerId);\n      if (++this.activePointersCounter > 1) {\n        adaptedEvent.eventType = EventTypes.ADDITIONAL_POINTER_DOWN;\n        this.onPointerAdd(adaptedEvent);\n      } else {\n        this.onPointerDown(adaptedEvent);\n      }\n    });\n    this.view.addEventListener('pointerup', event => {\n      if (event.pointerType === PointerType.TOUCH) {\n        return;\n      } // When we call reset on gesture handlers, it also resets their event managers\n      // In some handlers (like RotationGestureHandler) reset is called before all pointers leave view\n      // This means, that activePointersCounter will be set to 0, while there are still remaining pointers on view\n      // Removing them will end in activePointersCounter going below 0, therefore handlers won't behave properly\n\n      if (this.activePointersCounter === 0) {\n        return;\n      }\n      const adaptedEvent = this.mapEvent(event, EventTypes.UP);\n      const target = event.target;\n      target.releasePointerCapture(adaptedEvent.pointerId);\n      this.markAsOutOfBounds(adaptedEvent.pointerId);\n      if (--this.activePointersCounter > 0) {\n        adaptedEvent.eventType = EventTypes.ADDITIONAL_POINTER_UP;\n        this.onPointerRemove(adaptedEvent);\n      } else {\n        this.onPointerUp(adaptedEvent);\n      }\n    });\n    this.view.addEventListener('pointermove', event => {\n      if (event.pointerType === PointerType.TOUCH) {\n        return;\n      }\n      if (event.pointerType === PointerType.MOUSE && event.buttons !== MouseButtons.LEFT) {\n        return;\n      }\n      const adaptedEvent = this.mapEvent(event, EventTypes.MOVE);\n      const inBounds = isPointerInBounds(this.view, {\n        x: adaptedEvent.x,\n        y: adaptedEvent.y\n      });\n      const pointerIndex = this.pointersInBounds.indexOf(adaptedEvent.pointerId);\n      if (inBounds) {\n        if (pointerIndex < 0) {\n          adaptedEvent.eventType = EventTypes.ENTER;\n          this.onPointerEnter(adaptedEvent);\n          this.markAsInBounds(adaptedEvent.pointerId);\n        } else {\n          this.onPointerMove(adaptedEvent);\n        }\n      } else {\n        if (pointerIndex >= 0) {\n          adaptedEvent.eventType = EventTypes.OUT;\n          this.onPointerOut(adaptedEvent);\n          this.markAsOutOfBounds(adaptedEvent.pointerId);\n        } else {\n          this.onPointerOutOfBounds(adaptedEvent);\n        }\n      }\n    });\n    this.view.addEventListener('pointercancel', event => {\n      if (event.pointerType === PointerType.TOUCH) {\n        return;\n      }\n      const adaptedEvent = this.mapEvent(event, EventTypes.CANCEL);\n      this.onPointerCancel(adaptedEvent);\n      this.markAsOutOfBounds(adaptedEvent.pointerId);\n      this.activePointersCounter = 0;\n    });\n  }\n  mapEvent(event, eventType) {\n    return {\n      x: event.clientX,\n      y: event.clientY,\n      offsetX: event.offsetX,\n      offsetY: event.offsetY,\n      pointerId: event.pointerId,\n      eventType: eventType,\n      pointerType: event.pointerType,\n      buttons: event.buttons,\n      time: event.timeStamp\n    };\n  }\n}","map":{"version":3,"names":["EventTypes","MouseButtons","PointerType","EventManager","isPointerInBounds","PointerEventManager","setListeners","view","addEventListener","event","pointerType","TOUCH","x","clientX","y","clientY","adaptedEvent","mapEvent","DOWN","target","setPointerCapture","pointerId","markAsInBounds","activePointersCounter","eventType","ADDITIONAL_POINTER_DOWN","onPointerAdd","onPointerDown","UP","releasePointerCapture","markAsOutOfBounds","ADDITIONAL_POINTER_UP","onPointerRemove","onPointerUp","MOUSE","buttons","LEFT","MOVE","inBounds","pointerIndex","pointersInBounds","indexOf","ENTER","onPointerEnter","onPointerMove","OUT","onPointerOut","onPointerOutOfBounds","CANCEL","onPointerCancel","offsetX","offsetY","time","timeStamp"],"sources":["/Users/solomon-moulang-lewis/Documents/University/Year 2/Term 2/User interface design/soen357Project/client/node_modules/react-native-gesture-handler/lib/module/web/tools/PointerEventManager.ts"],"sourcesContent":["import {\n  AdaptedEvent,\n  EventTypes,\n  MouseButtons,\n  PointerType,\n} from '../interfaces';\nimport EventManager from './EventManager';\nimport { isPointerInBounds } from '../utils';\n\nexport default class PointerEventManager extends EventManager {\n  public setListeners(): void {\n    this.view.addEventListener('pointerdown', (event: PointerEvent): void => {\n      if (event.pointerType === PointerType.TOUCH) {\n        return;\n      }\n      if (\n        !isPointerInBounds(this.view, { x: event.clientX, y: event.clientY })\n      ) {\n        return;\n      }\n\n      const adaptedEvent: AdaptedEvent = this.mapEvent(event, EventTypes.DOWN);\n      const target = event.target as HTMLElement;\n\n      target.setPointerCapture(adaptedEvent.pointerId);\n      this.markAsInBounds(adaptedEvent.pointerId);\n\n      if (++this.activePointersCounter > 1) {\n        adaptedEvent.eventType = EventTypes.ADDITIONAL_POINTER_DOWN;\n        this.onPointerAdd(adaptedEvent);\n      } else {\n        this.onPointerDown(adaptedEvent);\n      }\n    });\n\n    this.view.addEventListener('pointerup', (event: PointerEvent): void => {\n      if (event.pointerType === PointerType.TOUCH) {\n        return;\n      }\n\n      // When we call reset on gesture handlers, it also resets their event managers\n      // In some handlers (like RotationGestureHandler) reset is called before all pointers leave view\n      // This means, that activePointersCounter will be set to 0, while there are still remaining pointers on view\n      // Removing them will end in activePointersCounter going below 0, therefore handlers won't behave properly\n      if (this.activePointersCounter === 0) {\n        return;\n      }\n\n      const adaptedEvent: AdaptedEvent = this.mapEvent(event, EventTypes.UP);\n      const target = event.target as HTMLElement;\n\n      target.releasePointerCapture(adaptedEvent.pointerId);\n      this.markAsOutOfBounds(adaptedEvent.pointerId);\n\n      if (--this.activePointersCounter > 0) {\n        adaptedEvent.eventType = EventTypes.ADDITIONAL_POINTER_UP;\n        this.onPointerRemove(adaptedEvent);\n      } else {\n        this.onPointerUp(adaptedEvent);\n      }\n    });\n\n    this.view.addEventListener('pointermove', (event: PointerEvent): void => {\n      if (event.pointerType === PointerType.TOUCH) {\n        return;\n      }\n\n      if (\n        event.pointerType === PointerType.MOUSE &&\n        event.buttons !== MouseButtons.LEFT\n      ) {\n        return;\n      }\n\n      const adaptedEvent: AdaptedEvent = this.mapEvent(event, EventTypes.MOVE);\n\n      const inBounds: boolean = isPointerInBounds(this.view, {\n        x: adaptedEvent.x,\n        y: adaptedEvent.y,\n      });\n\n      const pointerIndex: number = this.pointersInBounds.indexOf(\n        adaptedEvent.pointerId\n      );\n\n      if (inBounds) {\n        if (pointerIndex < 0) {\n          adaptedEvent.eventType = EventTypes.ENTER;\n          this.onPointerEnter(adaptedEvent);\n          this.markAsInBounds(adaptedEvent.pointerId);\n        } else {\n          this.onPointerMove(adaptedEvent);\n        }\n      } else {\n        if (pointerIndex >= 0) {\n          adaptedEvent.eventType = EventTypes.OUT;\n          this.onPointerOut(adaptedEvent);\n          this.markAsOutOfBounds(adaptedEvent.pointerId);\n        } else {\n          this.onPointerOutOfBounds(adaptedEvent);\n        }\n      }\n    });\n\n    this.view.addEventListener('pointercancel', (event: PointerEvent): void => {\n      if (event.pointerType === PointerType.TOUCH) {\n        return;\n      }\n\n      const adaptedEvent: AdaptedEvent = this.mapEvent(\n        event,\n        EventTypes.CANCEL\n      );\n\n      this.onPointerCancel(adaptedEvent);\n      this.markAsOutOfBounds(adaptedEvent.pointerId);\n      this.activePointersCounter = 0;\n    });\n  }\n\n  protected mapEvent(event: PointerEvent, eventType: EventTypes): AdaptedEvent {\n    return {\n      x: event.clientX,\n      y: event.clientY,\n      offsetX: event.offsetX,\n      offsetY: event.offsetY,\n      pointerId: event.pointerId,\n      eventType: eventType,\n      pointerType: event.pointerType as PointerType,\n      buttons: event.buttons,\n      time: event.timeStamp,\n    };\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}