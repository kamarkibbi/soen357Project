{"ast":null,"code":"import Hammer from '@egjs/hammerjs';\nimport { MULTI_FINGER_PAN_MAX_PINCH_THRESHOLD, MULTI_FINGER_PAN_MAX_ROTATION_THRESHOLD } from './constants';\nimport DraggingGestureHandler from './DraggingGestureHandler';\nimport { isValidNumber, isnan, TEST_MIN_IF_NOT_NAN, VEC_LEN_SQ } from './utils';\nimport { State } from '../State';\nclass PanGestureHandler extends DraggingGestureHandler {\n  get name() {\n    return 'pan';\n  }\n  get NativeGestureClass() {\n    return Hammer.Pan;\n  }\n  getHammerConfig() {\n    return {\n      ...super.getHammerConfig(),\n      direction: this.getDirection()\n    };\n  }\n  getState(type) {\n    const nextState = super.getState(type); // Ensure that the first state sent is `BEGAN` and not `ACTIVE`\n\n    if (this.previousState === State.UNDETERMINED && nextState === State.ACTIVE) {\n      return State.BEGAN;\n    }\n    return nextState;\n  }\n  getDirection() {\n    const config = this.getConfig();\n    const {\n      activeOffsetXStart,\n      activeOffsetXEnd,\n      activeOffsetYStart,\n      activeOffsetYEnd,\n      minDist\n    } = config;\n    let directions = [];\n    let horizontalDirections = [];\n    if (!isnan(minDist)) {\n      return Hammer.DIRECTION_ALL;\n    }\n    if (!isnan(activeOffsetXStart)) {\n      horizontalDirections.push(Hammer.DIRECTION_LEFT);\n    }\n    if (!isnan(activeOffsetXEnd)) {\n      horizontalDirections.push(Hammer.DIRECTION_RIGHT);\n    }\n    if (horizontalDirections.length === 2) {\n      horizontalDirections = [Hammer.DIRECTION_HORIZONTAL];\n    }\n    directions = directions.concat(horizontalDirections);\n    let verticalDirections = [];\n    if (!isnan(activeOffsetYStart)) {\n      verticalDirections.push(Hammer.DIRECTION_UP);\n    }\n    if (!isnan(activeOffsetYEnd)) {\n      verticalDirections.push(Hammer.DIRECTION_DOWN);\n    }\n    if (verticalDirections.length === 2) {\n      verticalDirections = [Hammer.DIRECTION_VERTICAL];\n    }\n    directions = directions.concat(verticalDirections);\n    if (!directions.length) {\n      return Hammer.DIRECTION_NONE;\n    }\n    if (directions[0] === Hammer.DIRECTION_HORIZONTAL && directions[1] === Hammer.DIRECTION_VERTICAL) {\n      return Hammer.DIRECTION_ALL;\n    }\n    if (horizontalDirections.length && verticalDirections.length) {\n      return Hammer.DIRECTION_ALL;\n    }\n    return directions[0];\n  }\n  getConfig() {\n    if (!this.hasCustomActivationCriteria) {\n      // Default config\n      // If no params have been defined then this config should emulate the native gesture as closely as possible.\n      return {\n        minDistSq: 10\n      };\n    }\n    return this.config;\n  }\n  shouldFailUnderCustomCriteria(_ref, criteria) {\n    let {\n      deltaX,\n      deltaY\n    } = _ref;\n    return !isnan(criteria.failOffsetXStart) && deltaX < criteria.failOffsetXStart || !isnan(criteria.failOffsetXEnd) && deltaX > criteria.failOffsetXEnd || !isnan(criteria.failOffsetYStart) && deltaY < criteria.failOffsetYStart || !isnan(criteria.failOffsetYEnd) && deltaY > criteria.failOffsetYEnd;\n  }\n  shouldActivateUnderCustomCriteria(_ref2, criteria) {\n    let {\n      deltaX,\n      deltaY,\n      velocity\n    } = _ref2;\n    return !isnan(criteria.activeOffsetXStart) && deltaX < criteria.activeOffsetXStart || !isnan(criteria.activeOffsetXEnd) && deltaX > criteria.activeOffsetXEnd || !isnan(criteria.activeOffsetYStart) && deltaY < criteria.activeOffsetYStart || !isnan(criteria.activeOffsetYEnd) && deltaY > criteria.activeOffsetYEnd || TEST_MIN_IF_NOT_NAN(VEC_LEN_SQ({\n      x: deltaX,\n      y: deltaY\n    }), criteria.minDistSq) || TEST_MIN_IF_NOT_NAN(velocity.x, criteria.minVelocityX) || TEST_MIN_IF_NOT_NAN(velocity.y, criteria.minVelocityY) || TEST_MIN_IF_NOT_NAN(VEC_LEN_SQ(velocity), criteria.minVelocitySq);\n  }\n  shouldMultiFingerPanFail(_ref3) {\n    let {\n      pointerLength,\n      scale,\n      deltaRotation\n    } = _ref3;\n    if (pointerLength <= 1) {\n      return false;\n    } // Test if the pan had too much pinching or rotating.\n\n    const deltaScale = Math.abs(scale - 1);\n    const absDeltaRotation = Math.abs(deltaRotation);\n    if (deltaScale > MULTI_FINGER_PAN_MAX_PINCH_THRESHOLD) {\n      // > If the threshold doesn't seem right.\n      // You can log the value which it failed at here:\n      return true;\n    }\n    if (absDeltaRotation > MULTI_FINGER_PAN_MAX_ROTATION_THRESHOLD) {\n      // > If the threshold doesn't seem right.\n      // You can log the value which it failed at here:\n      return true;\n    }\n    return false;\n  }\n  updateHasCustomActivationCriteria(criteria) {\n    return isValidNumber(criteria.minDistSq) || isValidNumber(criteria.minVelocityX) || isValidNumber(criteria.minVelocityY) || isValidNumber(criteria.minVelocitySq) || isValidNumber(criteria.activeOffsetXStart) || isValidNumber(criteria.activeOffsetXEnd) || isValidNumber(criteria.activeOffsetYStart) || isValidNumber(criteria.activeOffsetYEnd);\n  }\n  isGestureEnabledForEvent(props, _recognizer, inputData) {\n    if (this.shouldFailUnderCustomCriteria(inputData, props)) {\n      return {\n        failed: true\n      };\n    }\n    const velocity = {\n      x: inputData.velocityX,\n      y: inputData.velocityY\n    };\n    if (this.hasCustomActivationCriteria && this.shouldActivateUnderCustomCriteria({\n      deltaX: inputData.deltaX,\n      deltaY: inputData.deltaY,\n      velocity\n    }, props)) {\n      if (this.shouldMultiFingerPanFail({\n        pointerLength: inputData.maxPointers,\n        scale: inputData.scale,\n        deltaRotation: inputData.deltaRotation\n      })) {\n        return {\n          failed: true\n        };\n      }\n      return {\n        success: true\n      };\n    }\n    return {\n      success: false\n    };\n  }\n}\nexport default PanGestureHandler;","map":{"version":3,"names":["Hammer","MULTI_FINGER_PAN_MAX_PINCH_THRESHOLD","MULTI_FINGER_PAN_MAX_ROTATION_THRESHOLD","DraggingGestureHandler","isValidNumber","isnan","TEST_MIN_IF_NOT_NAN","VEC_LEN_SQ","State","PanGestureHandler","name","NativeGestureClass","Pan","getHammerConfig","direction","getDirection","getState","type","nextState","previousState","UNDETERMINED","ACTIVE","BEGAN","config","getConfig","activeOffsetXStart","activeOffsetXEnd","activeOffsetYStart","activeOffsetYEnd","minDist","directions","horizontalDirections","DIRECTION_ALL","push","DIRECTION_LEFT","DIRECTION_RIGHT","length","DIRECTION_HORIZONTAL","concat","verticalDirections","DIRECTION_UP","DIRECTION_DOWN","DIRECTION_VERTICAL","DIRECTION_NONE","hasCustomActivationCriteria","minDistSq","shouldFailUnderCustomCriteria","_ref","criteria","deltaX","deltaY","failOffsetXStart","failOffsetXEnd","failOffsetYStart","failOffsetYEnd","shouldActivateUnderCustomCriteria","_ref2","velocity","x","y","minVelocityX","minVelocityY","minVelocitySq","shouldMultiFingerPanFail","_ref3","pointerLength","scale","deltaRotation","deltaScale","Math","abs","absDeltaRotation","updateHasCustomActivationCriteria","isGestureEnabledForEvent","props","_recognizer","inputData","failed","velocityX","velocityY","maxPointers","success"],"sources":["/Users/solomon-moulang-lewis/Documents/University/Year 2/Term 2/User interface design/soen357Project/client/node_modules/react-native-gesture-handler/lib/module/web_hammer/PanGestureHandler.ts"],"sourcesContent":["import Hammer from '@egjs/hammerjs';\n\nimport {\n  EventMap,\n  MULTI_FINGER_PAN_MAX_PINCH_THRESHOLD,\n  MULTI_FINGER_PAN_MAX_ROTATION_THRESHOLD,\n} from './constants';\nimport DraggingGestureHandler from './DraggingGestureHandler';\nimport { isValidNumber, isnan, TEST_MIN_IF_NOT_NAN, VEC_LEN_SQ } from './utils';\nimport { State } from '../State';\n\nimport { Config, HammerInputExt } from './GestureHandler';\nclass PanGestureHandler extends DraggingGestureHandler {\n  get name() {\n    return 'pan';\n  }\n\n  get NativeGestureClass() {\n    return Hammer.Pan;\n  }\n\n  getHammerConfig() {\n    return {\n      ...super.getHammerConfig(),\n      direction: this.getDirection(),\n    };\n  }\n\n  getState(type: keyof typeof EventMap) {\n    const nextState = super.getState(type);\n    // Ensure that the first state sent is `BEGAN` and not `ACTIVE`\n    if (\n      this.previousState === State.UNDETERMINED &&\n      nextState === State.ACTIVE\n    ) {\n      return State.BEGAN;\n    }\n    return nextState;\n  }\n\n  getDirection() {\n    const config = this.getConfig();\n    const {\n      activeOffsetXStart,\n      activeOffsetXEnd,\n      activeOffsetYStart,\n      activeOffsetYEnd,\n      minDist,\n    } = config;\n    let directions: number[] = [];\n    let horizontalDirections = [];\n\n    if (!isnan(minDist)) {\n      return Hammer.DIRECTION_ALL;\n    }\n\n    if (!isnan(activeOffsetXStart)) {\n      horizontalDirections.push(Hammer.DIRECTION_LEFT);\n    }\n    if (!isnan(activeOffsetXEnd)) {\n      horizontalDirections.push(Hammer.DIRECTION_RIGHT);\n    }\n    if (horizontalDirections.length === 2) {\n      horizontalDirections = [Hammer.DIRECTION_HORIZONTAL];\n    }\n\n    directions = directions.concat(horizontalDirections);\n    let verticalDirections = [];\n\n    if (!isnan(activeOffsetYStart)) {\n      verticalDirections.push(Hammer.DIRECTION_UP);\n    }\n    if (!isnan(activeOffsetYEnd)) {\n      verticalDirections.push(Hammer.DIRECTION_DOWN);\n    }\n\n    if (verticalDirections.length === 2) {\n      verticalDirections = [Hammer.DIRECTION_VERTICAL];\n    }\n\n    directions = directions.concat(verticalDirections);\n\n    if (!directions.length) {\n      return Hammer.DIRECTION_NONE;\n    }\n    if (\n      directions[0] === Hammer.DIRECTION_HORIZONTAL &&\n      directions[1] === Hammer.DIRECTION_VERTICAL\n    ) {\n      return Hammer.DIRECTION_ALL;\n    }\n    if (horizontalDirections.length && verticalDirections.length) {\n      return Hammer.DIRECTION_ALL;\n    }\n\n    return directions[0];\n  }\n\n  getConfig() {\n    if (!this.hasCustomActivationCriteria) {\n      // Default config\n      // If no params have been defined then this config should emulate the native gesture as closely as possible.\n      return {\n        minDistSq: 10,\n      };\n    }\n    return this.config;\n  }\n\n  shouldFailUnderCustomCriteria(\n    { deltaX, deltaY }: HammerInputExt,\n    criteria: any\n  ) {\n    return (\n      (!isnan(criteria.failOffsetXStart) &&\n        deltaX < criteria.failOffsetXStart) ||\n      (!isnan(criteria.failOffsetXEnd) && deltaX > criteria.failOffsetXEnd) ||\n      (!isnan(criteria.failOffsetYStart) &&\n        deltaY < criteria.failOffsetYStart) ||\n      (!isnan(criteria.failOffsetYEnd) && deltaY > criteria.failOffsetYEnd)\n    );\n  }\n\n  shouldActivateUnderCustomCriteria(\n    { deltaX, deltaY, velocity }: any,\n    criteria: any\n  ) {\n    return (\n      (!isnan(criteria.activeOffsetXStart) &&\n        deltaX < criteria.activeOffsetXStart) ||\n      (!isnan(criteria.activeOffsetXEnd) &&\n        deltaX > criteria.activeOffsetXEnd) ||\n      (!isnan(criteria.activeOffsetYStart) &&\n        deltaY < criteria.activeOffsetYStart) ||\n      (!isnan(criteria.activeOffsetYEnd) &&\n        deltaY > criteria.activeOffsetYEnd) ||\n      TEST_MIN_IF_NOT_NAN(\n        VEC_LEN_SQ({ x: deltaX, y: deltaY }),\n        criteria.minDistSq\n      ) ||\n      TEST_MIN_IF_NOT_NAN(velocity.x, criteria.minVelocityX) ||\n      TEST_MIN_IF_NOT_NAN(velocity.y, criteria.minVelocityY) ||\n      TEST_MIN_IF_NOT_NAN(VEC_LEN_SQ(velocity), criteria.minVelocitySq)\n    );\n  }\n\n  shouldMultiFingerPanFail({\n    pointerLength,\n    scale,\n    deltaRotation,\n  }: {\n    deltaRotation: number;\n    pointerLength: number;\n    scale: number;\n  }) {\n    if (pointerLength <= 1) {\n      return false;\n    }\n\n    // Test if the pan had too much pinching or rotating.\n    const deltaScale = Math.abs(scale - 1);\n    const absDeltaRotation = Math.abs(deltaRotation);\n    if (deltaScale > MULTI_FINGER_PAN_MAX_PINCH_THRESHOLD) {\n      // > If the threshold doesn't seem right.\n      // You can log the value which it failed at here:\n      return true;\n    }\n    if (absDeltaRotation > MULTI_FINGER_PAN_MAX_ROTATION_THRESHOLD) {\n      // > If the threshold doesn't seem right.\n      // You can log the value which it failed at here:\n      return true;\n    }\n\n    return false;\n  }\n\n  updateHasCustomActivationCriteria(\n    criteria: Config & { minVelocityX?: number; minVelocityY?: number }\n  ) {\n    return (\n      isValidNumber(criteria.minDistSq) ||\n      isValidNumber(criteria.minVelocityX) ||\n      isValidNumber(criteria.minVelocityY) ||\n      isValidNumber(criteria.minVelocitySq) ||\n      isValidNumber(criteria.activeOffsetXStart) ||\n      isValidNumber(criteria.activeOffsetXEnd) ||\n      isValidNumber(criteria.activeOffsetYStart) ||\n      isValidNumber(criteria.activeOffsetYEnd)\n    );\n  }\n\n  isGestureEnabledForEvent(\n    props: any,\n    _recognizer: any,\n    inputData: HammerInputExt & { deltaRotation: number }\n  ) {\n    if (this.shouldFailUnderCustomCriteria(inputData, props)) {\n      return { failed: true };\n    }\n\n    const velocity = { x: inputData.velocityX, y: inputData.velocityY };\n    if (\n      this.hasCustomActivationCriteria &&\n      this.shouldActivateUnderCustomCriteria(\n        { deltaX: inputData.deltaX, deltaY: inputData.deltaY, velocity },\n        props\n      )\n    ) {\n      if (\n        this.shouldMultiFingerPanFail({\n          pointerLength: inputData.maxPointers,\n          scale: inputData.scale,\n          deltaRotation: inputData.deltaRotation,\n        })\n      ) {\n        return {\n          failed: true,\n        };\n      }\n      return { success: true };\n    }\n    return { success: false };\n  }\n}\n\nexport default PanGestureHandler;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}