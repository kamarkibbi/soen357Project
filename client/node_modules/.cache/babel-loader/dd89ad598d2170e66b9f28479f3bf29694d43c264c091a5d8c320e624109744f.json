{"ast":null,"code":"/**\n * Use invariant() to assert state which your program assumes to be true.\n *\n * Provide sprintf-style format (only %s is supported) and arguments\n * to provide information about what broke and what you were\n * expecting.\n *\n * The invariant message will be stripped in production, but the invariant\n * will remain to ensure logic does not differ in production.\n */\nlet validateFormat = function () {};\nif (process.env.NODE_ENV !== 'production') {\n  validateFormat = function (format) {\n    if (format === undefined) {\n      throw new Error('invariant requires an error message argument');\n    }\n  };\n}\nfunction invariant(condition, format) {\n  for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n    args[_key - 2] = arguments[_key];\n  }\n  validateFormat(format);\n  if (!condition) {\n    let error;\n    if (format === undefined) {\n      error = new Error('Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.');\n    } else {\n      let argIndex = 0;\n      error = new Error(format.replace(/%s/g, () => args[argIndex++]));\n      error.name = 'Invariant Violation';\n    }\n    error.framesToPop = 1; // we don't care about invariant's own frame\n\n    throw error;\n  }\n}\nexport default invariant;","map":{"version":3,"names":["validateFormat","process","env","NODE_ENV","format","undefined","Error","invariant","condition","_len","arguments","length","args","Array","_key","error","argIndex","replace","name","framesToPop"],"sources":["/Users/solomon-moulang-lewis/Documents/University/Year 2/Term 2/User interface design/soen357Project/client/node_modules/@react-navigation/core/lib/module/utils/invariant.ts"],"sourcesContent":["/**\n * Use invariant() to assert state which your program assumes to be true.\n *\n * Provide sprintf-style format (only %s is supported) and arguments\n * to provide information about what broke and what you were\n * expecting.\n *\n * The invariant message will be stripped in production, but the invariant\n * will remain to ensure logic does not differ in production.\n */\n\nlet validateFormat: (format?: string) => void = function () {};\n\nif (process.env.NODE_ENV !== 'production') {\n  validateFormat = function (format?: string) {\n    if (format === undefined) {\n      throw new Error('invariant requires an error message argument');\n    }\n  };\n}\n\nfunction invariant(condition: boolean, format?: string, ...args: any[]) {\n  validateFormat(format);\n\n  if (!condition) {\n    let error: Error & { framesToPop?: number };\n    if (format === undefined) {\n      error = new Error(\n        'Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.'\n      );\n    } else {\n      let argIndex = 0;\n      error = new Error(format.replace(/%s/g, () => args[argIndex++]));\n      error.name = 'Invariant Violation';\n    }\n\n    error.framesToPop = 1; // we don't care about invariant's own frame\n    throw error;\n  }\n}\n\nexport default invariant;\n"],"mappings":"AAAA;;;;;;;;;;AAWA,IAAIA,cAAyC,GAAG,SAAAA,CAAA,EAAY,CAAE,CAA9D;AAEA,IAAIC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;EACzCH,cAAc,GAAG,SAAAA,CAAUI,MAAV,EAA2B;IAC1C,IAAIA,MAAM,KAAKC,SAAf,EAA0B;MACxB,MAAM,IAAIC,KAAJ,CAAU,8CAAV,CAAN;IACD;EACF,CAJD;AAKD;AAED,SAASC,SAATA,CAAmBC,SAAnB,EAAuCJ,MAAvC,EAAwE;EAAA,SAAAK,IAAA,GAAAC,SAAA,CAAAC,MAAA,EAAbC,IAA3D,OAAAC,KAAA,CAAAJ,IAAA,OAAAA,IAAA,WAAAK,IAAA,MAAAA,IAAA,GAAAL,IAAA,EAAAK,IAAA;IAA2DF,IAA3D,CAAAE,IAAA,QAAAJ,SAAA,CAAAI,IAAA;EAAA;EACEd,cAAc,CAACI,MAAD,CAAd;EAEA,IAAI,CAACI,SAAL,EAAgB;IACd,IAAIO,KAAJ;IACA,IAAIX,MAAM,KAAKC,SAAf,EAA0B;MACxBU,KAAK,GAAG,IAAIT,KAAJ,CACN,+HADM,CAAR;IAGD,CAJD,MAIO;MACL,IAAIU,QAAQ,GAAG,CAAf;MACAD,KAAK,GAAG,IAAIT,KAAJ,CAAUF,MAAM,CAACa,OAAP,CAAe,KAAf,EAAsB,MAAML,IAAI,CAACI,QAAQ,EAAT,CAAhC,CAAV,CAAR;MACAD,KAAK,CAACG,IAAN,GAAa,qBAAb;IACD;IAEDH,KAAK,CAACI,WAAN,GAAoB,CAApB,CAZc,CAYS;;IACvB,MAAMJ,KAAN;EACD;AACF;AAED,eAAeR,SAAf"},"metadata":{},"sourceType":"module","externalDependencies":[]}