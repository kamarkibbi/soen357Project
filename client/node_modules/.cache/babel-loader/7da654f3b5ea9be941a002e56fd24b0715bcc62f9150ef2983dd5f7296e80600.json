{"ast":null,"code":"var _Screens;\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport * as React from 'react';\nimport { Animated, View, Platform } from 'react-native';\nlet Screens;\ntry {\n  Screens = require('react-native-screens');\n} catch (e) {// Ignore\n} // The web implementation in react-native-screens seems buggy.\n// The view doesn't become visible after coming back in some cases.\n// So we use our custom implementation.\n\nclass WebScreen extends React.Component {\n  render() {\n    const {\n      active,\n      style,\n      ...rest\n    } = this.props;\n    return /*#__PURE__*/React.createElement(View // @ts-expect-error: hidden exists on web, but not in React Native\n    , _extends({\n      hidden: !active,\n      style: [style, {\n        display: active ? 'flex' : 'none'\n      }]\n    }, rest));\n  }\n}\nconst AnimatedWebScreen = Animated.createAnimatedComponent(WebScreen); // @ts-ignore\n\nexport const shouldUseActivityState = (_Screens = Screens) === null || _Screens === void 0 ? void 0 : _Screens.shouldUseActivityState;\nexport const MaybeScreenContainer = _ref => {\n  let {\n    enabled,\n    ...rest\n  } = _ref;\n  var _Screens2;\n  if (enabled && Platform.OS !== 'web' && ((_Screens2 = Screens) === null || _Screens2 === void 0 ? void 0 : _Screens2.screensEnabled())) {\n    return /*#__PURE__*/(\n      // @ts-ignore\n      React.createElement(Screens.ScreenContainer, _extends({\n        enabled: enabled\n      }, rest))\n    );\n  }\n  return /*#__PURE__*/React.createElement(View, rest);\n};\nexport const MaybeScreen = _ref2 => {\n  let {\n    enabled,\n    active,\n    ...rest\n  } = _ref2;\n  var _Screens3;\n  if (enabled && Platform.OS === 'web') {\n    return /*#__PURE__*/React.createElement(AnimatedWebScreen, _extends({\n      active: active\n    }, rest));\n  }\n  if (enabled && ((_Screens3 = Screens) === null || _Screens3 === void 0 ? void 0 : _Screens3.screensEnabled())) {\n    if (shouldUseActivityState) {\n      return /*#__PURE__*/(\n        // @ts-expect-error: there was an `active` prop and no `activityState` in older version and stackPresentation was required\n        React.createElement(Screens.Screen, _extends({\n          enabled: enabled,\n          activityState: active\n        }, rest))\n      );\n    } else {\n      return /*#__PURE__*/(\n        // @ts-expect-error: there was an `active` prop and no `activityState` in older version and stackPresentation was required\n        React.createElement(Screens.Screen, _extends({\n          enabled: enabled,\n          active: active\n        }, rest))\n      );\n    }\n  }\n  return /*#__PURE__*/React.createElement(View, rest);\n};","map":{"version":3,"names":["React","Animated","View","Platform","Screens","require","e","WebScreen","Component","render","active","style","rest","props","createElement","_extends","hidden","display","AnimatedWebScreen","createAnimatedComponent","shouldUseActivityState","_Screens","MaybeScreenContainer","_ref","enabled","_Screens2","OS","screensEnabled","ScreenContainer","MaybeScreen","_ref2","_Screens3","Screen","activityState"],"sources":["/Users/solomon-moulang-lewis/Documents/University/Year 2/Term 2/User interface design/soen357Project/client/node_modules/react-navigation-stack/lib/module/vendor/views/Screens.tsx"],"sourcesContent":["import * as React from 'react';\nimport { Animated, View, Platform, ViewProps } from 'react-native';\n\nlet Screens: typeof import('react-native-screens') | undefined;\n\ntry {\n  Screens = require('react-native-screens');\n} catch (e) {\n  // Ignore\n}\n\n// The web implementation in react-native-screens seems buggy.\n// The view doesn't become visible after coming back in some cases.\n// So we use our custom implementation.\nclass WebScreen extends React.Component<\n  ViewProps & {\n    active: number;\n    children: React.ReactNode;\n  }\n> {\n  render() {\n    const { active, style, ...rest } = this.props;\n\n    return (\n      <View\n        // @ts-expect-error: hidden exists on web, but not in React Native\n        hidden={!active}\n        style={[style, { display: active ? 'flex' : 'none' }]}\n        {...rest}\n      />\n    );\n  }\n}\n\nconst AnimatedWebScreen = Animated.createAnimatedComponent(WebScreen);\n\n// @ts-ignore\nexport const shouldUseActivityState = Screens?.shouldUseActivityState;\n\nexport const MaybeScreenContainer = ({\n  enabled,\n  ...rest\n}: ViewProps & {\n  enabled: boolean;\n  children: React.ReactNode;\n}) => {\n  if (enabled && Platform.OS !== 'web' && Screens?.screensEnabled()) {\n    return (\n      // @ts-ignore\n      <Screens.ScreenContainer enabled={enabled} {...rest} />\n    );\n  }\n\n  return <View {...rest} />;\n};\n\nexport const MaybeScreen = ({\n  enabled,\n  active,\n  ...rest\n}: ViewProps & {\n  enabled: boolean;\n  active: 0 | 1 | 2 | Animated.AnimatedInterpolation;\n  children: React.ReactNode;\n}) => {\n  if (enabled && Platform.OS === 'web') {\n    return <AnimatedWebScreen active={active} {...rest} />;\n  }\n\n  if (enabled && Screens?.screensEnabled()) {\n    if (shouldUseActivityState) {\n      return (\n        // @ts-expect-error: there was an `active` prop and no `activityState` in older version and stackPresentation was required\n        <Screens.Screen enabled={enabled} activityState={active} {...rest} />\n      );\n    } else {\n      return (\n        // @ts-expect-error: there was an `active` prop and no `activityState` in older version and stackPresentation was required\n        <Screens.Screen enabled={enabled} active={active} {...rest} />\n      );\n    }\n  }\n\n  return <View {...rest} />;\n};\n"],"mappings":";;;;;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,QAAT,EAAmBC,IAAnB,EAAyBC,QAAzB,QAAoD,cAApD;AAEA,IAAIC,OAAJ;AAEA,IAAI;EACFA,OAAO,GAAGC,OAAO,CAAC,sBAAD,CAAjB;AACD,CAFD,CAEE,OAAOC,CAAP,EAAU,CACV;AAAA,C,CAGF;AACA;AACA;;AACA,MAAMC,SAAN,SAAwBP,KAAK,CAACQ,SAA9B,CAKE;EACAC,MAAMA,CAAA,EAAG;IACP,MAAM;MAAEC,MAAF;MAAUC,KAAV;MAAiB,GAAGC;IAApB,IAA6B,KAAKC,KAAxC;IAEA,oBACEb,KAAA,CAAAc,aAAA,CAACZ,IAAD,CACE;IAAA,EADFa,QAAA;MAEEC,MAAM,EAAE,CAACN,MAFX;MAGEC,KAAK,EAAE,CAACA,KAAD,EAAQ;QAAEM,OAAO,EAAEP,MAAM,GAAG,MAAH,GAAY;MAA7B,CAAR;IAHT,GAIME,IAJN,EADF;EAQD;AAZD;AAeF,MAAMM,iBAAiB,GAAGjB,QAAQ,CAACkB,uBAAT,CAAiCZ,SAAjC,CAA1B,C,CAEA;;AACA,OAAO,MAAMa,sBAAsB,IAAAC,QAAA,GAAGjB,OAAH,cAAAiB,QAAA,uBAAGA,QAAA,CAASD,sBAAxC;AAEP,OAAO,MAAME,oBAAoB,GAAGC,IAAA,IAM9B;EAAA,IAN+B;IACnCC,OADmC;IAEnC,GAAGZ;EAFgC,CAAD,GAAAW,IAAA;EAM9B,IAAAE,SAAA;EACJ,IAAID,OAAO,IAAIrB,QAAQ,CAACuB,EAAT,KAAgB,KAA3B,MAAAD,SAAA,GAAoCrB,OAApC,cAAAqB,SAAA,uBAAoCA,SAAA,CAASE,cAAT,EAApC,CAAJ,EAAmE;IACjE;MACE;MACA3B,KAAA,CAAAc,aAAA,CAACV,OAAD,CAASwB,eAAT,EAAAb,QAAA;QAAyBS,OAAO,EAAEA;MAAlC,GAA+CZ,IAA/C;IAAA;EAEH;EAED,oBAAOZ,KAAA,CAAAc,aAAA,CAACZ,IAAD,EAAUU,IAAV,CAAP;AACD,CAfM;AAiBP,OAAO,MAAMiB,WAAW,GAAGC,KAAA,IAQrB;EAAA,IARsB;IAC1BN,OAD0B;IAE1Bd,MAF0B;IAG1B,GAAGE;EAHuB,CAAD,GAAAkB,KAAA;EAQrB,IAAAC,SAAA;EACJ,IAAIP,OAAO,IAAIrB,QAAQ,CAACuB,EAAT,KAAgB,KAA/B,EAAsC;IACpC,oBAAO1B,KAAA,CAAAc,aAAA,CAACI,iBAAD,EAAAH,QAAA;MAAmBL,MAAM,EAAEA;IAA3B,GAAuCE,IAAvC,EAAP;EACD;EAED,IAAIY,OAAO,MAAAO,SAAA,GAAI3B,OAAJ,cAAA2B,SAAA,uBAAIA,SAAA,CAASJ,cAAT,EAAJ,CAAX,EAA0C;IACxC,IAAIP,sBAAJ,EAA4B;MAC1B;QACE;QACApB,KAAA,CAAAc,aAAA,CAACV,OAAD,CAAS4B,MAAT,EAAAjB,QAAA;UAAgBS,OAAO,EAAEA,OAAzB;UAAkCS,aAAa,EAAEvB;QAAjD,GAA6DE,IAA7D;MAAA;IAEH,CALD,MAKO;MACL;QACE;QACAZ,KAAA,CAAAc,aAAA,CAACV,OAAD,CAAS4B,MAAT,EAAAjB,QAAA;UAAgBS,OAAO,EAAEA,OAAzB;UAAkCd,MAAM,EAAEA;QAA1C,GAAsDE,IAAtD;MAAA;IAEH;EACF;EAED,oBAAOZ,KAAA,CAAAc,aAAA,CAACZ,IAAD,EAAUU,IAAV,CAAP;AACD,CA5BM"},"metadata":{},"sourceType":"module","externalDependencies":[]}