{"ast":null,"code":"function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nimport * as React from 'react';\nimport withNavigation from './withNavigation';\nconst EventNameToPropName = {\n  willFocus: 'onWillFocus',\n  didFocus: 'onDidFocus',\n  willBlur: 'onWillBlur',\n  didBlur: 'onDidBlur'\n};\nconst EventNames = Object.keys(EventNameToPropName);\nclass NavigationEvents extends React.Component {\n  constructor() {\n    super(...arguments);\n    _defineProperty(this, \"getPropListener\", eventName => this.props[EventNameToPropName[eventName]]);\n  }\n  componentDidMount() {\n    // We register all navigation listeners on mount to ensure listener stability across re-render\n    // A former implementation was replacing (removing/adding) listeners on all update (if prop provided)\n    // but there were issues (see https://github.com/react-navigation/react-navigation/issues/5058)\n    this.subscribeAll();\n  }\n  componentDidUpdate(prevProps) {\n    if (this.props.navigation !== prevProps.navigation) {\n      this.removeAll();\n      this.subscribeAll();\n    }\n  }\n  componentWillUnmount() {\n    this.removeAll();\n  }\n  subscribeAll() {\n    var _this = this;\n    this.subscriptions = {};\n    EventNames.forEach(eventName => {\n      this.subscriptions[eventName] = this.props.navigation.addListener(eventName, function () {\n        const propListener = _this.getPropListener(eventName);\n        return propListener && propListener(...arguments);\n      });\n    });\n  }\n  removeAll() {\n    EventNames.forEach(eventName => {\n      this.subscriptions[eventName].remove();\n    });\n  }\n  render() {\n    return null;\n  }\n}\nexport default withNavigation(NavigationEvents);","map":{"version":3,"names":["React","withNavigation","EventNameToPropName","willFocus","didFocus","willBlur","didBlur","EventNames","Object","keys","NavigationEvents","Component","constructor","arguments","_defineProperty","eventName","props","componentDidMount","subscribeAll","componentDidUpdate","prevProps","navigation","removeAll","componentWillUnmount","_this","subscriptions","forEach","addListener","propListener","getPropListener","remove","render"],"sources":["/Users/solomon-moulang-lewis/Documents/University/Year 2/Term 2/User interface design/soen357Project/client/node_modules/@react-navigation/core/lib/module/views/NavigationEvents.js"],"sourcesContent":["import * as React from 'react';\nimport withNavigation from './withNavigation';\n\nconst EventNameToPropName = {\n  willFocus: 'onWillFocus',\n  didFocus: 'onDidFocus',\n  willBlur: 'onWillBlur',\n  didBlur: 'onDidBlur',\n};\n\nconst EventNames = Object.keys(EventNameToPropName);\n\nclass NavigationEvents extends React.Component {\n  componentDidMount() {\n    // We register all navigation listeners on mount to ensure listener stability across re-render\n    // A former implementation was replacing (removing/adding) listeners on all update (if prop provided)\n    // but there were issues (see https://github.com/react-navigation/react-navigation/issues/5058)\n    this.subscribeAll();\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.props.navigation !== prevProps.navigation) {\n      this.removeAll();\n      this.subscribeAll();\n    }\n  }\n\n  componentWillUnmount() {\n    this.removeAll();\n  }\n\n  getPropListener = (eventName) => this.props[EventNameToPropName[eventName]];\n\n  subscribeAll() {\n    this.subscriptions = {};\n\n    EventNames.forEach((eventName) => {\n      this.subscriptions[eventName] = this.props.navigation.addListener(\n        eventName,\n        (...args) => {\n          const propListener = this.getPropListener(eventName);\n          return propListener && propListener(...args);\n        }\n      );\n    });\n  }\n\n  removeAll() {\n    EventNames.forEach((eventName) => {\n      this.subscriptions[eventName].remove();\n    });\n  }\n\n  render() {\n    return null;\n  }\n}\n\nexport default withNavigation(NavigationEvents);\n"],"mappings":";;;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AAEA,MAAMC,mBAAmB,GAAG;EAC1BC,SAAS,EAAE,aADe;EAE1BC,QAAQ,EAAE,YAFgB;EAG1BC,QAAQ,EAAE,YAHgB;EAI1BC,OAAO,EAAE;AAJiB,CAA5B;AAOA,MAAMC,UAAU,GAAGC,MAAM,CAACC,IAAP,CAAYP,mBAAZ,CAAnB;AAEA,MAAMQ,gBAAN,SAA+BV,KAAK,CAACW,SAArC,CAA+C;EAAAC,YAAA;IAAA,SAAAC,SAAA;IAAAC,eAAA,0BAmB1BC,SAAD,IAAe,KAAKC,KAAL,CAAWd,mBAAmB,CAACa,SAAD,CAA9B,CAnBY;EAAA;EAC7CE,iBAAiBA,CAAA,EAAG;IAClB;IACA;IACA;IACA,KAAKC,YAAL;EACD;EAEDC,kBAAkBA,CAACC,SAAD,EAAY;IAC5B,IAAI,KAAKJ,KAAL,CAAWK,UAAX,KAA0BD,SAAS,CAACC,UAAxC,EAAoD;MAClD,KAAKC,SAAL;MACA,KAAKJ,YAAL;IACD;EACF;EAEDK,oBAAoBA,CAAA,EAAG;IACrB,KAAKD,SAAL;EACD;EAIDJ,YAAYA,CAAA,EAAG;IAAA,IAAAM,KAAA;IACb,KAAKC,aAAL,GAAqB,EAArB;IAEAlB,UAAU,CAACmB,OAAX,CAAoBX,SAAD,IAAe;MAChC,KAAKU,aAAL,CAAmBV,SAAnB,IAAgC,KAAKC,KAAL,CAAWK,UAAX,CAAsBM,WAAtB,CAC9BZ,SAD8B,EAE9B,YAAa;QACX,MAAMa,YAAY,GAAGJ,KAAA,CAAKK,eAAL,CAAqBd,SAArB,CAArB;QACA,OAAOa,YAAY,IAAIA,YAAY,CAAC,GAAAf,SAAD,CAAnC;MACD,CAL6B,CAAhC;IAOD,CARD;EASD;EAEDS,SAASA,CAAA,EAAG;IACVf,UAAU,CAACmB,OAAX,CAAoBX,SAAD,IAAe;MAChC,KAAKU,aAAL,CAAmBV,SAAnB,EAA8Be,MAA9B;IACD,CAFD;EAGD;EAEDC,MAAMA,CAAA,EAAG;IACP,OAAO,IAAP;EACD;AA3C4C;AA8C/C,eAAe9B,cAAc,CAACS,gBAAD,CAA7B"},"metadata":{},"sourceType":"module","externalDependencies":[]}